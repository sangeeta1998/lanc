// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/inst_vector.isle
// - src/isa/riscv64/lower.isle
// - /home/ubuntu/lanc/sculi-trust-demo/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_m(&mut self) -> bool;
    fn has_v(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn i64_shift_for_lui(&mut self, arg0: i64) -> Option<(u64, Imm12)>;
    fn i64_shift(&mut self, arg0: i64) -> Option<(i64, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_add(&mut self, arg0: Imm12, arg1: i32) -> Option<Imm12>;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm20_from_u64(&mut self, arg0: u64) -> Option<Imm20>;
    fn imm20_from_i64(&mut self, arg0: i64) -> Option<Imm20>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_reg_offset_amode(&mut self, arg0: Reg, arg1: i64, arg2: Type) -> AMode;
    fn gen_sp_offset_amode(&mut self, arg0: i64, arg1: Type) -> AMode;
    fn gen_fp_offset_amode(&mut self, arg0: i64, arg1: Type) -> AMode;
    fn gen_stack_slot_amode(&mut self, arg0: StackSlot, arg1: i64, arg2: Type) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn int_compare_decompose(&mut self, arg0: IntegerCompare) -> (IntCC, XReg, XReg);
    fn label_to_br_target(&mut self, arg0: MachLabel) -> CondBrTarget;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &MachLabelSlice) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn is_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn zero_reg(&mut self) -> XReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn bclr_imm(&mut self, arg0: Type, arg1: u64) -> Option<Imm12>;
    fn bseti_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn binvi_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn fcvt_smax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_smin_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umin_bound(&mut self, arg0: Type, arg1: bool) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 345.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 387.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 406.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 414.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: FRM,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    TrapIf {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        label: MachLabel,
    },
    CondBr {
        taken: CondBrTarget,
        not_taken: CondBrTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    ElfTlsGetAddr {
        rd: WritableReg,
        name: BoxExternalName,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: WritableValueRegs,
        condition: IntegerCompare,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecMachLabel,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 362.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 369.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 394.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 407.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 430.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 470.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 482.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 491.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 571.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 604.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type COpcodeSpace: defined at src/isa/riscv64/inst.isle line 646.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum COpcodeSpace {
    C0,
    C1,
    C2,
}

/// Internal type CrOp: defined at src/isa/riscv64/inst.isle line 653.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CrOp {
    CMv,
    CAdd,
    CJr,
    CJalr,
    CEbreak,
}

/// Internal type CaOp: defined at src/isa/riscv64/inst.isle line 664.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CaOp {
    CAnd,
    COr,
    CXor,
    CSub,
    CAddw,
    CSubw,
    CMul,
}

/// Internal type CjOp: defined at src/isa/riscv64/inst.isle line 675.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CjOp {
    CJ,
}

/// Internal type CiOp: defined at src/isa/riscv64/inst.isle line 680.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiOp {
    CAddi,
    CAddiw,
    CAddi16sp,
    CSlli,
    CLi,
    CLui,
    CLwsp,
    CLdsp,
    CFldsp,
}

/// Internal type CiwOp: defined at src/isa/riscv64/inst.isle line 693.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiwOp {
    CAddi4spn,
}

/// Internal type CbOp: defined at src/isa/riscv64/inst.isle line 698.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CbOp {
    CSrli,
    CSrai,
    CAndi,
}

/// Internal type CssOp: defined at src/isa/riscv64/inst.isle line 705.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CssOp {
    CSwsp,
    CSdsp,
    CFsdsp,
}

/// Internal type CsOp: defined at src/isa/riscv64/inst.isle line 712.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsOp {
    CSw,
    CSd,
    CFsd,
}

/// Internal type ClOp: defined at src/isa/riscv64/inst.isle line 719.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ClOp {
    CLw,
    CLd,
    CFld,
}

/// Internal type CsznOp: defined at src/isa/riscv64/inst.isle line 726.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsznOp {
    CNot,
    CZextb,
    CZexth,
    CZextw,
    CSextb,
    CSexth,
}

/// Internal type ZcbMemOp: defined at src/isa/riscv64/inst.isle line 739.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZcbMemOp {
    CLbu,
    CLhu,
    CLh,
    CSb,
    CSh,
}

/// Internal type CsrRegOP: defined at src/isa/riscv64/inst.isle line 748.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src/isa/riscv64/inst.isle line 757.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src/isa/riscv64/inst.isle line 767.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 773.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 793.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src/isa/riscv64/inst.isle line 2204.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type FloatCompare: defined at src/isa/riscv64/inst.isle line 2849.
#[derive(Clone, Debug)]
pub enum FloatCompare {
    One { r: XReg },
    Zero { r: XReg },
}

/// Internal type VecElementWidth: defined at src/isa/riscv64/inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src/isa/riscv64/inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src/isa/riscv64/inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src/isa/riscv64/inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src/isa/riscv64/inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src/isa/riscv64/inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src/isa/riscv64/inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src/isa/riscv64/inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src/isa/riscv64/inst_vector.isle line 211.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src/isa/riscv64/inst_vector.isle line 216.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
}

/// Internal type VecAluOpRRImm5: defined at src/isa/riscv64/inst_vector.isle line 235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src/isa/riscv64/inst_vector.isle line 265.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src/isa/riscv64/inst_vector.isle line 272.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src/isa/riscv64/inst_vector.isle line 304.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 328.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 355.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 357.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 360.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 354"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 368.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 373.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 375.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 377.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 372"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 402.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 401"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 432.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 433.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 431"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 438.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 440.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 437"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 453.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 447.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 446"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 484.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 490.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 502.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 518.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 525.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 538.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 478.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 470.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 468"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 556.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 563.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 574.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 579.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 584.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 589.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 594.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 572"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 603.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 611.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 620.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 628.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 637.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 697.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 705.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 714.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 722.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 731.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 650.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 658.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 667.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 675.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 684.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 744.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 752.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 761.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 769.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 778.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 790.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 798.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 815.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 807.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 823.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 832.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 600"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1032.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 858.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 863.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 878.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 888.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 893.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 898.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 919.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 924.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 939.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 949.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 954.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 959.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 981.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 986.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1001.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1011.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1016.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 1021.
    return v2;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_freg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v7 = C::writable_freg_to_writable_reg(ctx, v5);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v6,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1055.
    return v10;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1071.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1077.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1083.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, v2);
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1089.
    return v6;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1101.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1107.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1113.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1119.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1125.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1131.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1137.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1143.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1149.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1155.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1161.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1167.
    return v5;
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1173.
    return v6;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1179.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_sltu(ctx, v1, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1185.
    return v2;
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1191.
    return v5;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1197.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1203.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1213.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1219.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 1225.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1231.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1237.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1243.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1249.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1255.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1261.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1267.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1277.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1283.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1289.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1295.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1301.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1307.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1313.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1322.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1328.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1334.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1340.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1346.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1355.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1356.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src/isa/riscv64/inst.isle line 1354"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1360.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1361.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src/isa/riscv64/inst.isle line 1359"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1365.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1366.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src/isa/riscv64/inst.isle line 1364"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1370.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1371.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src/isa/riscv64/inst.isle line 1369"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v6 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, arg1, v5);
            let v7 = C::freg_new(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 1375.
            return v7;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, arg1, v5);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1376.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src/isa/riscv64/inst.isle line 1374"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v10 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, arg1, v7, v8, v9);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 1380.
            return v11;
        }
        F64 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v14 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, arg1, v7, v8, v9);
            let v15 = C::freg_new(ctx, v14);
            // Rule at src/isa/riscv64/inst.isle line 1381.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src/isa/riscv64/inst.isle line 1379"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, &FRM::RNE, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1385.
    return v6;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, &FRM::RNE, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1389.
    return v6;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1393.
    return v6;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1397.
    return v6;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1401.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1405.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsw.
pub fn constructor_rv_fcvtsw<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSw, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1409.
    return v6;
}

// Generated as internal constructor for term rv_fcvtswu.
pub fn constructor_rv_fcvtswu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSwU, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1413.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdw.
pub fn constructor_rv_fcvtdw<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDW, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1417.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdwu.
pub fn constructor_rv_fcvtdwu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDWU, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1421.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsl.
pub fn constructor_rv_fcvtsl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSL, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1425.
    return v6;
}

// Generated as internal constructor for term rv_fcvtslu.
pub fn constructor_rv_fcvtslu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSLU, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1429.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdl.
pub fn constructor_rv_fcvtdl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDL, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1433.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdlu.
pub fn constructor_rv_fcvtdlu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDLu, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1437.
    return v6;
}

// Generated as internal constructor for term rv_fcvtws.
pub fn constructor_rv_fcvtws<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1441.
    return v6;
}

// Generated as internal constructor for term rv_fcvtls.
pub fn constructor_rv_fcvtls<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1445.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwus.
pub fn constructor_rv_fcvtwus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWuS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1449.
    return v6;
}

// Generated as internal constructor for term rv_fcvtlus.
pub fn constructor_rv_fcvtlus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLuS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1453.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwd.
pub fn constructor_rv_fcvtwd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1457.
    return v6;
}

// Generated as internal constructor for term rv_fcvtld.
pub fn constructor_rv_fcvtld<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1461.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwud.
pub fn constructor_rv_fcvtwud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWuD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1465.
    return v6;
}

// Generated as internal constructor for term rv_fcvtlud.
pub fn constructor_rv_fcvtlud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLuD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1469.
    return v6;
}

// Generated as internal constructor for term rv_fcvtw.
pub fn constructor_rv_fcvtw<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1473.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwd(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1474.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtw", "src/isa/riscv64/inst.isle line 1472"
    )
}

// Generated as internal constructor for term rv_fcvtl.
pub fn constructor_rv_fcvtl<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtls(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1478.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtld(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1479.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtl", "src/isa/riscv64/inst.isle line 1477"
    )
}

// Generated as internal constructor for term rv_fcvtwu.
pub fn constructor_rv_fcvtwu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtwus(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1483.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwud(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1484.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtwu", "src/isa/riscv64/inst.isle line 1482"
    )
}

// Generated as internal constructor for term rv_fcvtlu.
pub fn constructor_rv_fcvtlu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtlus(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1488.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtlud(ctx, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 1489.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtlu", "src/isa/riscv64/inst.isle line 1487"
    )
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, &FRM::RNE, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1495.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, &FRM::RNE, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1496.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src/isa/riscv64/inst.isle line 1494"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, &FRM::RTZ, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1502.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, &FRM::RTZ, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1503.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src/isa/riscv64/inst.isle line 1501"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1508.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, &FRM::RDN, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1514.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, &FRM::RDN, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1515.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src/isa/riscv64/inst.isle line 1513"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1520.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, &FRM::RDN, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1524.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, &FRM::RDN, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1525.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src/isa/riscv64/inst.isle line 1523"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, &FRM::RTZ, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1529.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, &FRM::RTZ, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1530.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src/isa/riscv64/inst.isle line 1528"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, &FRM::RNE, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1534.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, &FRM::RNE, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src/isa/riscv64/inst.isle line 1535.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src/isa/riscv64/inst.isle line 1533"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1540.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1545.
    return v3;
}

// Generated as internal constructor for term rv_fmin.
pub fn constructor_rv_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminS, F32, &FRM::RNE, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1549.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminD, F64, &FRM::RNE, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1550.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmin", "src/isa/riscv64/inst.isle line 1548"
    )
}

// Generated as internal constructor for term rv_fmax.
pub fn constructor_rv_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxS, F32, &FRM::RTZ, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src/isa/riscv64/inst.isle line 1554.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxD, F64, &FRM::RTZ, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1555.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmax", "src/isa/riscv64/inst.isle line 1553"
    )
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1563.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_adduw(ctx, arg0, v1);
    // Rule at src/isa/riscv64/inst.isle line 1570.
    return v2;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1576.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = C::xreg_to_reg(ctx, arg0);
            let v5 = C::xreg_to_reg(ctx, arg1);
            let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v4, v5);
            let v7 = C::xreg_new(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 1585.
            return v7;
        }
        false => {
            let v8 = constructor_rv_not(ctx, arg1);
            let v9 = constructor_rv_and(ctx, arg0, v8);
            // Rule at src/isa/riscv64/inst.isle line 1588.
            return v9;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_andn", "src/isa/riscv64/inst.isle line 1584"
    )
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1595.
    return v6;
}

// Generated as internal constructor for term rv_xnor.
pub fn constructor_rv_xnor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xnor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1601.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1606.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1611.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1616.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1621.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1626.
    return v4;
}

// Generated as internal constructor for term rv_cpopw.
pub fn constructor_rv_cpopw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpopw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1631.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1636.
    return v6;
}

// Generated as internal constructor for term rv_maxu.
pub fn constructor_rv_maxu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Maxu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1641.
    return v6;
}

// Generated as internal constructor for term rv_min.
pub fn constructor_rv_min<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1646.
    return v6;
}

// Generated as internal constructor for term rv_minu.
pub fn constructor_rv_minu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Minu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1651.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1656.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1661.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1666.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1671.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1676.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1681.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1686.
    return v6;
}

// Generated as internal constructor for term rv_rori.
pub fn constructor_rv_rori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Rori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1691.
    return v5;
}

// Generated as internal constructor for term rv_roriw.
pub fn constructor_rv_roriw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Roriw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1696.
    return v5;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1701.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1709.
    return v4;
}

// Generated as internal constructor for term rv_bclr.
pub fn constructor_rv_bclr<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bclr, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1715.
    return v6;
}

// Generated as internal constructor for term rv_bclri.
pub fn constructor_rv_bclri<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bclri, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1719.
    return v5;
}

// Generated as internal constructor for term rv_bext.
pub fn constructor_rv_bext<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bext, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1723.
    return v6;
}

// Generated as internal constructor for term rv_bexti.
pub fn constructor_rv_bexti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bexti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1727.
    return v5;
}

// Generated as internal constructor for term rv_binv.
pub fn constructor_rv_binv<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Binv, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1731.
    return v6;
}

// Generated as internal constructor for term rv_binvi.
pub fn constructor_rv_binvi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Binvi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1735.
    return v5;
}

// Generated as internal constructor for term rv_bset.
pub fn constructor_rv_bset<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bset, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1739.
    return v6;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1744.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1751.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1756.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(ctx: &mut C, arg0: &CSR, arg1: UImm5) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1764.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(ctx: &mut C, arg0: &FRM) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src/isa/riscv64/inst.isle line 1769.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(ctx: &mut C, arg0: &CSR, arg1: XReg) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1775.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(ctx: &mut C, arg0: XReg) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1780.
    return v2;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        R32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1805.
            return v3;
        }
        R64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1806.
            return v5;
        }
        F32 => {
            let v3 = constructor_imm(ctx, I32, arg1);
            let v7 = constructor_gen_bitcast(ctx, v3, I32, F32);
            // Rule at src/isa/riscv64/inst.isle line 1809.
            return v7;
        }
        F64 => {
            let v5 = constructor_imm(ctx, I64, arg1);
            let v9 = constructor_gen_bitcast(ctx, v5, I64, F64);
            // Rule at src/isa/riscv64/inst.isle line 1810.
            return v9;
        }
        _ => {}
    }
    let v10 = C::ty_int(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::i64_sextend_u64(ctx, v11, arg1);
        let v13 = C::i64_generate_imm(ctx, v12);
        if let Some(v14) = v13 {
            let v17 = C::imm20_is_zero(ctx, v14.0);
            if let Some(v18) = v17 {
                let v19 = C::zero_reg(ctx);
                let v20 = constructor_rv_addi(ctx, v19, v14.1);
                let v21 = C::xreg_to_reg(ctx, v20);
                // Rule at src/isa/riscv64/inst.isle line 1813.
                return v21;
            }
            let v22 = C::imm12_is_zero(ctx, v14.1);
            if let Some(v23) = v22 {
                let v24 = constructor_rv_lui(ctx, v14.0);
                let v25 = C::xreg_to_reg(ctx, v24);
                // Rule at src/isa/riscv64/inst.isle line 1820.
                return v25;
            }
            let v24 = constructor_rv_lui(ctx, v14.0);
            let v26 = constructor_rv_addi(ctx, v24, v14.1);
            let v27 = C::xreg_to_reg(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 1826.
            return v27;
        }
        let v28 = C::i64_shift_for_lui(ctx, v12);
        if let Some(v29) = v28 {
            let v32 = C::imm20_from_u64(ctx, v29.0);
            if let Some(v33) = v32 {
                let v34 = constructor_rv_lui(ctx, v33);
                let v35 = constructor_rv_slli(ctx, v34, v29.1);
                let v36 = C::xreg_to_reg(ctx, v35);
                // Rule at src/isa/riscv64/inst.isle line 1831.
                return v36;
            }
        }
        let v37 = C::i64_shift(ctx, v12);
        if let Some(v38) = v37 {
            let v41 = C::i64_generate_imm(ctx, v38.0);
            if let Some(v42) = v41 {
                let v45 = C::i64_as_u64(ctx, v38.0);
                let v46 = constructor_imm(ctx, v11, v45);
                let v47 = C::xreg_new(ctx, v46);
                let v48 = constructor_rv_slli(ctx, v47, v38.1);
                let v49 = C::xreg_to_reg(ctx, v48);
                // Rule at src/isa/riscv64/inst.isle line 1840.
                return v49;
            }
        }
        let v50 = C::emit_u64_le_const(ctx, arg1);
        let v51 = C::gen_const_amode(ctx, v50);
        let v53 = C::mem_flags_trusted(ctx);
        let v54 = constructor_gen_load(ctx, v51, &LoadOP::Ld, v53);
        // Rule at src/isa/riscv64/inst.isle line 1846.
        return v54;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/riscv64/inst.isle line 1802"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1855.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::imm12_const(ctx, arg0);
    let v3 = constructor_rv_addi(ctx, v1, v2);
    let v4 = C::xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1862.
    return v4;
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        // Rule at src/isa/riscv64/inst.isle line 1892.
                        return Some(v13);
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1903.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term replicated_imm5.
pub fn constructor_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::i64_from_iconst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = C::imm5_from_i64(ctx, v7);
                        if let Some(v9) = v8 {
                            // Rule at src/isa/riscv64/inst.isle line 1939.
                            return Some(v9);
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v10,
                constant_handle: v11,
            } => {
                if let &Opcode::Vconst = v10 {
                    let v12 = C::u128_from_constant(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = C::u128_replicated_u64(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = C::u64_replicated_u32(ctx, v15);
                            if let Some(v17) = v16 {
                                let v18 = C::u32_replicated_u16(ctx, v17);
                                if let Some(v19) = v18 {
                                    let v20 = C::u16_replicated_u8(ctx, v19);
                                    if let Some(v21) = v20 {
                                        let v22 = C::u8_as_i8(ctx, v21);
                                        let v23 = C::i8_to_imm5(ctx, v22);
                                        if let Some(v24) = v23 {
                                            // Rule at src/isa/riscv64/inst.isle line 1940.
                                            return Some(v24);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term replicated_uimm5.
pub fn constructor_replicated_uimm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<UImm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::def_inst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = &C::inst_data(ctx, v7);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v9,
                            imm: v10,
                        } = v8
                        {
                            if let &Opcode::Iconst = v9 {
                                let v11 = C::u64_from_imm64(ctx, v10);
                                let v12 = C::uimm5_from_u64(ctx, v11);
                                if let Some(v13) = v12 {
                                    // Rule at src/isa/riscv64/inst.isle line 1952.
                                    return Some(v13);
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v14,
                constant_handle: v15,
            } => {
                if let &Opcode::Vconst = v14 {
                    let v16 = C::u128_from_constant(ctx, v15);
                    if let Some(v17) = v16 {
                        let v18 = C::u128_replicated_u64(ctx, v17);
                        if let Some(v19) = v18 {
                            let v20 = C::u64_replicated_u32(ctx, v19);
                            if let Some(v21) = v20 {
                                let v22 = C::u32_replicated_u16(ctx, v21);
                                if let Some(v23) = v22 {
                                    let v24 = C::u16_replicated_u8(ctx, v23);
                                    if let Some(v25) = v24 {
                                        let v26 = C::uimm5_from_u8(ctx, v25);
                                        if let Some(v27) = v26 {
                                            // Rule at src/isa/riscv64/inst.isle line 1953.
                                            return Some(v27);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 1976.
        return Some(v2);
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1985.
            return 0x7FC00000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1986.
            return 0x7FF8000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src/isa/riscv64/inst.isle line 1984"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v4,
        rs: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1990.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1997.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v5,
        rs1: arg3,
        rs2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2004.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, arg1);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs1: arg3,
        rs2: arg4,
        rs3: arg5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/riscv64/inst.isle line 2011.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2019.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2027.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(ctx: &mut C, arg0: Imm20) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui { rd: v2, imm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2036.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2043.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2050.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 2056.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 2057.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 2055"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src/isa/riscv64/inst.isle line 2061.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src/isa/riscv64/inst.isle line 2064.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src/isa/riscv64/inst.isle line 2069.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src/isa/riscv64/inst.isle line 2074.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src/isa/riscv64/inst.isle line 2068"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src/isa/riscv64/inst.isle line 2087.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src/isa/riscv64/inst.isle line 2091.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2082.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2079.
    return v5;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 2099.
    return v12;
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v25 = constructor_val_already_extended(ctx, &ExtendOp::Zero, arg0);
    if let Some(v26) = v25 {
        let v12 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2143.
        return v12;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = constructor_put_in_xreg(ctx, arg0);
            let v14 = C::imm12_const(ctx, 0xFF);
            let v15 = constructor_rv_andi(ctx, v12, v14);
            // Rule at src/isa/riscv64/inst.isle line 2115.
            return v15;
        }
        I16 => {
            let v20 = C::has_zbb(ctx);
            if v20 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v21 = constructor_rv_zexth(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2132.
                return v21;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_rv_packw(ctx, v12, v17);
                // Rule at src/isa/riscv64/inst.isle line 2122.
                return v18;
            }
        }
        I32 => {
            let v22 = C::has_zba(ctx);
            if v22 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v23 = constructor_rv_zextw(ctx, v12);
                // Rule at src/isa/riscv64/inst.isle line 2137.
                return v23;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v19 = constructor_rv_pack(ctx, v12, v17);
                // Rule at src/isa/riscv64/inst.isle line 2127.
                return v19;
            }
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srli(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2110.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src/isa/riscv64/inst.isle line 2107"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = constructor_val_already_extended(ctx, &ExtendOp::Signed, arg0);
    if let Some(v19) = v18 {
        let v13 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src/isa/riscv64/inst.isle line 2172.
        return v13;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v14 = constructor_rv_sextb(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2156.
                return v14;
            }
        }
        I16 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v15 = constructor_rv_sexth(ctx, v13);
                // Rule at src/isa/riscv64/inst.isle line 2161.
                return v15;
            }
        }
        I32 => {
            let v13 = constructor_put_in_xreg(ctx, arg0);
            let v16 = constructor_rv_sextw(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2167.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srai(ctx, v10, v8);
        // Rule at src/isa/riscv64/inst.isle line 2151.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src/isa/riscv64/inst.isle line 2148"
    )
}

// Generated as internal constructor for term val_already_extended.
pub fn constructor_val_already_extended<C: Context>(
    ctx: &mut C,
    arg0: &ExtendOp,
    arg1: Value,
) -> Option<bool> {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        match v6 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                match v24 {
                    &Opcode::Iadd => {
                        if let &ExtendOp::Signed = arg0 {
                            let v21 = C::first_result(ctx, v5);
                            if let Some(v22) = v21 {
                                let v23 = C::value_type(ctx, v22);
                                if v23 == I32 {
                                    // Rule at src/isa/riscv64/inst.isle line 2201.
                                    return Some(true);
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        if let &ExtendOp::Signed = arg0 {
                            let v21 = C::first_result(ctx, v5);
                            if let Some(v22) = v21 {
                                let v23 = C::value_type(ctx, v22);
                                if v23 == I32 {
                                    // Rule at src/isa/riscv64/inst.isle line 2202.
                                    return Some(true);
                                }
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        if let &ExtendOp::Signed = arg0 {
                            let v21 = C::first_result(ctx, v5);
                            if let Some(v22) = v21 {
                                let v23 = C::value_type(ctx, v22);
                                if v23 == I32 {
                                    // Rule at src/isa/riscv64/inst.isle line 2198.
                                    return Some(true);
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v21 = C::first_result(ctx, v5);
                            if let Some(v22) = v21 {
                                let v23 = C::value_type(ctx, v22);
                                if v23 == I32 {
                                    // Rule at src/isa/riscv64/inst.isle line 2199.
                                    return Some(true);
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v21 = C::first_result(ctx, v5);
                            if let Some(v22) = v21 {
                                let v23 = C::value_type(ctx, v22);
                                if v23 == I32 {
                                    // Rule at src/isa/riscv64/inst.isle line 2200.
                                    return Some(true);
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref v15,
                args: ref v16,
                cond: ref v17,
            } => {
                if let &Opcode::Fcmp = v15 {
                    // Rule at src/isa/riscv64/inst.isle line 2191.
                    return Some(true);
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v9,
                args: ref v10,
                cond: ref v11,
            } => {
                if let &Opcode::Icmp = v9 {
                    // Rule at src/isa/riscv64/inst.isle line 2190.
                    return Some(true);
                }
            }
            &InstructionData::Unary {
                opcode: ref v7,
                arg: v8,
            } => {
                match v7 {
                    &Opcode::Uextend => {
                        if let &ExtendOp::Zero = arg0 {
                            // Rule at src/isa/riscv64/inst.isle line 2185.
                            return Some(true);
                        }
                    }
                    &Opcode::Sextend => {
                        if let &ExtendOp::Signed = arg0 {
                            // Rule at src/isa/riscv64/inst.isle line 2186.
                            return Some(true);
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        // Rule at src/isa/riscv64/inst.isle line 2181.
        return Some(true);
    }
    None
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src/isa/riscv64/inst.isle line 2211.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2220.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src/isa/riscv64/inst.isle line 2225.
    return v8;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src/isa/riscv64/inst.isle line 2249.
            return v21;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src/isa/riscv64/inst.isle line 2244.
                    return v17;
                }
                false => {
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src/isa/riscv64/inst.isle line 2238.
                    return v12;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src/isa/riscv64/inst.isle line 2237"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: XReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v7 = C::xreg_to_reg(ctx, arg0);
    let v9 = MInst::Popcnt {
        sum: v4,
        step: v5,
        tmp: v6,
        rs: v7,
        ty: I64,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2255.
    return v11;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32, arg2: Type) -> AMode {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v22 = C::def_inst(ctx, v9.0);
                if let Some(v23) = v22 {
                    let v24 = &C::inst_data(ctx, v23);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v25,
                        imm: v26,
                    } = v24
                    {
                        if let &Opcode::Iconst = v25 {
                            let v27 = C::simm32(ctx, v26);
                            if let Some(v28) = v27 {
                                let v29 = C::s32_add_fallible(ctx, v28, arg1);
                                if let Some(v30) = v29 {
                                    let v31 = constructor_amode_inner(ctx, v9.1, v30, arg2);
                                    // Rule at src/isa/riscv64/inst.isle line 2297.
                                    return v31;
                                }
                            }
                        }
                    }
                }
                let v12 = C::def_inst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = &C::inst_data(ctx, v13);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v15,
                        imm: v16,
                    } = v14
                    {
                        if let &Opcode::Iconst = v15 {
                            let v17 = C::simm32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::s32_add_fallible(ctx, v18, arg1);
                                if let Some(v20) = v19 {
                                    let v21 = constructor_amode_inner(ctx, v9.0, v20, arg2);
                                    // Rule at src/isa/riscv64/inst.isle line 2294.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v3 = constructor_amode_inner(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2287.
    return v3;
}

// Generated as internal constructor for term amode_inner.
pub fn constructor_amode_inner<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: i32,
    arg2: Type,
) -> AMode {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        match v11 {
            &InstructionData::NullAry { opcode: ref v12 } => {
                match v12 {
                    &Opcode::GetFramePointer => {
                        let v7 = C::i32_as_i64(ctx, arg1);
                        let v13 = C::gen_fp_offset_amode(ctx, v7, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2310.
                        return v13;
                    }
                    &Opcode::GetStackPointer => {
                        let v7 = C::i32_as_i64(ctx, arg1);
                        let v14 = C::gen_sp_offset_amode(ctx, v7, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2314.
                        return v14;
                    }
                    _ => {}
                }
            }
            &InstructionData::StackLoad {
                opcode: ref v15,
                stack_slot: v16,
                offset: v17,
            } => {
                if let &Opcode::StackAddr = v15 {
                    let v18 = C::offset32_to_i32(ctx, v17);
                    let v19 = C::s32_add_fallible(ctx, v18, arg1);
                    if let Some(v20) = v19 {
                        let v21 = C::i32_as_i64(ctx, v20);
                        let v22 = C::gen_stack_slot_amode(ctx, v16, v21, arg2);
                        // Rule at src/isa/riscv64/inst.isle line 2318.
                        return v22;
                    }
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::ty_addr64(ctx, v1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = C::i32_as_i64(ctx, arg1);
        let v8 = C::gen_reg_offset_amode(ctx, v6, v7, arg2);
        // Rule at src/isa/riscv64/inst.isle line 2306.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_inner", "src/isa/riscv64/inst.isle line 2303"
    )
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(ctx: &mut C, arg0: &LoadOP) -> Type {
    match arg0 {
        &LoadOP::Flw => {
            // Rule at src/isa/riscv64/inst.isle line 2328.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src/isa/riscv64/inst.isle line 2327.
            return F64;
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2329.
    return I64;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &LoadOP,
    arg2: MemFlags,
) -> Reg {
    let v3 = constructor_load_op_reg_type(ctx, arg1);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg1.clone(),
        flags: arg2,
        from: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2333.
    return v7;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &StoreOP,
    arg2: MemFlags,
    arg3: Reg,
) -> InstOutput {
    let v4 = MInst::Store {
        to: arg0,
        op: arg1.clone(),
        flags: arg2,
        src: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2340.
    return v6;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 2353.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2362.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2369.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2377.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2385.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2393.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2401.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2410.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2418.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2426.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 2365.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 2373.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 2381.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 2389.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 2397.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 2406.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 2414.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 2422.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 2430.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 2360"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 2439.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 2448.
    return v5;
}

// Generated as internal constructor for term gen_select_xreg.
pub fn constructor_gen_select_xreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    let v7 = &C::intcc_without_eq(ctx, &v1.0);
    match v7 {
        &IntCC::SignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v12 = constructor_rv_max(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2473.
                        return v12;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v10 = constructor_rv_min(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2463.
                        return v10;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v11 = constructor_rv_maxu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2468.
                        return v11;
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v9 = constructor_rv_minu(ctx, v1.1, v1.2);
                        // Rule at src/isa/riscv64/inst.isle line 2458.
                        return v9;
                    }
                }
            }
        }
        _ => {}
    }
    let v13 = constructor_temp_writable_xreg(ctx);
    let v14 = C::writable_xreg_to_writable_reg(ctx, v13);
    let v15 = C::writable_value_reg(ctx, v14);
    let v16 = C::xreg_to_reg(ctx, arg1);
    let v17 = C::value_reg(ctx, v16);
    let v18 = C::xreg_to_reg(ctx, arg2);
    let v19 = C::value_reg(ctx, v18);
    let v20 = MInst::Select {
        dst: v15,
        condition: arg0,
        x: v17,
        y: v19,
    };
    let v21 = C::emit(ctx, &v20);
    let v22 = C::writable_reg_to_reg(ctx, v14);
    let v23 = C::xreg_new(ctx, v22);
    // Rule at src/isa/riscv64/inst.isle line 2478.
    return v23;
}

// Generated as internal constructor for term gen_select_vreg.
pub fn constructor_gen_select_vreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: VReg,
    arg2: VReg,
) -> VReg {
    let v3 = constructor_temp_writable_vreg(ctx);
    let v4 = C::writable_vreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::vreg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2486.
    return v13;
}

// Generated as internal constructor for term gen_select_freg.
pub fn constructor_gen_select_freg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v3 = constructor_temp_writable_freg(ctx);
    let v4 = C::writable_freg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::freg_new(ctx, v12);
    // Rule at src/isa/riscv64/inst.isle line 2492.
    return v13;
}

// Generated as internal constructor for term gen_select_regs.
pub fn constructor_gen_select_regs<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_value_regs(ctx, v4, v6);
    let v8 = MInst::Select {
        dst: v7,
        condition: arg0,
        x: arg1,
        y: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/riscv64/inst.isle line 2498.
    return v12;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 2507.
    return v3;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_external_name(ctx, arg0);
    let v4 = MInst::ElfTlsGetAddr { rd: v2, name: v3 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2522.
    return v6;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src/isa/riscv64/inst.isle line 2533.
    return v11;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src/isa/riscv64/inst.isle line 2542.
    return v20;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: CondBrTarget,
    arg2: CondBrTarget,
) -> SideEffectNoResult {
    let v3 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/riscv64/inst.isle line 2556.
    return v4;
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jal { label: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/riscv64/inst.isle line 2562.
    return v2;
}

// Generated as internal constructor for term cmp_eqz.
pub fn constructor_cmp_eqz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2578.
    return v3;
}

// Generated as internal constructor for term cmp_nez.
pub fn constructor_cmp_nez<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2581.
    return v3;
}

// Generated as internal constructor for term cmp_eq.
pub fn constructor_cmp_eq<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2584.
    return v3;
}

// Generated as internal constructor for term cmp_ne.
pub fn constructor_cmp_ne<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2587.
    return v3;
}

// Generated as internal constructor for term cmp_lt.
pub fn constructor_cmp_lt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2590.
    return v3;
}

// Generated as internal constructor for term cmp_ltz.
pub fn constructor_cmp_ltz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2593.
    return v3;
}

// Generated as internal constructor for term cmp_gt.
pub fn constructor_cmp_gt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2596.
    return v3;
}

// Generated as internal constructor for term cmp_ge.
pub fn constructor_cmp_ge<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2599.
    return v3;
}

// Generated as internal constructor for term cmp_le.
pub fn constructor_cmp_le<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2602.
    return v3;
}

// Generated as internal constructor for term cmp_gtu.
pub fn constructor_cmp_gtu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2605.
    return v3;
}

// Generated as internal constructor for term cmp_geu.
pub fn constructor_cmp_geu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2608.
    return v3;
}

// Generated as internal constructor for term cmp_ltu.
pub fn constructor_cmp_ltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThan, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2611.
    return v3;
}

// Generated as internal constructor for term cmp_leu.
pub fn constructor_cmp_leu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThanOrEqual, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2614.
    return v3;
}

// Generated as internal constructor for term is_nonzero_cmp.
pub fn constructor_is_nonzero_cmp<C: Context>(ctx: &mut C, arg0: Value) -> IntegerCompare {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v33,
                    args: ref v34,
                    cond: ref v35,
                } => {
                    if let &Opcode::Fcmp = v33 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let v40 = constructor_put_in_freg(ctx, v36.0);
                        let v41 = constructor_put_in_freg(ctx, v36.1);
                        let v39 = C::value_type(ctx, v36.0);
                        let v42 = &constructor_fcmp_to_float_compare(ctx, v35, v39, v40, v41);
                        let v43 = constructor_float_to_int_compare(ctx, v42);
                        // Rule at src/isa/riscv64/inst.isle line 2645.
                        return v43;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v26 = C::unpack_value_array_2(ctx, v24);
                        let v29 = C::value_type(ctx, v26.1);
                        let v30 = C::fits_in_64(ctx, v29);
                        if let Some(v31) = v30 {
                            let v32 = constructor_icmp_to_int_compare(ctx, v25, v26.0, v26.1);
                            // Rule at src/isa/riscv64/inst.isle line 2643.
                            return v32;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v6 = constructor_zext(ctx, arg0);
            let v7 = constructor_cmp_nez(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 2635.
            return v7;
        }
        I128 => {
            let v8 = C::put_in_regs(ctx, arg0);
            let v10 = C::value_regs_get(ctx, v8, 0x0);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::put_in_regs(ctx, arg0);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::xreg_new(ctx, v14);
            let v16 = constructor_rv_or(ctx, v11, v15);
            let v17 = constructor_cmp_nez(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2637.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_cmp_nez(ctx, v4);
        // Rule at src/isa/riscv64/inst.isle line 2633.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_nonzero_cmp", "src/isa/riscv64/inst.isle line 2622"
    )
}

// Generated as internal constructor for term icmp_to_int_compare.
pub fn constructor_icmp_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IntegerCompare {
    let v3 = C::value_type(ctx, arg2);
    if v3 == I128 {
        let v9 = C::put_in_regs(ctx, arg1);
        let v10 = C::put_in_regs(ctx, arg2);
        let v11 = constructor_lower_icmp_i128(ctx, arg0, v9, v10);
        let v12 = constructor_cmp_nez(ctx, v11);
        // Rule at src/isa/riscv64/inst.isle line 2659.
        return v12;
    }
    let v4 = C::fits_in_64(ctx, v3);
    if let Some(v5) = v4 {
        let v6 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg1);
        let v7 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg2);
        let v8 = C::int_compare(ctx, arg0, v6, v7);
        // Rule at src/isa/riscv64/inst.isle line 2657.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_to_int_compare", "src/isa/riscv64/inst.isle line 2656"
    )
}

// Generated as internal constructor for term put_value_in_reg_for_icmp.
pub fn constructor_put_value_in_reg_for_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
) -> XReg {
    let v9 = C::i64_from_iconst(ctx, arg1);
    if let Some(v10) = v9 {
        if v10 == 0x0 {
            let v11 = C::zero_reg(ctx);
            // Rule at src/isa/riscv64/inst.isle line 2689.
            return v11;
        }
    }
    match arg0 {
        &IntCC::Equal => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2683.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2679.
                return v5;
            }
        }
        &IntCC::NotEqual => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2685.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2681.
                return v5;
            }
        }
        _ => {}
    }
    let v3 = &C::signed_cond_code(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = constructor_sext(ctx, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2672.
        return v5;
    }
    let v2 = constructor_zext(ctx, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2670.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v24,
            arg: v25,
            table: v26,
        } => {
            if let &Opcode::BrTable = v24 {
                let v27 = C::put_in_reg(ctx, v25);
                let v28 = C::lower_br_table(ctx, v27, arg1);
                // Rule at src/isa/riscv64/inst.isle line 2703.
                return Some(v28);
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v15 = C::two_targets(ctx, arg1);
                if let Some(v16) = v15 {
                    let v19 = constructor_is_nonzero_cmp(ctx, v10);
                    let v20 = C::label_to_br_target(ctx, v16.0);
                    let v21 = C::label_to_br_target(ctx, v16.1);
                    let v22 = &constructor_cond_br(ctx, v19, v20, v21);
                    let v23 = constructor_emit_side_effect(ctx, v22);
                    // Rule at src/isa/riscv64/inst.isle line 2697.
                    return Some(v23);
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_rv_j(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/riscv64/inst.isle line 2694.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v8 = C::xreg_new(ctx, arg0);
                let v9 = constructor_rv_fmvwx(ctx, v8);
                let v10 = C::freg_to_reg(ctx, v9);
                // Rule at src/isa/riscv64/inst.isle line 2715.
                return v10;
            }
        }
        I64 => {
            if arg2 == F64 {
                let v8 = C::xreg_new(ctx, arg0);
                let v11 = constructor_rv_fmvdx(ctx, v8);
                let v12 = C::freg_to_reg(ctx, v11);
                // Rule at src/isa/riscv64/inst.isle line 2716.
                return v12;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v3 = C::freg_new(ctx, arg0);
                let v4 = constructor_rv_fmvxw(ctx, v3);
                let v5 = C::xreg_to_reg(ctx, v4);
                // Rule at src/isa/riscv64/inst.isle line 2713.
                return v5;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v3 = C::freg_new(ctx, arg0);
                let v6 = constructor_rv_fmvxd(ctx, v3);
                let v7 = C::xreg_to_reg(ctx, v6);
                // Rule at src/isa/riscv64/inst.isle line 2714.
                return v7;
            }
        }
        _ => {}
    }
    // Rule at src/isa/riscv64/inst.isle line 2717.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2720.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2721.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src/isa/riscv64/inst.isle line 2719"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 2724.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2725.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src/isa/riscv64/inst.isle line 2723"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 2728.
            return I32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 2729.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src/isa/riscv64/inst.isle line 2727"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2733.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2738.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2732"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2755.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2751.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2750"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIf {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src/isa/riscv64/inst.isle line 2761.
    return v8;
}

// Generated as internal constructor for term gen_trapnz.
pub fn constructor_gen_trapnz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::NotEqual, arg0, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2766.
    return v4;
}

// Generated as internal constructor for term gen_trapz.
pub fn constructor_gen_trapz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2771.
    return v4;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2785.
    return v4;
}

// Generated as internal constructor for term gen_bmask.
pub fn constructor_gen_bmask<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v31,
                    args: ref v32,
                    cond: ref v33,
                } => {
                    if let &Opcode::Fcmp = v31 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 2809.
                        return v30;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src/isa/riscv64/inst.isle line 2808.
                        return v30;
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    if v1 == I128 {
        let v7 = C::put_in_regs(ctx, arg0);
        let v9 = C::value_regs_get(ctx, v7, 0x0);
        let v10 = C::xreg_new(ctx, v9);
        let v11 = C::put_in_regs(ctx, arg0);
        let v13 = C::value_regs_get(ctx, v11, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v10, v14);
        let v16 = constructor_rv_snez(ctx, v15);
        let v17 = constructor_rv_neg(ctx, v16);
        // Rule at src/isa/riscv64/inst.isle line 2800.
        return v17;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_rv_snez(ctx, v4);
        let v6 = constructor_rv_neg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2797.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bmask", "src/isa/riscv64/inst.isle line 2793"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(ctx: &mut C, arg0: Value, arg1: Type) -> ValueRegs {
    if arg1 == I128 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v7 = C::value_regs(ctx, v5, v5);
        // Rule at src/isa/riscv64/inst.isle line 2814.
        return v7;
    }
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v6 = C::value_reg(ctx, v5);
        // Rule at src/isa/riscv64/inst.isle line 2812.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2811"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src/isa/riscv64/inst.isle line 2823.
    return v5;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0);
    let v3 = constructor_imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 2840.
    return v4;
}

// Generated as internal constructor for term float_compare_invert.
pub fn constructor_float_compare_invert<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> FloatCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = FloatCompare::Zero { r: v1 };
            // Rule at src/isa/riscv64/inst.isle line 2857.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = FloatCompare::One { r: v3 };
            // Rule at src/isa/riscv64/inst.isle line 2858.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_compare_invert", "src/isa/riscv64/inst.isle line 2856"
    )
}

// Generated as internal constructor for term float_to_int_compare.
pub fn constructor_float_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> IntegerCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = constructor_cmp_nez(ctx, v1);
            // Rule at src/isa/riscv64/inst.isle line 2861.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = constructor_cmp_eqz(ctx, v3);
            // Rule at src/isa/riscv64/inst.isle line 2862.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_to_int_compare", "src/isa/riscv64/inst.isle line 2860"
    )
}

// Generated as internal constructor for term fcmp_to_float_compare.
pub fn constructor_fcmp_to_float_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> FloatCompare {
    match arg0 {
        &FloatCC::Equal => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v13 = FloatCompare::One { r: v12 };
            // Rule at src/isa/riscv64/inst.isle line 2883.
            return v13;
        }
        &FloatCC::GreaterThan => {
            let v22 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v23 = FloatCompare::One { r: v22 };
            // Rule at src/isa/riscv64/inst.isle line 2904.
            return v23;
        }
        &FloatCC::GreaterThanOrEqual => {
            let v24 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v25 = FloatCompare::One { r: v24 };
            // Rule at src/isa/riscv64/inst.isle line 2908.
            return v25;
        }
        &FloatCC::LessThan => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v19 = FloatCompare::One { r: v15 };
            // Rule at src/isa/riscv64/inst.isle line 2896.
            return v19;
        }
        &FloatCC::LessThanOrEqual => {
            let v20 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v21 = FloatCompare::One { r: v20 };
            // Rule at src/isa/riscv64/inst.isle line 2900.
            return v21;
        }
        &FloatCC::NotEqual => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v14 = FloatCompare::Zero { r: v12 };
            // Rule at src/isa/riscv64/inst.isle line 2888.
            return v14;
        }
        &FloatCC::Ordered => {
            let v8 = constructor_is_not_nan(ctx, arg1, arg2);
            let v9 = constructor_is_not_nan(ctx, arg1, arg3);
            let v10 = constructor_rv_and(ctx, v8, v9);
            let v11 = FloatCompare::One { r: v10 };
            // Rule at src/isa/riscv64/inst.isle line 2876.
            return v11;
        }
        &FloatCC::OrderedNotEqual => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v17 = constructor_rv_or(ctx, v15, v16);
            let v18 = FloatCompare::One { r: v17 };
            // Rule at src/isa/riscv64/inst.isle line 2892.
            return v18;
        }
        _ => {}
    }
    let v4 = C::floatcc_unordered(ctx, arg0);
    if v4 == true {
        let v5 = &C::floatcc_complement(ctx, arg0);
        let v6 = &constructor_fcmp_to_float_compare(ctx, v5, arg1, arg2, arg3);
        let v7 = &constructor_float_compare_invert(ctx, v6);
        // Rule at src/isa/riscv64/inst.isle line 2871.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_to_float_compare", "src/isa/riscv64/inst.isle line 2866"
    )
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2880.
    return v2;
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src/isa/riscv64/inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src/isa/riscv64/inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 330.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 333.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 336.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 342.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 339.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 345.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src/isa/riscv64/inst_vector.isle line 329"
    )
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 368.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 376.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src/isa/riscv64/inst_vector.isle line 384.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 389.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 396.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 404.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 410.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 417.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 424.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 431.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 437.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 442.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 447.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 452.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 457.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 462.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 467.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 472.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 477.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 484.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 491.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 498.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 505.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 512.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 519.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 526.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 533.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 538.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 543.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 548.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 555.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 562.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 569.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 576.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 583.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 590.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 597.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 604.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 609.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 614.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 619.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 624.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, v5);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v6, arg1, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 629.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 634.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 639.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 644.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 649.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 654.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 659.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 664.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 672.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 680.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 688.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 696.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 704.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 712.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 717.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 722.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 727.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 732.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 737.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 742.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 747.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 752.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 757.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 762.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 767.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 772.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 777.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 782.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 787.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 792.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 797.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 802.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 811.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 817.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src/isa/riscv64/inst_vector.isle line 816"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 823.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 828.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 833.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 838.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 843.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 848.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 853.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 858.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 863.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 868.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 873.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 878.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 883.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 888.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 893.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 901.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 909.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 917.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 925.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 933.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 941.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 949.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src/isa/riscv64/inst_vector.isle line 957.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 962.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 967.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 972.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 977.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 982.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 988.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 993.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 999.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1005.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1011.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst_vector.isle line 1017.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1022.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1028.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1034.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1042.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1050.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1056.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1062.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1068.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1074.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1081.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1087.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src/isa/riscv64/inst_vector.isle line 1095.
    return v6;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1102.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1109.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1116.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1123.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1130.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1144.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1154.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1163.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1172.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1181.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1189.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1196.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1203.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1210.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1215.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1226.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1231.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1236.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1241.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1246.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1251.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1256.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1261.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1266.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1271.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1276.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1281.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1286.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1291.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1296.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1301.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1306.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1312.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1316.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1321.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1327.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1331.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1336.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1342.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1347.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1351.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1356.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1361.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1366.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1371.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1376.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1381.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1386.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1392.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1396.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src/isa/riscv64/inst_vector.isle line 1402.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1406.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1412.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1418.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1424.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1430.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1436.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1442.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1449.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src/isa/riscv64/inst_vector.isle line 1456.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1463.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1470.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1477.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src/isa/riscv64/inst_vector.isle line 1485.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src/isa/riscv64/inst_vector.isle line 1491.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src/isa/riscv64/inst_vector.isle line 1499.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src/isa/riscv64/inst_vector.isle line 1504.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src/isa/riscv64/inst_vector.isle line 1511.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src/isa/riscv64/inst_vector.isle line 1515.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src/isa/riscv64/inst_vector.isle line 1496"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src/isa/riscv64/inst_vector.isle line 1525.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src/isa/riscv64/inst_vector.isle line 1530.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src/isa/riscv64/inst_vector.isle line 1541.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src/isa/riscv64/inst_vector.isle line 1554.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src/isa/riscv64/inst_vector.isle line 1559.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src/isa/riscv64/inst_vector.isle line 1551"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0x0);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -0x1);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src/isa/riscv64/inst_vector.isle line 1567.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src/isa/riscv64/inst_vector.isle line 1566"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v31 = constructor_rv_vmseq_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1592.
                    return v31;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v28 = constructor_rv_vmseq_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1588.
                    return v28;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1585.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1582.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1579.
                return v10;
            }
            &IntCC::NotEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v36 = constructor_rv_vmsne_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1611.
                    return v36;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v35 = constructor_rv_vmsne_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1607.
                    return v35;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1604.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1601.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1598.
                return v32;
            }
            &IntCC::SignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v58 = constructor_rv_vmsgt_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1695.
                    return v58;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1692.
                            return v57;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1689.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1686.
                return v55;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v64 = constructor_rv_vmsle_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1719.
                    return v64;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v63 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1716.
                            return v63;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v62 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1713.
                return v62;
            }
            &IntCC::SignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v44 = constructor_rv_vmsgt_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1641.
                    return v44;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1638.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1635.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1632.
                return v41;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v50 = constructor_rv_vmsle_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1665.
                    return v50;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v49 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1662.
                            return v49;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1659.
                return v48;
            }
            &IntCC::UnsignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v54 = constructor_rv_vmsgtu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1680.
                    return v54;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1677.
                            return v53;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v52 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1674.
                            return v52;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v51 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1671.
                return v51;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v61 = constructor_rv_vmsleu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1707.
                    return v61;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1704.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1701.
                return v59;
            }
            &IntCC::UnsignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v40 = constructor_rv_vmsgtu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1626.
                    return v40;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1623.
                            return v39;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1620.
                            return v38;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v37 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1617.
                return v37;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v47 = constructor_rv_vmsleu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src/isa/riscv64/inst_vector.isle line 1653.
                    return v47;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1650.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1647.
                return v45;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src/isa/riscv64/inst_vector.isle line 1575"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1736.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1733.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1730.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1781.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1778.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1775.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1792.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1789.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1786.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1759.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1756.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1753.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1770.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1767.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1764.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1748.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src/isa/riscv64/inst_vector.isle line 1745.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1742.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1797.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1813.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1805.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1821.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1829.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1834.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1839.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src/isa/riscv64/inst_vector.isle line 1844.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src/isa/riscv64/inst_vector.isle line 1726"
    )
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src/isa/riscv64/inst_vector.isle line 1852.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src/isa/riscv64/inst_vector.isle line 1856.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1867.
            return 0x4B000000;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst_vector.isle line 1868.
            return 0x4330000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_max", "src/isa/riscv64/inst_vector.isle line 1866"
    )
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v18 = constructor_float_int_of_same_size(ctx, v5);
        let v17 = C::xreg_to_reg(ctx, v16);
        let v19 = constructor_gen_bitcast(ctx, v17, v18, v5);
        let v20 = C::freg_new(ctx, v19);
        let v21 = constructor_rv_vfadd_vf(ctx, arg0, v20, v6, v7);
        let v22 = constructor_rv_vmerge_vvm(ctx, v21, v15, v12, v7);
        // Rule at src/isa/riscv64/inst_vector.isle line 1877.
        return v22;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_vec_round", "src/isa/riscv64/inst_vector.isle line 1871"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1417,
            args: ref v1418,
            flags: v1419,
        } => {
            if let &Opcode::AtomicCas = v1417 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1356 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1357) = v1356 {
                        let v1387 = C::temp_writable_reg(ctx, v1357);
                        let v1424 = C::temp_writable_reg(ctx, v1357);
                        let v1420 = C::unpack_value_array_3(ctx, v1418);
                        let v1425 = constructor_put_in_xreg(ctx, v1420.0);
                        let v1426 = constructor_gen_atomic_offset(ctx, v1425, v1357);
                        let v1428 = constructor_zext(ctx, v1420.1);
                        let v1430 = constructor_put_in_xreg(ctx, v1420.0);
                        let v1431 = constructor_gen_atomic_p(ctx, v1430, v1357);
                        let v1433 = C::put_in_reg(ctx, v1420.2);
                        let v1427 = C::xreg_to_reg(ctx, v1426);
                        let v1429 = C::xreg_to_reg(ctx, v1428);
                        let v1432 = C::xreg_to_reg(ctx, v1431);
                        let v1434 = MInst::AtomicCas {
                            offset: v1427,
                            t0: v1387,
                            dst: v1424,
                            e: v1429,
                            addr: v1432,
                            v: v1433,
                            ty: v1357,
                        };
                        let v1435 = C::emit(ctx, &v1434);
                        let v1436 = C::writable_reg_to_reg(ctx, v1424);
                        let v1437 = constructor_output_reg(ctx, v1436);
                        // Rule at src/isa/riscv64/lower.isle line 1635.
                        return Some(v1437);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1358,
            args: ref v1359,
            flags: v1360,
            op: ref v1361,
        } => {
            if let &Opcode::AtomicRmw = v1358 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1356 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1357) = v1356 {
                        let v1371 = C::fits_in_16(ctx, v1357);
                        if let Some(v1372) = v1371 {
                            let v1377 = C::is_atomic_rmw_max_etc(ctx, v1361);
                            if let Some(v1378) = v1377 {
                                match v1378.1 {
                                    true => {
                                        let v1362 = C::unpack_value_array_2(ctx, v1359);
                                        let v1373 = constructor_put_in_xreg(ctx, v1362.0);
                                        let v1381 = constructor_sext(ctx, v1362.1);
                                        let v1382 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1378.0, v1372, v1373, v1381,
                                        );
                                        let v1383 = constructor_output_xreg(ctx, v1382);
                                        // Rule at src/isa/riscv64/lower.isle line 1567.
                                        return Some(v1383);
                                    }
                                    false => {
                                        let v1362 = C::unpack_value_array_2(ctx, v1359);
                                        let v1373 = constructor_put_in_xreg(ctx, v1362.0);
                                        let v1384 = constructor_zext(ctx, v1362.1);
                                        let v1385 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1378.0, v1372, v1373, v1384,
                                        );
                                        let v1386 = constructor_output_xreg(ctx, v1385);
                                        // Rule at src/isa/riscv64/lower.isle line 1573.
                                        return Some(v1386);
                                    }
                                    _ => {}
                                }
                            }
                            let v1362 = C::unpack_value_array_2(ctx, v1359);
                            let v1373 = constructor_put_in_xreg(ctx, v1362.0);
                            let v1374 = constructor_put_in_xreg(ctx, v1362.1);
                            let v1375 =
                                constructor_gen_atomic_rmw_loop(ctx, v1361, v1372, v1373, v1374);
                            let v1376 = constructor_output_xreg(ctx, v1375);
                            // Rule at src/isa/riscv64/lower.isle line 1560.
                            return Some(v1376);
                        }
                        match v1361 {
                            &AtomicRmwOp::Nand => {
                                let v1362 = C::unpack_value_array_2(ctx, v1359);
                                let v1373 = constructor_put_in_xreg(ctx, v1362.0);
                                let v1374 = constructor_put_in_xreg(ctx, v1362.1);
                                let v1397 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v1357,
                                    v1373,
                                    v1374,
                                );
                                let v1398 = constructor_output_xreg(ctx, v1397);
                                // Rule at src/isa/riscv64/lower.isle line 1600.
                                return Some(v1398);
                            }
                            &AtomicRmwOp::Sub => {
                                let v1387 = C::temp_writable_reg(ctx, v1357);
                                let v1362 = C::unpack_value_array_2(ctx, v1359);
                                let v1374 = constructor_put_in_xreg(ctx, v1362.1);
                                let v1388 = constructor_rv_neg(ctx, v1374);
                                let v1391 =
                                    &constructor_get_atomic_rmw_op(ctx, v1357, &AtomicRmwOp::Add);
                                let v1392 = C::put_in_reg(ctx, v1362.0);
                                let v1393 = C::atomic_amo(ctx);
                                let v1389 = C::xreg_to_reg(ctx, v1388);
                                let v1394 = constructor_gen_atomic(ctx, v1391, v1392, v1389, v1393);
                                let v1395 = constructor_output_reg(ctx, v1394);
                                // Rule at src/isa/riscv64/lower.isle line 1582.
                                return Some(v1395);
                            }
                            _ => {}
                        }
                        let v1365 = &constructor_get_atomic_rmw_op(ctx, v1357, v1361);
                        let v1362 = C::unpack_value_array_2(ctx, v1359);
                        let v1366 = C::put_in_reg(ctx, v1362.0);
                        let v1367 = C::put_in_reg(ctx, v1362.1);
                        let v1368 = C::atomic_amo(ctx);
                        let v1369 = constructor_gen_atomic(ctx, v1365, v1366, v1367, v1368);
                        let v1370 = constructor_output_reg(ctx, v1369);
                        // Rule at src/isa/riscv64/lower.isle line 1553.
                        return Some(v1370);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v38,
            args: ref v39,
        } => {
            match v38 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v2134 = constructor_replicated_uimm5(ctx, v40.1);
                            if let Some(v2135) = v2134 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2136 =
                                    constructor_rv_vrgather_vi(ctx, v167, v2135, v169, v170);
                                let v2137 = constructor_output_vreg(ctx, v2136);
                                // Rule at src/isa/riscv64/lower.isle line 2676.
                                return Some(v2137);
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2132 =
                                            constructor_rv_vrgather_vx(ctx, v167, v173, v169, v170);
                                        let v2133 = constructor_output_vreg(ctx, v2132);
                                        // Rule at src/isa/riscv64/lower.isle line 2673.
                                        return Some(v2133);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2130 = constructor_rv_vrgather_vv(ctx, v167, v168, v169, v170);
                            let v2131 = constructor_output_vreg(ctx, v2130);
                            // Rule at src/isa/riscv64/lower.isle line 2670.
                            return Some(v2131);
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1645 =
                                            constructor_rv_vmin_vx(ctx, v197, v198, v169, v170);
                                        let v1646 = constructor_output_vreg(ctx, v1645);
                                        // Rule at src/isa/riscv64/lower.isle line 1906.
                                        return Some(v1646);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1643 =
                                            constructor_rv_vmin_vx(ctx, v167, v173, v169, v170);
                                        let v1644 = constructor_output_vreg(ctx, v1643);
                                        // Rule at src/isa/riscv64/lower.isle line 1903.
                                        return Some(v1644);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1641 = constructor_rv_vmin_vv(ctx, v167, v168, v169, v170);
                            let v1642 = constructor_output_vreg(ctx, v1641);
                            // Rule at src/isa/riscv64/lower.isle line 1900.
                            return Some(v1642);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1638 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedLessThan,
                                v40.0,
                                v40.1,
                            );
                            let v1624 = C::put_in_regs(ctx, v40.0);
                            let v1625 = C::put_in_regs(ctx, v40.1);
                            let v1639 = constructor_gen_select_regs(ctx, v1638, v1624, v1625);
                            let v1640 = C::output(ctx, v1639);
                            // Rule at src/isa/riscv64/lower.isle line 1897.
                            return Some(v1640);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v487 = constructor_sext(ctx, v40.0);
                            let v488 = constructor_sext(ctx, v40.1);
                            let v1634 = constructor_cmp_lt(ctx, v487, v488);
                            let v1635 = constructor_gen_select_xreg(ctx, v1634, v487, v488);
                            let v1636 = constructor_output_xreg(ctx, v1635);
                            // Rule at src/isa/riscv64/lower.isle line 1892.
                            return Some(v1636);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1670 =
                                            constructor_rv_vminu_vx(ctx, v197, v198, v169, v170);
                                        let v1671 = constructor_output_vreg(ctx, v1670);
                                        // Rule at src/isa/riscv64/lower.isle line 1944.
                                        return Some(v1671);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1668 =
                                            constructor_rv_vminu_vx(ctx, v167, v173, v169, v170);
                                        let v1669 = constructor_output_vreg(ctx, v1668);
                                        // Rule at src/isa/riscv64/lower.isle line 1941.
                                        return Some(v1669);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1666 = constructor_rv_vminu_vv(ctx, v167, v168, v169, v170);
                            let v1667 = constructor_output_vreg(ctx, v1666);
                            // Rule at src/isa/riscv64/lower.isle line 1938.
                            return Some(v1667);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1663 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedLessThan,
                                v40.0,
                                v40.1,
                            );
                            let v1624 = C::put_in_regs(ctx, v40.0);
                            let v1625 = C::put_in_regs(ctx, v40.1);
                            let v1664 = constructor_gen_select_regs(ctx, v1663, v1624, v1625);
                            let v1665 = C::output(ctx, v1664);
                            // Rule at src/isa/riscv64/lower.isle line 1935.
                            return Some(v1665);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v497 = constructor_zext(ctx, v40.0);
                            let v498 = constructor_zext(ctx, v40.1);
                            let v1660 = constructor_cmp_ltu(ctx, v497, v498);
                            let v1661 = constructor_gen_select_xreg(ctx, v1660, v497, v498);
                            let v1662 = constructor_output_xreg(ctx, v1661);
                            // Rule at src/isa/riscv64/lower.isle line 1930.
                            return Some(v1662);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1632 =
                                            constructor_rv_vmax_vx(ctx, v197, v198, v169, v170);
                                        let v1633 = constructor_output_vreg(ctx, v1632);
                                        // Rule at src/isa/riscv64/lower.isle line 1887.
                                        return Some(v1633);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1630 =
                                            constructor_rv_vmax_vx(ctx, v167, v173, v169, v170);
                                        let v1631 = constructor_output_vreg(ctx, v1630);
                                        // Rule at src/isa/riscv64/lower.isle line 1884.
                                        return Some(v1631);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1628 = constructor_rv_vmax_vv(ctx, v167, v168, v169, v170);
                            let v1629 = constructor_output_vreg(ctx, v1628);
                            // Rule at src/isa/riscv64/lower.isle line 1881.
                            return Some(v1629);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1623 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedGreaterThan,
                                v40.0,
                                v40.1,
                            );
                            let v1624 = C::put_in_regs(ctx, v40.0);
                            let v1625 = C::put_in_regs(ctx, v40.1);
                            let v1626 = constructor_gen_select_regs(ctx, v1623, v1624, v1625);
                            let v1627 = C::output(ctx, v1626);
                            // Rule at src/isa/riscv64/lower.isle line 1878.
                            return Some(v1627);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v487 = constructor_sext(ctx, v40.0);
                            let v488 = constructor_sext(ctx, v40.1);
                            let v1619 = constructor_cmp_gt(ctx, v487, v488);
                            let v1620 = constructor_gen_select_xreg(ctx, v1619, v487, v488);
                            let v1621 = constructor_output_xreg(ctx, v1620);
                            // Rule at src/isa/riscv64/lower.isle line 1873.
                            return Some(v1621);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1658 =
                                            constructor_rv_vmaxu_vx(ctx, v197, v198, v169, v170);
                                        let v1659 = constructor_output_vreg(ctx, v1658);
                                        // Rule at src/isa/riscv64/lower.isle line 1925.
                                        return Some(v1659);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1656 =
                                            constructor_rv_vmaxu_vx(ctx, v167, v173, v169, v170);
                                        let v1657 = constructor_output_vreg(ctx, v1656);
                                        // Rule at src/isa/riscv64/lower.isle line 1922.
                                        return Some(v1657);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1654 = constructor_rv_vmaxu_vv(ctx, v167, v168, v169, v170);
                            let v1655 = constructor_output_vreg(ctx, v1654);
                            // Rule at src/isa/riscv64/lower.isle line 1919.
                            return Some(v1655);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1651 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedGreaterThan,
                                v40.0,
                                v40.1,
                            );
                            let v1624 = C::put_in_regs(ctx, v40.0);
                            let v1625 = C::put_in_regs(ctx, v40.1);
                            let v1652 = constructor_gen_select_regs(ctx, v1651, v1624, v1625);
                            let v1653 = C::output(ctx, v1652);
                            // Rule at src/isa/riscv64/lower.isle line 1916.
                            return Some(v1653);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v497 = constructor_zext(ctx, v40.0);
                            let v498 = constructor_zext(ctx, v40.1);
                            let v1647 = constructor_cmp_gtu(ctx, v497, v498);
                            let v1648 = constructor_gen_select_xreg(ctx, v1647, v497, v498);
                            let v1649 = constructor_output_xreg(ctx, v1648);
                            // Rule at src/isa/riscv64/lower.isle line 1911.
                            return Some(v1649);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v977 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v978) = v977 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v168 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v642 = constructor_rv_vand_vv(ctx, v167, v168, v169, v170);
                                let v2225 = constructor_put_in_vreg(ctx, v40.0);
                                let v2226 = constructor_put_in_vreg(ctx, v40.1);
                                let v2227 = constructor_rv_vxor_vv(ctx, v2225, v2226, v169, v170);
                                let v2228 = constructor_rv_vssrl_vi(ctx, v2227, v978, v169, v170);
                                let v2229 = constructor_rv_vadd_vv(ctx, v642, v2228, v169, v170);
                                let v2230 = constructor_output_vreg(ctx, v2229);
                                // Rule at src/isa/riscv64/lower.isle line 2791.
                                return Some(v2230);
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2088 = constructor_rv_vsaddu_vi(ctx, v197, v214, v169, v170);
                                let v2089 = constructor_output_vreg(ctx, v2088);
                                // Rule at src/isa/riscv64/lower.isle line 2581.
                                return Some(v2089);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2086 = constructor_rv_vsaddu_vi(ctx, v167, v194, v169, v170);
                                let v2087 = constructor_output_vreg(ctx, v2086);
                                // Rule at src/isa/riscv64/lower.isle line 2577.
                                return Some(v2087);
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2084 =
                                            constructor_rv_vsaddu_vx(ctx, v197, v198, v169, v170);
                                        let v2085 = constructor_output_vreg(ctx, v2084);
                                        // Rule at src/isa/riscv64/lower.isle line 2574.
                                        return Some(v2085);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2082 =
                                            constructor_rv_vsaddu_vx(ctx, v167, v173, v169, v170);
                                        let v2083 = constructor_output_vreg(ctx, v2082);
                                        // Rule at src/isa/riscv64/lower.isle line 2571.
                                        return Some(v2083);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2080 = constructor_rv_vsaddu_vv(ctx, v167, v168, v169, v170);
                            let v2081 = constructor_output_vreg(ctx, v2080);
                            // Rule at src/isa/riscv64/lower.isle line 2568.
                            return Some(v2081);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2098 = constructor_rv_vsadd_vi(ctx, v197, v214, v169, v170);
                                let v2099 = constructor_output_vreg(ctx, v2098);
                                // Rule at src/isa/riscv64/lower.isle line 2600.
                                return Some(v2099);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2096 = constructor_rv_vsadd_vi(ctx, v167, v194, v169, v170);
                                let v2097 = constructor_output_vreg(ctx, v2096);
                                // Rule at src/isa/riscv64/lower.isle line 2596.
                                return Some(v2097);
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2094 =
                                            constructor_rv_vsadd_vx(ctx, v197, v198, v169, v170);
                                        let v2095 = constructor_output_vreg(ctx, v2094);
                                        // Rule at src/isa/riscv64/lower.isle line 2593.
                                        return Some(v2095);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2092 =
                                            constructor_rv_vsadd_vx(ctx, v167, v173, v169, v170);
                                        let v2093 = constructor_output_vreg(ctx, v2092);
                                        // Rule at src/isa/riscv64/lower.isle line 2590.
                                        return Some(v2093);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2090 = constructor_rv_vsadd_vv(ctx, v167, v168, v169, v170);
                            let v2091 = constructor_output_vreg(ctx, v2090);
                            // Rule at src/isa/riscv64/lower.isle line 2587.
                            return Some(v2091);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2102 =
                                            constructor_rv_vssubu_vx(ctx, v167, v173, v169, v170);
                                        let v2103 = constructor_output_vreg(ctx, v2102);
                                        // Rule at src/isa/riscv64/lower.isle line 2609.
                                        return Some(v2103);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2100 = constructor_rv_vssubu_vv(ctx, v167, v168, v169, v170);
                            let v2101 = constructor_output_vreg(ctx, v2100);
                            // Rule at src/isa/riscv64/lower.isle line 2606.
                            return Some(v2101);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2106 =
                                            constructor_rv_vssub_vx(ctx, v167, v173, v169, v170);
                                        let v2107 = constructor_output_vreg(ctx, v2106);
                                        // Rule at src/isa/riscv64/lower.isle line 2617.
                                        return Some(v2107);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2104 = constructor_rv_vssub_vv(ctx, v167, v168, v169, v170);
                            let v2105 = constructor_output_vreg(ctx, v2104);
                            // Rule at src/isa/riscv64/lower.isle line 2614.
                            return Some(v2105);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v215 = constructor_rv_vadd_vi(ctx, v197, v214, v169, v170);
                                let v216 = constructor_output_vreg(ctx, v215);
                                // Rule at src/isa/riscv64/lower.isle line 143.
                                return Some(v216);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v195 = constructor_rv_vadd_vi(ctx, v167, v194, v169, v170);
                                let v196 = constructor_output_vreg(ctx, v195);
                                // Rule at src/isa/riscv64/lower.isle line 125.
                                return Some(v196);
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                match v79 {
                                    &InstructionData::Binary {
                                        opcode: ref v103,
                                        args: ref v104,
                                    } => {
                                        if let &Opcode::Imul = v103 {
                                            let v105 = C::unpack_value_array_2(ctx, v104);
                                            let v131 = C::def_inst(ctx, v105.0);
                                            if let Some(v132) = v131 {
                                                let v133 = &C::inst_data(ctx, v132);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v134,
                                                    arg: v135,
                                                } = v133
                                                {
                                                    if let &Opcode::Splat = v134 {
                                                        let v197 =
                                                            constructor_put_in_vreg(ctx, v40.1);
                                                        let v318 =
                                                            constructor_put_in_vreg(ctx, v105.1);
                                                        let v319 =
                                                            constructor_put_in_xreg(ctx, v135);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v320 = constructor_rv_vmacc_vx(
                                                            ctx, v197, v318, v319, v169, v170,
                                                        );
                                                        let v321 =
                                                            constructor_output_vreg(ctx, v320);
                                                        // Rule at src/isa/riscv64/lower.isle line 278.
                                                        return Some(v321);
                                                    }
                                                }
                                            }
                                            let v310 = C::def_inst(ctx, v105.1);
                                            if let Some(v311) = v310 {
                                                let v312 = &C::inst_data(ctx, v311);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v313,
                                                    arg: v314,
                                                } = v312
                                                {
                                                    if let &Opcode::Splat = v313 {
                                                        let v197 =
                                                            constructor_put_in_vreg(ctx, v40.1);
                                                        let v306 =
                                                            constructor_put_in_vreg(ctx, v105.0);
                                                        let v315 =
                                                            constructor_put_in_xreg(ctx, v314);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v316 = constructor_rv_vmacc_vx(
                                                            ctx, v197, v306, v315, v169, v170,
                                                        );
                                                        let v317 =
                                                            constructor_output_vreg(ctx, v316);
                                                        // Rule at src/isa/riscv64/lower.isle line 275.
                                                        return Some(v317);
                                                    }
                                                }
                                            }
                                            let v197 = constructor_put_in_vreg(ctx, v40.1);
                                            let v306 = constructor_put_in_vreg(ctx, v105.0);
                                            let v307 = constructor_put_in_vreg(ctx, v105.1);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v308 = constructor_rv_vmacc_vv(
                                                ctx, v197, v306, v307, v169, v170,
                                            );
                                            let v309 = constructor_output_vreg(ctx, v308);
                                            // Rule at src/isa/riscv64/lower.isle line 272.
                                            return Some(v309);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } => {
                                        match v80 {
                                            &Opcode::Splat => {
                                                let v201 = C::def_inst(ctx, v81);
                                                if let Some(v202) = v201 {
                                                    let v203 = &C::inst_data(ctx, v202);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v204,
                                                        arg: v205,
                                                    } = v203
                                                    {
                                                        match v204 {
                                                            &Opcode::Uextend => {
                                                                let v66 = C::def_inst(ctx, v40.1);
                                                                if let Some(v67) = v66 {
                                                                    let v68 =
                                                                        &C::inst_data(ctx, v67);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v69,
                                                                        arg: v70,
                                                                    } = v68 {
                                                                        match v69 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v71 = C::value_type(ctx, v70);
                                                                                let v238 = C::lane_type(ctx, v71);
                                                                                let v206 = C::value_type(ctx, v205);
                                                                                let v239 = C::ty_equal(ctx, v238, v206);
                                                                                if v239 == true {
                                                                                    let v240 = constructor_put_in_vreg(ctx, v70);
                                                                                    let v208 = constructor_put_in_xreg(ctx, v205);
                                                                                    let v169 = &constructor_unmasked(ctx);
                                                                                    let v218 = C::ty_half_lanes(ctx, v71);
                                                                                    let v219 = v218?;
                                                                                    let v220 = C::vstate_from_type(ctx, v219);
                                                                                    let v221 = C::vstate_mf2(ctx, v220);
                                                                                    let v269 = constructor_rv_vwaddu_vx(ctx, v240, v208, v169, v221);
                                                                                    let v270 = constructor_output_vreg(ctx, v269);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 209.
                                                                                    return Some(v270);
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v71 = C::value_type(ctx, v70);
                                                                                let v238 = C::lane_type(ctx, v71);
                                                                                let v206 = C::value_type(ctx, v205);
                                                                                let v239 = C::ty_equal(ctx, v238, v206);
                                                                                if v239 == true {
                                                                                    let v240 = constructor_put_in_vreg(ctx, v70);
                                                                                    let v257 = constructor_gen_slidedown_half(ctx, v71, v240);
                                                                                    let v258 = constructor_put_in_xreg(ctx, v205);
                                                                                    let v169 = &constructor_unmasked(ctx);
                                                                                    let v218 = C::ty_half_lanes(ctx, v71);
                                                                                    let v219 = v218?;
                                                                                    let v220 = C::vstate_from_type(ctx, v219);
                                                                                    let v221 = C::vstate_mf2(ctx, v220);
                                                                                    let v279 = constructor_rv_vwaddu_vx(ctx, v257, v258, v169, v221);
                                                                                    let v280 = constructor_output_vreg(ctx, v279);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 232.
                                                                                    return Some(v280);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v182 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v183) = v182 {
                                                                    let v184 =
                                                                        C::lane_type(ctx, v183);
                                                                    let v206 =
                                                                        C::value_type(ctx, v205);
                                                                    let v207 = C::ty_equal(
                                                                        ctx, v184, v206,
                                                                    );
                                                                    if v207 == true {
                                                                        let v197 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.1,
                                                                            );
                                                                        let v208 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v205,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v187 =
                                                                            C::vstate_from_type(
                                                                                ctx, v183,
                                                                            );
                                                                        let v188 = C::vstate_mf2(
                                                                            ctx, v187,
                                                                        );
                                                                        let v211 = constructor_rv_vwaddu_wx(ctx, v197, v208, v169, v188);
                                                                        let v212 =
                                                                            constructor_output_vreg(
                                                                                ctx, v211,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 138.
                                                                        return Some(v212);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v66 = C::def_inst(ctx, v40.1);
                                                                if let Some(v67) = v66 {
                                                                    let v68 =
                                                                        &C::inst_data(ctx, v67);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v69,
                                                                        arg: v70,
                                                                    } = v68 {
                                                                        match v69 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v71 = C::value_type(ctx, v70);
                                                                                let v238 = C::lane_type(ctx, v71);
                                                                                let v206 = C::value_type(ctx, v205);
                                                                                let v239 = C::ty_equal(ctx, v238, v206);
                                                                                if v239 == true {
                                                                                    let v240 = constructor_put_in_vreg(ctx, v70);
                                                                                    let v208 = constructor_put_in_xreg(ctx, v205);
                                                                                    let v169 = &constructor_unmasked(ctx);
                                                                                    let v218 = C::ty_half_lanes(ctx, v71);
                                                                                    let v219 = v218?;
                                                                                    let v220 = C::vstate_from_type(ctx, v219);
                                                                                    let v221 = C::vstate_mf2(ctx, v220);
                                                                                    let v241 = constructor_rv_vwadd_vx(ctx, v240, v208, v169, v221);
                                                                                    let v242 = constructor_output_vreg(ctx, v241);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 164.
                                                                                    return Some(v242);
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v71 = C::value_type(ctx, v70);
                                                                                let v238 = C::lane_type(ctx, v71);
                                                                                let v206 = C::value_type(ctx, v205);
                                                                                let v239 = C::ty_equal(ctx, v238, v206);
                                                                                if v239 == true {
                                                                                    let v240 = constructor_put_in_vreg(ctx, v70);
                                                                                    let v257 = constructor_gen_slidedown_half(ctx, v71, v240);
                                                                                    let v258 = constructor_put_in_xreg(ctx, v205);
                                                                                    let v169 = &constructor_unmasked(ctx);
                                                                                    let v218 = C::ty_half_lanes(ctx, v71);
                                                                                    let v219 = v218?;
                                                                                    let v220 = C::vstate_from_type(ctx, v219);
                                                                                    let v221 = C::vstate_mf2(ctx, v220);
                                                                                    let v259 = constructor_rv_vwadd_vx(ctx, v257, v258, v169, v221);
                                                                                    let v260 = constructor_output_vreg(ctx, v259);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 187.
                                                                                    return Some(v260);
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v182 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v183) = v182 {
                                                                    let v184 =
                                                                        C::lane_type(ctx, v183);
                                                                    let v206 =
                                                                        C::value_type(ctx, v205);
                                                                    let v207 = C::ty_equal(
                                                                        ctx, v184, v206,
                                                                    );
                                                                    if v207 == true {
                                                                        let v197 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.1,
                                                                            );
                                                                        let v208 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v205,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v187 =
                                                                            C::vstate_from_type(
                                                                                ctx, v183,
                                                                            );
                                                                        let v188 = C::vstate_mf2(
                                                                            ctx, v187,
                                                                        );
                                                                        let v209 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v197, v208,
                                                                                v169, v188,
                                                                            );
                                                                        let v210 =
                                                                            constructor_output_vreg(
                                                                                ctx, v209,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 133.
                                                                        return Some(v210);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                                let v198 = constructor_put_in_xreg(ctx, v81);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v199 = constructor_rv_vadd_vx(
                                                    ctx, v197, v198, v169, v170,
                                                );
                                                let v200 = constructor_output_vreg(ctx, v199);
                                                // Rule at src/isa/riscv64/lower.isle line 130.
                                                return Some(v200);
                                            }
                                            &Opcode::Ineg => {
                                                let v201 = C::def_inst(ctx, v81);
                                                if let Some(v202) = v201 {
                                                    let v203 = &C::inst_data(ctx, v202);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v348,
                                                        args: ref v349,
                                                    } = v203
                                                    {
                                                        if let &Opcode::Imul = v348 {
                                                            let v350 =
                                                                C::unpack_value_array_2(ctx, v349);
                                                            let v365 = C::def_inst(ctx, v350.0);
                                                            if let Some(v366) = v365 {
                                                                let v367 = &C::inst_data(ctx, v366);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v368,
                                                                    arg: v369,
                                                                } = v367
                                                                {
                                                                    if let &Opcode::Splat = v368 {
                                                                        let v197 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.1,
                                                                            );
                                                                        let v370 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v350.1,
                                                                            );
                                                                        let v371 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v369,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v170 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v372 = constructor_rv_vnmsac_vx(ctx, v197, v370, v371, v169, v170);
                                                                        let v373 =
                                                                            constructor_output_vreg(
                                                                                ctx, v372,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 298.
                                                                        return Some(v373);
                                                                    }
                                                                }
                                                            }
                                                            let v357 = C::def_inst(ctx, v350.1);
                                                            if let Some(v358) = v357 {
                                                                let v359 = &C::inst_data(ctx, v358);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v360,
                                                                    arg: v361,
                                                                } = v359
                                                                {
                                                                    if let &Opcode::Splat = v360 {
                                                                        let v197 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.1,
                                                                            );
                                                                        let v353 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v350.0,
                                                                            );
                                                                        let v362 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v361,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v170 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v363 = constructor_rv_vnmsac_vx(ctx, v197, v353, v362, v169, v170);
                                                                        let v364 =
                                                                            constructor_output_vreg(
                                                                                ctx, v363,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 295.
                                                                        return Some(v364);
                                                                    }
                                                                }
                                                            }
                                                            let v197 =
                                                                constructor_put_in_vreg(ctx, v40.1);
                                                            let v353 = constructor_put_in_vreg(
                                                                ctx, v350.0,
                                                            );
                                                            let v354 = constructor_put_in_vreg(
                                                                ctx, v350.1,
                                                            );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v170 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v355 = constructor_rv_vnmsac_vv(
                                                                ctx, v197, v353, v354, v169, v170,
                                                            );
                                                            let v356 =
                                                                constructor_output_vreg(ctx, v355);
                                                            // Rule at src/isa/riscv64/lower.isle line 292.
                                                            return Some(v356);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v66 = C::def_inst(ctx, v40.1);
                                                if let Some(v67) = v66 {
                                                    let v68 = &C::inst_data(ctx, v67);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v69,
                                                        arg: v70,
                                                    } = v68
                                                    {
                                                        match v69 {
                                                            &Opcode::Splat => {
                                                                let v176 = C::def_inst(ctx, v70);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        &C::inst_data(ctx, v177);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v179,
                                                                        arg: v180,
                                                                    } = v178 {
                                                                        if let &Opcode::Sextend = v179 {
                                                                            let v82 = C::value_type(ctx, v81);
                                                                            let v234 = C::lane_type(ctx, v82);
                                                                            let v181 = C::value_type(ctx, v180);
                                                                            let v235 = C::ty_equal(ctx, v234, v181);
                                                                            if v235 == true {
                                                                                let v231 = constructor_put_in_vreg(ctx, v81);
                                                                                let v186 = constructor_put_in_xreg(ctx, v180);
                                                                                let v169 = &constructor_unmasked(ctx);
                                                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                                                let v226 = v225?;
                                                                                let v227 = C::vstate_from_type(ctx, v226);
                                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                                let v236 = constructor_rv_vwadd_vx(ctx, v231, v186, v169, v228);
                                                                                let v237 = constructor_output_vreg(ctx, v236);
                                                                                // Rule at src/isa/riscv64/lower.isle line 159.
                                                                                return Some(v237);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v217 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v232 = constructor_rv_vwadd_vv(
                                                                    ctx, v231, v217, v169, v228,
                                                                );
                                                                let v233 = constructor_output_vreg(
                                                                    ctx, v232,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 155.
                                                                return Some(v233);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v217 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v217,
                                                                    );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v282 = constructor_rv_vwadd_vv(
                                                                    ctx, v231, v281, v169, v228,
                                                                );
                                                                let v283 = constructor_output_vreg(
                                                                    ctx, v282,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 239.
                                                                return Some(v283);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                                let v224 = constructor_put_in_vreg(ctx, v81);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v82 = C::value_type(ctx, v81);
                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                let v226 = v225?;
                                                let v227 = C::vstate_from_type(ctx, v226);
                                                let v228 = C::vstate_mf2(ctx, v227);
                                                let v229 = constructor_rv_vwadd_wv(
                                                    ctx, v197, v224, v169, v228,
                                                );
                                                let v230 = constructor_output_vreg(ctx, v229);
                                                // Rule at src/isa/riscv64/lower.isle line 152.
                                                return Some(v230);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v66 = C::def_inst(ctx, v40.1);
                                                if let Some(v67) = v66 {
                                                    let v68 = &C::inst_data(ctx, v67);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v69,
                                                        arg: v70,
                                                    } = v68
                                                    {
                                                        match v69 {
                                                            &Opcode::Splat => {
                                                                let v176 = C::def_inst(ctx, v70);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        &C::inst_data(ctx, v177);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v179,
                                                                        arg: v180,
                                                                    } = v178 {
                                                                        if let &Opcode::Sextend = v179 {
                                                                            let v82 = C::value_type(ctx, v81);
                                                                            let v234 = C::lane_type(ctx, v82);
                                                                            let v181 = C::value_type(ctx, v180);
                                                                            let v235 = C::ty_equal(ctx, v234, v181);
                                                                            if v235 == true {
                                                                                let v231 = constructor_put_in_vreg(ctx, v81);
                                                                                let v249 = constructor_gen_slidedown_half(ctx, v82, v231);
                                                                                let v254 = constructor_put_in_xreg(ctx, v180);
                                                                                let v169 = &constructor_unmasked(ctx);
                                                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                                                let v226 = v225?;
                                                                                let v227 = C::vstate_from_type(ctx, v226);
                                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                                let v255 = constructor_rv_vwadd_vx(ctx, v249, v254, v169, v228);
                                                                                let v256 = constructor_output_vreg(ctx, v255);
                                                                                // Rule at src/isa/riscv64/lower.isle line 182.
                                                                                return Some(v256);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v231,
                                                                    );
                                                                let v250 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v284 = constructor_rv_vwadd_vv(
                                                                    ctx, v249, v250, v169, v228,
                                                                );
                                                                let v285 = constructor_output_vreg(
                                                                    ctx, v284,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 243.
                                                                return Some(v285);
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v231,
                                                                    );
                                                                let v250 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v251 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v250,
                                                                    );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v252 = constructor_rv_vwadd_vv(
                                                                    ctx, v249, v251, v169, v228,
                                                                );
                                                                let v253 = constructor_output_vreg(
                                                                    ctx, v252,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 178.
                                                                return Some(v253);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                                let v224 = constructor_put_in_vreg(ctx, v81);
                                                let v82 = C::value_type(ctx, v81);
                                                let v246 =
                                                    constructor_gen_slidedown_half(ctx, v82, v224);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                let v226 = v225?;
                                                let v227 = C::vstate_from_type(ctx, v226);
                                                let v228 = C::vstate_mf2(ctx, v227);
                                                let v247 = constructor_rv_vwadd_wv(
                                                    ctx, v197, v246, v169, v228,
                                                );
                                                let v248 = constructor_output_vreg(ctx, v247);
                                                // Rule at src/isa/riscv64/lower.isle line 175.
                                                return Some(v248);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v66 = C::def_inst(ctx, v40.1);
                                                if let Some(v67) = v66 {
                                                    let v68 = &C::inst_data(ctx, v67);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v69,
                                                        arg: v70,
                                                    } = v68
                                                    {
                                                        match v69 {
                                                            &Opcode::Splat => {
                                                                let v176 = C::def_inst(ctx, v70);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        &C::inst_data(ctx, v177);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v179,
                                                                        arg: v180,
                                                                    } = v178 {
                                                                        if let &Opcode::Uextend = v179 {
                                                                            let v82 = C::value_type(ctx, v81);
                                                                            let v234 = C::lane_type(ctx, v82);
                                                                            let v181 = C::value_type(ctx, v180);
                                                                            let v235 = C::ty_equal(ctx, v234, v181);
                                                                            if v235 == true {
                                                                                let v231 = constructor_put_in_vreg(ctx, v81);
                                                                                let v186 = constructor_put_in_xreg(ctx, v180);
                                                                                let v169 = &constructor_unmasked(ctx);
                                                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                                                let v226 = v225?;
                                                                                let v227 = C::vstate_from_type(ctx, v226);
                                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                                let v267 = constructor_rv_vwaddu_vx(ctx, v231, v186, v169, v228);
                                                                                let v268 = constructor_output_vreg(ctx, v267);
                                                                                // Rule at src/isa/riscv64/lower.isle line 204.
                                                                                return Some(v268);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v217 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v265 = constructor_rv_vwaddu_vv(
                                                                    ctx, v231, v217, v169, v228,
                                                                );
                                                                let v266 = constructor_output_vreg(
                                                                    ctx, v265,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 200.
                                                                return Some(v266);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v217 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v217,
                                                                    );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v286 = constructor_rv_vwaddu_vv(
                                                                    ctx, v231, v281, v169, v228,
                                                                );
                                                                let v287 = constructor_output_vreg(
                                                                    ctx, v286,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 249.
                                                                return Some(v287);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                                let v224 = constructor_put_in_vreg(ctx, v81);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v82 = C::value_type(ctx, v81);
                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                let v226 = v225?;
                                                let v227 = C::vstate_from_type(ctx, v226);
                                                let v228 = C::vstate_mf2(ctx, v227);
                                                let v263 = constructor_rv_vwaddu_wv(
                                                    ctx, v197, v224, v169, v228,
                                                );
                                                let v264 = constructor_output_vreg(ctx, v263);
                                                // Rule at src/isa/riscv64/lower.isle line 197.
                                                return Some(v264);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v66 = C::def_inst(ctx, v40.1);
                                                if let Some(v67) = v66 {
                                                    let v68 = &C::inst_data(ctx, v67);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v69,
                                                        arg: v70,
                                                    } = v68
                                                    {
                                                        match v69 {
                                                            &Opcode::Splat => {
                                                                let v176 = C::def_inst(ctx, v70);
                                                                if let Some(v177) = v176 {
                                                                    let v178 =
                                                                        &C::inst_data(ctx, v177);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v179,
                                                                        arg: v180,
                                                                    } = v178 {
                                                                        if let &Opcode::Uextend = v179 {
                                                                            let v82 = C::value_type(ctx, v81);
                                                                            let v234 = C::lane_type(ctx, v82);
                                                                            let v181 = C::value_type(ctx, v180);
                                                                            let v235 = C::ty_equal(ctx, v234, v181);
                                                                            if v235 == true {
                                                                                let v231 = constructor_put_in_vreg(ctx, v81);
                                                                                let v249 = constructor_gen_slidedown_half(ctx, v82, v231);
                                                                                let v254 = constructor_put_in_xreg(ctx, v180);
                                                                                let v169 = &constructor_unmasked(ctx);
                                                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                                                let v226 = v225?;
                                                                                let v227 = C::vstate_from_type(ctx, v226);
                                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                                let v277 = constructor_rv_vwaddu_vx(ctx, v249, v254, v169, v228);
                                                                                let v278 = constructor_output_vreg(ctx, v277);
                                                                                // Rule at src/isa/riscv64/lower.isle line 227.
                                                                                return Some(v278);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v231,
                                                                    );
                                                                let v250 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v288 = constructor_rv_vwaddu_vv(
                                                                    ctx, v249, v250, v169, v228,
                                                                );
                                                                let v289 = constructor_output_vreg(
                                                                    ctx, v288,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 253.
                                                                return Some(v289);
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v231 = constructor_put_in_vreg(
                                                                    ctx, v81,
                                                                );
                                                                let v82 = C::value_type(ctx, v81);
                                                                let v249 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v231,
                                                                    );
                                                                let v250 = constructor_put_in_vreg(
                                                                    ctx, v70,
                                                                );
                                                                let v251 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v82, v250,
                                                                    );
                                                                let v169 =
                                                                    &constructor_unmasked(ctx);
                                                                let v225 =
                                                                    C::ty_half_lanes(ctx, v82);
                                                                let v226 = v225?;
                                                                let v227 =
                                                                    C::vstate_from_type(ctx, v226);
                                                                let v228 = C::vstate_mf2(ctx, v227);
                                                                let v275 = constructor_rv_vwaddu_vv(
                                                                    ctx, v249, v251, v169, v228,
                                                                );
                                                                let v276 = constructor_output_vreg(
                                                                    ctx, v275,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 223.
                                                                return Some(v276);
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                                let v224 = constructor_put_in_vreg(ctx, v81);
                                                let v82 = C::value_type(ctx, v81);
                                                let v246 =
                                                    constructor_gen_slidedown_half(ctx, v82, v224);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v225 = C::ty_half_lanes(ctx, v82);
                                                let v226 = v225?;
                                                let v227 = C::vstate_from_type(ctx, v226);
                                                let v228 = C::vstate_mf2(ctx, v227);
                                                let v273 = constructor_rv_vwaddu_wv(
                                                    ctx, v197, v246, v169, v228,
                                                );
                                                let v274 = constructor_output_vreg(ctx, v273);
                                                // Rule at src/isa/riscv64/lower.isle line 220.
                                                return Some(v274);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                match v68 {
                                    &InstructionData::Binary {
                                        opcode: ref v86,
                                        args: ref v87,
                                    } => {
                                        if let &Opcode::Imul = v86 {
                                            let v88 = C::unpack_value_array_2(ctx, v87);
                                            let v120 = C::def_inst(ctx, v88.0);
                                            if let Some(v121) = v120 {
                                                let v122 = &C::inst_data(ctx, v121);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v123,
                                                    arg: v124,
                                                } = v122
                                                {
                                                    if let &Opcode::Splat = v123 {
                                                        let v167 =
                                                            constructor_put_in_vreg(ctx, v40.0);
                                                        let v302 =
                                                            constructor_put_in_vreg(ctx, v88.1);
                                                        let v303 =
                                                            constructor_put_in_xreg(ctx, v124);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v304 = constructor_rv_vmacc_vx(
                                                            ctx, v167, v302, v303, v169, v170,
                                                        );
                                                        let v305 =
                                                            constructor_output_vreg(ctx, v304);
                                                        // Rule at src/isa/riscv64/lower.isle line 269.
                                                        return Some(v305);
                                                    }
                                                }
                                            }
                                            let v294 = C::def_inst(ctx, v88.1);
                                            if let Some(v295) = v294 {
                                                let v296 = &C::inst_data(ctx, v295);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v297,
                                                    arg: v298,
                                                } = v296
                                                {
                                                    if let &Opcode::Splat = v297 {
                                                        let v167 =
                                                            constructor_put_in_vreg(ctx, v40.0);
                                                        let v290 =
                                                            constructor_put_in_vreg(ctx, v88.0);
                                                        let v299 =
                                                            constructor_put_in_xreg(ctx, v298);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v300 = constructor_rv_vmacc_vx(
                                                            ctx, v167, v290, v299, v169, v170,
                                                        );
                                                        let v301 =
                                                            constructor_output_vreg(ctx, v300);
                                                        // Rule at src/isa/riscv64/lower.isle line 266.
                                                        return Some(v301);
                                                    }
                                                }
                                            }
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v290 = constructor_put_in_vreg(ctx, v88.0);
                                            let v291 = constructor_put_in_vreg(ctx, v88.1);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v292 = constructor_rv_vmacc_vv(
                                                ctx, v167, v290, v291, v169, v170,
                                            );
                                            let v293 = constructor_output_vreg(ctx, v292);
                                            // Rule at src/isa/riscv64/lower.isle line 263.
                                            return Some(v293);
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } => {
                                        match v69 {
                                            &Opcode::Splat => {
                                                let v176 = C::def_inst(ctx, v70);
                                                if let Some(v177) = v176 {
                                                    let v178 = &C::inst_data(ctx, v177);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v179,
                                                        arg: v180,
                                                    } = v178
                                                    {
                                                        match v179 {
                                                            &Opcode::Uextend => {
                                                                let v182 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v183) = v182 {
                                                                    let v184 =
                                                                        C::lane_type(ctx, v183);
                                                                    let v181 =
                                                                        C::value_type(ctx, v180);
                                                                    let v185 = C::ty_equal(
                                                                        ctx, v184, v181,
                                                                    );
                                                                    if v185 == true {
                                                                        let v167 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.0,
                                                                            );
                                                                        let v186 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v180,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v187 =
                                                                            C::vstate_from_type(
                                                                                ctx, v183,
                                                                            );
                                                                        let v188 = C::vstate_mf2(
                                                                            ctx, v187,
                                                                        );
                                                                        let v191 = constructor_rv_vwaddu_wx(ctx, v167, v186, v169, v188);
                                                                        let v192 =
                                                                            constructor_output_vreg(
                                                                                ctx, v191,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 120.
                                                                        return Some(v192);
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v182 =
                                                                    C::ty_half_width(ctx, v11);
                                                                if let Some(v183) = v182 {
                                                                    let v184 =
                                                                        C::lane_type(ctx, v183);
                                                                    let v181 =
                                                                        C::value_type(ctx, v180);
                                                                    let v185 = C::ty_equal(
                                                                        ctx, v184, v181,
                                                                    );
                                                                    if v185 == true {
                                                                        let v167 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.0,
                                                                            );
                                                                        let v186 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v180,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v187 =
                                                                            C::vstate_from_type(
                                                                                ctx, v183,
                                                                            );
                                                                        let v188 = C::vstate_mf2(
                                                                            ctx, v187,
                                                                        );
                                                                        let v189 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v167, v186,
                                                                                v169, v188,
                                                                            );
                                                                        let v190 =
                                                                            constructor_output_vreg(
                                                                                ctx, v189,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 115.
                                                                        return Some(v190);
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v173 = constructor_put_in_xreg(ctx, v70);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v174 = constructor_rv_vadd_vx(
                                                    ctx, v167, v173, v169, v170,
                                                );
                                                let v175 = constructor_output_vreg(ctx, v174);
                                                // Rule at src/isa/riscv64/lower.isle line 112.
                                                return Some(v175);
                                            }
                                            &Opcode::Ineg => {
                                                let v176 = C::def_inst(ctx, v70);
                                                if let Some(v177) = v176 {
                                                    let v178 = &C::inst_data(ctx, v177);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v322,
                                                        args: ref v323,
                                                    } = v178
                                                    {
                                                        if let &Opcode::Imul = v322 {
                                                            let v324 =
                                                                C::unpack_value_array_2(ctx, v323);
                                                            let v339 = C::def_inst(ctx, v324.0);
                                                            if let Some(v340) = v339 {
                                                                let v341 = &C::inst_data(ctx, v340);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v342,
                                                                    arg: v343,
                                                                } = v341
                                                                {
                                                                    if let &Opcode::Splat = v342 {
                                                                        let v167 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.0,
                                                                            );
                                                                        let v344 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v324.1,
                                                                            );
                                                                        let v345 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v343,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v170 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v346 = constructor_rv_vnmsac_vx(ctx, v167, v344, v345, v169, v170);
                                                                        let v347 =
                                                                            constructor_output_vreg(
                                                                                ctx, v346,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 289.
                                                                        return Some(v347);
                                                                    }
                                                                }
                                                            }
                                                            let v331 = C::def_inst(ctx, v324.1);
                                                            if let Some(v332) = v331 {
                                                                let v333 = &C::inst_data(ctx, v332);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v334,
                                                                    arg: v335,
                                                                } = v333
                                                                {
                                                                    if let &Opcode::Splat = v334 {
                                                                        let v167 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v40.0,
                                                                            );
                                                                        let v327 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v324.0,
                                                                            );
                                                                        let v336 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v335,
                                                                            );
                                                                        let v169 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v170 =
                                                                            C::vstate_from_type(
                                                                                ctx, v11,
                                                                            );
                                                                        let v337 = constructor_rv_vnmsac_vx(ctx, v167, v327, v336, v169, v170);
                                                                        let v338 =
                                                                            constructor_output_vreg(
                                                                                ctx, v337,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 286.
                                                                        return Some(v338);
                                                                    }
                                                                }
                                                            }
                                                            let v167 =
                                                                constructor_put_in_vreg(ctx, v40.0);
                                                            let v327 = constructor_put_in_vreg(
                                                                ctx, v324.0,
                                                            );
                                                            let v328 = constructor_put_in_vreg(
                                                                ctx, v324.1,
                                                            );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v170 =
                                                                C::vstate_from_type(ctx, v11);
                                                            let v329 = constructor_rv_vnmsac_vv(
                                                                ctx, v167, v327, v328, v169, v170,
                                                            );
                                                            let v330 =
                                                                constructor_output_vreg(ctx, v329);
                                                            // Rule at src/isa/riscv64/lower.isle line 283.
                                                            return Some(v330);
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v217 = constructor_put_in_vreg(ctx, v70);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v71 = C::value_type(ctx, v70);
                                                let v218 = C::ty_half_lanes(ctx, v71);
                                                let v219 = v218?;
                                                let v220 = C::vstate_from_type(ctx, v219);
                                                let v221 = C::vstate_mf2(ctx, v220);
                                                let v222 = constructor_rv_vwadd_wv(
                                                    ctx, v167, v217, v169, v221,
                                                );
                                                let v223 = constructor_output_vreg(ctx, v222);
                                                // Rule at src/isa/riscv64/lower.isle line 149.
                                                return Some(v223);
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v217 = constructor_put_in_vreg(ctx, v70);
                                                let v71 = C::value_type(ctx, v70);
                                                let v243 =
                                                    constructor_gen_slidedown_half(ctx, v71, v217);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v218 = C::ty_half_lanes(ctx, v71);
                                                let v219 = v218?;
                                                let v220 = C::vstate_from_type(ctx, v219);
                                                let v221 = C::vstate_mf2(ctx, v220);
                                                let v244 = constructor_rv_vwadd_wv(
                                                    ctx, v167, v243, v169, v221,
                                                );
                                                let v245 = constructor_output_vreg(ctx, v244);
                                                // Rule at src/isa/riscv64/lower.isle line 172.
                                                return Some(v245);
                                            }
                                            &Opcode::UwidenLow => {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v217 = constructor_put_in_vreg(ctx, v70);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v71 = C::value_type(ctx, v70);
                                                let v218 = C::ty_half_lanes(ctx, v71);
                                                let v219 = v218?;
                                                let v220 = C::vstate_from_type(ctx, v219);
                                                let v221 = C::vstate_mf2(ctx, v220);
                                                let v261 = constructor_rv_vwaddu_wv(
                                                    ctx, v167, v217, v169, v221,
                                                );
                                                let v262 = constructor_output_vreg(ctx, v261);
                                                // Rule at src/isa/riscv64/lower.isle line 194.
                                                return Some(v262);
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v217 = constructor_put_in_vreg(ctx, v70);
                                                let v71 = C::value_type(ctx, v70);
                                                let v243 =
                                                    constructor_gen_slidedown_half(ctx, v71, v217);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v218 = C::ty_half_lanes(ctx, v71);
                                                let v219 = v218?;
                                                let v220 = C::vstate_from_type(ctx, v219);
                                                let v221 = C::vstate_mf2(ctx, v220);
                                                let v271 = constructor_rv_vwaddu_wv(
                                                    ctx, v167, v243, v169, v221,
                                                );
                                                let v272 = constructor_output_vreg(ctx, v271);
                                                // Rule at src/isa/riscv64/lower.isle line 217.
                                                return Some(v272);
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v171 = constructor_rv_vadd_vv(ctx, v167, v168, v169, v170);
                            let v172 = constructor_output_vreg(ctx, v171);
                            // Rule at src/isa/riscv64/lower.isle line 109.
                            return Some(v172);
                        }
                        match v3 {
                            I64 => {
                                let v72 = C::has_zba(ctx);
                                if v72 == true {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Binary {
                                            opcode: ref v103,
                                            args: ref v104,
                                        } = v79
                                        {
                                            if let &Opcode::Ishl = v103 {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v108 = C::maybe_uextend(ctx, v105.1);
                                                if let Some(v109) = v108 {
                                                    let v110 = C::def_inst(ctx, v109);
                                                    if let Some(v111) = v110 {
                                                        let v112 = &C::inst_data(ctx, v111);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v113,
                                                            imm: v114,
                                                        } = v112
                                                        {
                                                            if let &Opcode::Iconst = v113 {
                                                                let v131 = C::def_inst(ctx, v105.0);
                                                                if let Some(v132) = v131 {
                                                                    let v133 =
                                                                        &C::inst_data(ctx, v132);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v134,
                                                                        arg: v135,
                                                                    } = v133 {
                                                                        if let &Opcode::Uextend = v134 {
                                                                            let v136 = C::value_type(ctx, v135);
                                                                            if v136 == I32 {
                                                                                let v137 = &constructor_match_shnadd_uw(ctx, v114);
                                                                                if let Some(v138) = v137 {
                                                                                    let v139 = C::put_in_reg(ctx, v135);
                                                                                    let v63 = C::put_in_reg(ctx, v40.1);
                                                                                    let v140 = constructor_alu_rrr(ctx, v138, v139, v63);
                                                                                    let v141 = constructor_output_reg(ctx, v140);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 92.
                                                                                    return Some(v141);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Binary {
                                            opcode: ref v86,
                                            args: ref v87,
                                        } = v68
                                        {
                                            if let &Opcode::Ishl = v86 {
                                                let v88 = C::unpack_value_array_2(ctx, v87);
                                                let v91 = C::maybe_uextend(ctx, v88.1);
                                                if let Some(v92) = v91 {
                                                    let v93 = C::def_inst(ctx, v92);
                                                    if let Some(v94) = v93 {
                                                        let v95 = &C::inst_data(ctx, v94);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v96,
                                                            imm: v97,
                                                        } = v95
                                                        {
                                                            if let &Opcode::Iconst = v96 {
                                                                let v120 = C::def_inst(ctx, v88.0);
                                                                if let Some(v121) = v120 {
                                                                    let v122 =
                                                                        &C::inst_data(ctx, v121);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v123,
                                                                        arg: v124,
                                                                    } = v122 {
                                                                        if let &Opcode::Uextend = v123 {
                                                                            let v125 = C::value_type(ctx, v124);
                                                                            if v125 == I32 {
                                                                                let v126 = &constructor_match_shnadd_uw(ctx, v97);
                                                                                if let Some(v127) = v126 {
                                                                                    let v128 = C::put_in_reg(ctx, v124);
                                                                                    let v56 = C::put_in_reg(ctx, v40.0);
                                                                                    let v129 = constructor_alu_rrr(ctx, v127, v128, v56);
                                                                                    let v130 = constructor_output_reg(ctx, v129);
                                                                                    // Rule at src/isa/riscv64/lower.isle line 87.
                                                                                    return Some(v130);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        match v79 {
                                            &InstructionData::Binary {
                                                opcode: ref v103,
                                                args: ref v104,
                                            } => {
                                                if let &Opcode::Ishl = v103 {
                                                    let v105 = C::unpack_value_array_2(ctx, v104);
                                                    let v108 = C::maybe_uextend(ctx, v105.1);
                                                    if let Some(v109) = v108 {
                                                        let v110 = C::def_inst(ctx, v109);
                                                        if let Some(v111) = v110 {
                                                            let v112 = &C::inst_data(ctx, v111);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v113,
                                                                imm: v114,
                                                            } = v112
                                                            {
                                                                if let &Opcode::Iconst = v113 {
                                                                    let v115 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v114,
                                                                        );
                                                                    if let Some(v116) = v115 {
                                                                        let v117 = C::put_in_reg(
                                                                            ctx, v105.0,
                                                                        );
                                                                        let v63 = C::put_in_reg(
                                                                            ctx, v40.1,
                                                                        );
                                                                        let v118 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v116, v117,
                                                                                v63,
                                                                            );
                                                                        let v119 =
                                                                            constructor_output_reg(
                                                                                ctx, v118,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 70.
                                                                        return Some(v119);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v80,
                                                arg: v81,
                                            } => {
                                                if let &Opcode::Uextend = v80 {
                                                    let v82 = C::value_type(ctx, v81);
                                                    if v82 == I32 {
                                                        let v83 = constructor_put_in_xreg(ctx, v81);
                                                        let v44 =
                                                            constructor_put_in_xreg(ctx, v40.1);
                                                        let v84 =
                                                            constructor_rv_adduw(ctx, v83, v44);
                                                        let v85 = constructor_output_xreg(ctx, v84);
                                                        // Rule at src/isa/riscv64/lower.isle line 55.
                                                        return Some(v85);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        match v68 {
                                            &InstructionData::Binary {
                                                opcode: ref v86,
                                                args: ref v87,
                                            } => {
                                                if let &Opcode::Ishl = v86 {
                                                    let v88 = C::unpack_value_array_2(ctx, v87);
                                                    let v91 = C::maybe_uextend(ctx, v88.1);
                                                    if let Some(v92) = v91 {
                                                        let v93 = C::def_inst(ctx, v92);
                                                        if let Some(v94) = v93 {
                                                            let v95 = &C::inst_data(ctx, v94);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v96,
                                                                imm: v97,
                                                            } = v95
                                                            {
                                                                if let &Opcode::Iconst = v96 {
                                                                    let v98 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v97,
                                                                        );
                                                                    if let Some(v99) = v98 {
                                                                        let v100 = C::put_in_reg(
                                                                            ctx, v88.0,
                                                                        );
                                                                        let v56 = C::put_in_reg(
                                                                            ctx, v40.0,
                                                                        );
                                                                        let v101 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v99, v100, v56,
                                                                            );
                                                                        let v102 =
                                                                            constructor_output_reg(
                                                                                ctx, v101,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 65.
                                                                        return Some(v102);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v69,
                                                arg: v70,
                                            } => {
                                                if let &Opcode::Uextend = v69 {
                                                    let v71 = C::value_type(ctx, v70);
                                                    if v71 == I32 {
                                                        let v73 = constructor_put_in_xreg(ctx, v70);
                                                        let v74 =
                                                            constructor_put_in_xreg(ctx, v40.0);
                                                        let v75 =
                                                            constructor_rv_adduw(ctx, v73, v74);
                                                        let v76 = constructor_output_xreg(ctx, v75);
                                                        // Rule at src/isa/riscv64/lower.isle line 51.
                                                        return Some(v76);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v142 = C::put_in_regs(ctx, v40.0);
                                let v144 = C::value_regs_get(ctx, v142, 0x0);
                                let v145 = C::xreg_new(ctx, v144);
                                let v146 = C::put_in_regs(ctx, v40.1);
                                let v147 = C::value_regs_get(ctx, v146, 0x0);
                                let v148 = C::xreg_new(ctx, v147);
                                let v149 = constructor_rv_add(ctx, v145, v148);
                                let v150 = C::put_in_regs(ctx, v40.1);
                                let v151 = C::value_regs_get(ctx, v150, 0x0);
                                let v152 = C::xreg_new(ctx, v151);
                                let v153 = constructor_rv_sltu(ctx, v149, v152);
                                let v154 = C::put_in_regs(ctx, v40.0);
                                let v156 = C::value_regs_get(ctx, v154, 0x1);
                                let v157 = C::xreg_new(ctx, v156);
                                let v158 = C::put_in_regs(ctx, v40.1);
                                let v159 = C::value_regs_get(ctx, v158, 0x1);
                                let v160 = C::xreg_new(ctx, v159);
                                let v161 = constructor_rv_add(ctx, v157, v160);
                                let v162 = constructor_rv_add(ctx, v161, v153);
                                let v163 = C::xreg_to_reg(ctx, v149);
                                let v164 = C::xreg_to_reg(ctx, v162);
                                let v165 = C::value_regs(ctx, v163, v164);
                                let v166 = C::output(ctx, v165);
                                // Rule at src/isa/riscv64/lower.isle line 98.
                                return Some(v166);
                            }
                            _ => {}
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v59 = C::i64_from_iconst(ctx, v40.0);
                            if let Some(v60) = v59 {
                                let v61 = C::imm12_from_i64(ctx, v60);
                                if let Some(v62) = v61 {
                                    let v55 = &constructor_select_addi(ctx, v50);
                                    let v63 = C::put_in_reg(ctx, v40.1);
                                    let v64 = constructor_alu_rr_imm12(ctx, v55, v63, v62);
                                    let v65 = constructor_output_reg(ctx, v64);
                                    // Rule at src/isa/riscv64/lower.isle line 46.
                                    return Some(v65);
                                }
                            }
                            let v51 = C::i64_from_iconst(ctx, v40.1);
                            if let Some(v52) = v51 {
                                let v53 = C::imm12_from_i64(ctx, v52);
                                if let Some(v54) = v53 {
                                    let v55 = &constructor_select_addi(ctx, v50);
                                    let v56 = C::put_in_reg(ctx, v40.0);
                                    let v57 = constructor_alu_rr_imm12(ctx, v55, v56, v54);
                                    let v58 = constructor_output_reg(ctx, v57);
                                    // Rule at src/isa/riscv64/lower.isle line 43.
                                    return Some(v58);
                                }
                            }
                        }
                        if v3 == I64 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                            let v44 = constructor_put_in_xreg(ctx, v40.1);
                            let v47 = constructor_rv_add(ctx, v43, v44);
                            let v48 = constructor_output_xreg(ctx, v47);
                            // Rule at src/isa/riscv64/lower.isle line 39.
                            return Some(v48);
                        }
                        let v34 = C::fits_in_32(ctx, v3);
                        if let Some(v35) = v34 {
                            let v36 = C::ty_int(ctx, v35);
                            if let Some(v37) = v36 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v44 = constructor_put_in_xreg(ctx, v40.1);
                                let v45 = constructor_rv_addw(ctx, v43, v44);
                                let v46 = constructor_output_xreg(ctx, v45);
                                // Rule at src/isa/riscv64/lower.isle line 36.
                                return Some(v46);
                            }
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    match v69 {
                                        &Opcode::Splat => {
                                            let v77 = C::def_inst(ctx, v40.0);
                                            if let Some(v78) = v77 {
                                                let v79 = &C::inst_data(ctx, v78);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v80,
                                                    arg: v81,
                                                } = v79
                                                {
                                                    match v80 {
                                                        &Opcode::SwidenLow => {
                                                            let v176 = C::def_inst(ctx, v70);
                                                            if let Some(v177) = v176 {
                                                                let v178 = &C::inst_data(ctx, v177);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v179,
                                                                    arg: v180,
                                                                } = v178
                                                                {
                                                                    if let &Opcode::Sextend = v179 {
                                                                        let v82 =
                                                                            C::value_type(ctx, v81);
                                                                        let v234 =
                                                                            C::lane_type(ctx, v82);
                                                                        let v181 = C::value_type(
                                                                            ctx, v180,
                                                                        );
                                                                        let v235 = C::ty_equal(
                                                                            ctx, v234, v181,
                                                                        );
                                                                        if v235 == true {
                                                                            let v231 = constructor_put_in_vreg(ctx, v81);
                                                                            let v186 = constructor_put_in_xreg(ctx, v180);
                                                                            let v169 = &constructor_unmasked(ctx);
                                                                            let v225 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v82,
                                                                                );
                                                                            let v226 = v225?;
                                                                            let v227 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v226,
                                                                                );
                                                                            let v228 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v227,
                                                                                );
                                                                            let v423 = constructor_rv_vwsub_vx(ctx, v231, v186, v169, v228);
                                                                            let v424 = constructor_output_vreg(ctx, v423);
                                                                            // Rule at src/isa/riscv64/lower.isle line 366.
                                                                            return Some(v424);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v176 = C::def_inst(ctx, v70);
                                                            if let Some(v177) = v176 {
                                                                let v178 = &C::inst_data(ctx, v177);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v179,
                                                                    arg: v180,
                                                                } = v178
                                                                {
                                                                    if let &Opcode::Sextend = v179 {
                                                                        let v82 =
                                                                            C::value_type(ctx, v81);
                                                                        let v234 =
                                                                            C::lane_type(ctx, v82);
                                                                        let v181 = C::value_type(
                                                                            ctx, v180,
                                                                        );
                                                                        let v235 = C::ty_equal(
                                                                            ctx, v234, v181,
                                                                        );
                                                                        if v235 == true {
                                                                            let v231 = constructor_put_in_vreg(ctx, v81);
                                                                            let v249 = constructor_gen_slidedown_half(ctx, v82, v231);
                                                                            let v254 = constructor_put_in_xreg(ctx, v180);
                                                                            let v169 = &constructor_unmasked(ctx);
                                                                            let v225 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v82,
                                                                                );
                                                                            let v226 = v225?;
                                                                            let v227 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v226,
                                                                                );
                                                                            let v228 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v227,
                                                                                );
                                                                            let v429 = constructor_rv_vwsub_vx(ctx, v249, v254, v169, v228);
                                                                            let v430 = constructor_output_vreg(ctx, v429);
                                                                            // Rule at src/isa/riscv64/lower.isle line 381.
                                                                            return Some(v430);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v176 = C::def_inst(ctx, v70);
                                                            if let Some(v177) = v176 {
                                                                let v178 = &C::inst_data(ctx, v177);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v179,
                                                                    arg: v180,
                                                                } = v178
                                                                {
                                                                    if let &Opcode::Uextend = v179 {
                                                                        let v82 =
                                                                            C::value_type(ctx, v81);
                                                                        let v234 =
                                                                            C::lane_type(ctx, v82);
                                                                        let v181 = C::value_type(
                                                                            ctx, v180,
                                                                        );
                                                                        let v235 = C::ty_equal(
                                                                            ctx, v234, v181,
                                                                        );
                                                                        if v235 == true {
                                                                            let v231 = constructor_put_in_vreg(ctx, v81);
                                                                            let v186 = constructor_put_in_xreg(ctx, v180);
                                                                            let v169 = &constructor_unmasked(ctx);
                                                                            let v225 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v82,
                                                                                );
                                                                            let v226 = v225?;
                                                                            let v227 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v226,
                                                                                );
                                                                            let v228 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v227,
                                                                                );
                                                                            let v435 = constructor_rv_vwsubu_vx(ctx, v231, v186, v169, v228);
                                                                            let v436 = constructor_output_vreg(ctx, v435);
                                                                            // Rule at src/isa/riscv64/lower.isle line 395.
                                                                            return Some(v436);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v176 = C::def_inst(ctx, v70);
                                                            if let Some(v177) = v176 {
                                                                let v178 = &C::inst_data(ctx, v177);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v179,
                                                                    arg: v180,
                                                                } = v178
                                                                {
                                                                    if let &Opcode::Uextend = v179 {
                                                                        let v82 =
                                                                            C::value_type(ctx, v81);
                                                                        let v234 =
                                                                            C::lane_type(ctx, v82);
                                                                        let v181 = C::value_type(
                                                                            ctx, v180,
                                                                        );
                                                                        let v235 = C::ty_equal(
                                                                            ctx, v234, v181,
                                                                        );
                                                                        if v235 == true {
                                                                            let v231 = constructor_put_in_vreg(ctx, v81);
                                                                            let v249 = constructor_gen_slidedown_half(ctx, v82, v231);
                                                                            let v254 = constructor_put_in_xreg(ctx, v180);
                                                                            let v169 = &constructor_unmasked(ctx);
                                                                            let v225 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v82,
                                                                                );
                                                                            let v226 = v225?;
                                                                            let v227 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v226,
                                                                                );
                                                                            let v228 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v227,
                                                                                );
                                                                            let v441 = constructor_rv_vwsubu_vx(ctx, v249, v254, v169, v228);
                                                                            let v442 = constructor_output_vreg(ctx, v441);
                                                                            // Rule at src/isa/riscv64/lower.isle line 410.
                                                                            return Some(v442);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenLow => {
                                            let v77 = C::def_inst(ctx, v40.0);
                                            if let Some(v78) = v77 {
                                                let v79 = &C::inst_data(ctx, v78);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v80,
                                                    arg: v81,
                                                } = v79
                                                {
                                                    match v80 {
                                                        &Opcode::SwidenLow => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v217 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v421 = constructor_rv_vwsub_vv(
                                                                ctx, v231, v217, v169, v228,
                                                            );
                                                            let v422 =
                                                                constructor_output_vreg(ctx, v421);
                                                            // Rule at src/isa/riscv64/lower.isle line 362.
                                                            return Some(v422);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v231,
                                                                );
                                                            let v250 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v445 = constructor_rv_vwsub_vv(
                                                                ctx, v249, v250, v169, v228,
                                                            );
                                                            let v446 =
                                                                constructor_output_vreg(ctx, v445);
                                                            // Rule at src/isa/riscv64/lower.isle line 421.
                                                            return Some(v446);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v77 = C::def_inst(ctx, v40.0);
                                            if let Some(v78) = v77 {
                                                let v79 = &C::inst_data(ctx, v78);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v80,
                                                    arg: v81,
                                                } = v79
                                                {
                                                    match v80 {
                                                        &Opcode::SwidenLow => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v217 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v217,
                                                                );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v443 = constructor_rv_vwsub_vv(
                                                                ctx, v231, v281, v169, v228,
                                                            );
                                                            let v444 =
                                                                constructor_output_vreg(ctx, v443);
                                                            // Rule at src/isa/riscv64/lower.isle line 417.
                                                            return Some(v444);
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v231,
                                                                );
                                                            let v250 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v250,
                                                                );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v427 = constructor_rv_vwsub_vv(
                                                                ctx, v249, v251, v169, v228,
                                                            );
                                                            let v428 =
                                                                constructor_output_vreg(ctx, v427);
                                                            // Rule at src/isa/riscv64/lower.isle line 377.
                                                            return Some(v428);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v77 = C::def_inst(ctx, v40.0);
                                            if let Some(v78) = v77 {
                                                let v79 = &C::inst_data(ctx, v78);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v80,
                                                    arg: v81,
                                                } = v79
                                                {
                                                    match v80 {
                                                        &Opcode::UwidenLow => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v217 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v433 = constructor_rv_vwsubu_vv(
                                                                ctx, v231, v217, v169, v228,
                                                            );
                                                            let v434 =
                                                                constructor_output_vreg(ctx, v433);
                                                            // Rule at src/isa/riscv64/lower.isle line 391.
                                                            return Some(v434);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v231,
                                                                );
                                                            let v250 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v449 = constructor_rv_vwsubu_vv(
                                                                ctx, v249, v250, v169, v228,
                                                            );
                                                            let v450 =
                                                                constructor_output_vreg(ctx, v449);
                                                            // Rule at src/isa/riscv64/lower.isle line 431.
                                                            return Some(v450);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v77 = C::def_inst(ctx, v40.0);
                                            if let Some(v78) = v77 {
                                                let v79 = &C::inst_data(ctx, v78);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v80,
                                                    arg: v81,
                                                } = v79
                                                {
                                                    match v80 {
                                                        &Opcode::UwidenLow => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v217 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v217,
                                                                );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v447 = constructor_rv_vwsubu_vv(
                                                                ctx, v231, v281, v169, v228,
                                                            );
                                                            let v448 =
                                                                constructor_output_vreg(ctx, v447);
                                                            // Rule at src/isa/riscv64/lower.isle line 427.
                                                            return Some(v448);
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v231 =
                                                                constructor_put_in_vreg(ctx, v81);
                                                            let v82 = C::value_type(ctx, v81);
                                                            let v249 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v231,
                                                                );
                                                            let v250 =
                                                                constructor_put_in_vreg(ctx, v70);
                                                            let v251 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v82, v250,
                                                                );
                                                            let v169 = &constructor_unmasked(ctx);
                                                            let v225 = C::ty_half_lanes(ctx, v82);
                                                            let v226 = v225?;
                                                            let v227 =
                                                                C::vstate_from_type(ctx, v226);
                                                            let v228 = C::vstate_mf2(ctx, v227);
                                                            let v439 = constructor_rv_vwsubu_vv(
                                                                ctx, v249, v251, v169, v228,
                                                            );
                                                            let v440 =
                                                                constructor_output_vreg(ctx, v439);
                                                            // Rule at src/isa/riscv64/lower.isle line 406.
                                                            return Some(v440);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v417 = constructor_rv_vrsub_vi(ctx, v197, v214, v169, v170);
                                let v418 = constructor_output_vreg(ctx, v417);
                                // Rule at src/isa/riscv64/lower.isle line 352.
                                return Some(v418);
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v415 =
                                            constructor_rv_vrsub_vx(ctx, v197, v198, v169, v170);
                                        let v416 = constructor_output_vreg(ctx, v415);
                                        // Rule at src/isa/riscv64/lower.isle line 349.
                                        return Some(v416);
                                    }
                                }
                            }
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    match v69 {
                                        &Opcode::Splat => {
                                            let v176 = C::def_inst(ctx, v70);
                                            if let Some(v177) = v176 {
                                                let v178 = &C::inst_data(ctx, v177);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v179,
                                                    arg: v180,
                                                } = v178
                                                {
                                                    match v179 {
                                                        &Opcode::Uextend => {
                                                            let v182 = C::ty_half_width(ctx, v11);
                                                            if let Some(v183) = v182 {
                                                                let v184 = C::lane_type(ctx, v183);
                                                                let v181 = C::value_type(ctx, v180);
                                                                let v185 =
                                                                    C::ty_equal(ctx, v184, v181);
                                                                if v185 == true {
                                                                    let v167 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v40.0,
                                                                        );
                                                                    let v186 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v180,
                                                                        );
                                                                    let v169 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v187 = C::vstate_from_type(
                                                                        ctx, v183,
                                                                    );
                                                                    let v188 =
                                                                        C::vstate_mf2(ctx, v187);
                                                                    let v413 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v167, v186, v169,
                                                                            v188,
                                                                        );
                                                                    let v414 =
                                                                        constructor_output_vreg(
                                                                            ctx, v413,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 344.
                                                                    return Some(v414);
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v182 = C::ty_half_width(ctx, v11);
                                                            if let Some(v183) = v182 {
                                                                let v184 = C::lane_type(ctx, v183);
                                                                let v181 = C::value_type(ctx, v180);
                                                                let v185 =
                                                                    C::ty_equal(ctx, v184, v181);
                                                                if v185 == true {
                                                                    let v167 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v40.0,
                                                                        );
                                                                    let v186 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v180,
                                                                        );
                                                                    let v169 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v187 = C::vstate_from_type(
                                                                        ctx, v183,
                                                                    );
                                                                    let v188 =
                                                                        C::vstate_mf2(ctx, v187);
                                                                    let v411 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v167, v186, v169,
                                                                            v188,
                                                                        );
                                                                    let v412 =
                                                                        constructor_output_vreg(
                                                                            ctx, v411,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 339.
                                                                    return Some(v412);
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v173 = constructor_put_in_xreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v409 =
                                                constructor_rv_vsub_vx(ctx, v167, v173, v169, v170);
                                            let v410 = constructor_output_vreg(ctx, v409);
                                            // Rule at src/isa/riscv64/lower.isle line 336.
                                            return Some(v410);
                                        }
                                        &Opcode::SwidenLow => {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v217 = constructor_put_in_vreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v71 = C::value_type(ctx, v70);
                                            let v218 = C::ty_half_lanes(ctx, v71);
                                            let v219 = v218?;
                                            let v220 = C::vstate_from_type(ctx, v219);
                                            let v221 = C::vstate_mf2(ctx, v220);
                                            let v419 = constructor_rv_vwsub_wv(
                                                ctx, v167, v217, v169, v221,
                                            );
                                            let v420 = constructor_output_vreg(ctx, v419);
                                            // Rule at src/isa/riscv64/lower.isle line 359.
                                            return Some(v420);
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v217 = constructor_put_in_vreg(ctx, v70);
                                            let v71 = C::value_type(ctx, v70);
                                            let v243 =
                                                constructor_gen_slidedown_half(ctx, v71, v217);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v218 = C::ty_half_lanes(ctx, v71);
                                            let v219 = v218?;
                                            let v220 = C::vstate_from_type(ctx, v219);
                                            let v221 = C::vstate_mf2(ctx, v220);
                                            let v425 = constructor_rv_vwsub_wv(
                                                ctx, v167, v243, v169, v221,
                                            );
                                            let v426 = constructor_output_vreg(ctx, v425);
                                            // Rule at src/isa/riscv64/lower.isle line 374.
                                            return Some(v426);
                                        }
                                        &Opcode::UwidenLow => {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v217 = constructor_put_in_vreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v71 = C::value_type(ctx, v70);
                                            let v218 = C::ty_half_lanes(ctx, v71);
                                            let v219 = v218?;
                                            let v220 = C::vstate_from_type(ctx, v219);
                                            let v221 = C::vstate_mf2(ctx, v220);
                                            let v431 = constructor_rv_vwsubu_wv(
                                                ctx, v167, v217, v169, v221,
                                            );
                                            let v432 = constructor_output_vreg(ctx, v431);
                                            // Rule at src/isa/riscv64/lower.isle line 388.
                                            return Some(v432);
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v217 = constructor_put_in_vreg(ctx, v70);
                                            let v71 = C::value_type(ctx, v70);
                                            let v243 =
                                                constructor_gen_slidedown_half(ctx, v71, v217);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v218 = C::ty_half_lanes(ctx, v71);
                                            let v219 = v218?;
                                            let v220 = C::vstate_from_type(ctx, v219);
                                            let v221 = C::vstate_mf2(ctx, v220);
                                            let v437 = constructor_rv_vwsubu_wv(
                                                ctx, v167, v243, v169, v221,
                                            );
                                            let v438 = constructor_output_vreg(ctx, v437);
                                            // Rule at src/isa/riscv64/lower.isle line 403.
                                            return Some(v438);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v407 = constructor_rv_vsub_vv(ctx, v167, v168, v169, v170);
                            let v408 = constructor_output_vreg(ctx, v407);
                            // Rule at src/isa/riscv64/lower.isle line 333.
                            return Some(v408);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v403 = constructor_imm12_from_negated_value(ctx, v40.1);
                            if let Some(v404) = v403 {
                                let v55 = &constructor_select_addi(ctx, v50);
                                let v56 = C::put_in_reg(ctx, v40.0);
                                let v405 = constructor_alu_rr_imm12(ctx, v55, v56, v404);
                                let v406 = constructor_output_reg(ctx, v405);
                                // Rule at src/isa/riscv64/lower.isle line 328.
                                return Some(v406);
                            }
                        }
                        match v3 {
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v44 = constructor_put_in_xreg(ctx, v40.1);
                                let v398 = constructor_rv_sub(ctx, v43, v44);
                                let v399 = constructor_output_xreg(ctx, v398);
                                // Rule at src/isa/riscv64/lower.isle line 321.
                                return Some(v399);
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v142 = C::put_in_regs(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v401 = constructor_i128_sub(ctx, v142, v400);
                                let v402 = C::output(ctx, v401);
                                // Rule at src/isa/riscv64/lower.isle line 324.
                                return Some(v402);
                            }
                            _ => {}
                        }
                        let v34 = C::fits_in_32(ctx, v3);
                        if let Some(v35) = v34 {
                            let v36 = C::ty_int(ctx, v35);
                            if let Some(v37) = v36 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v44 = constructor_put_in_xreg(ctx, v40.1);
                                let v396 = constructor_rv_subw(ctx, v43, v44);
                                let v397 = constructor_output_xreg(ctx, v396);
                                // Rule at src/isa/riscv64/lower.isle line 318.
                                return Some(v397);
                            }
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v485 =
                                            constructor_rv_vmul_vx(ctx, v167, v173, v169, v170);
                                        let v486 = constructor_output_vreg(ctx, v485);
                                        // Rule at src/isa/riscv64/lower.isle line 486.
                                        return Some(v486);
                                    }
                                }
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v483 =
                                            constructor_rv_vmul_vx(ctx, v197, v198, v169, v170);
                                        let v484 = constructor_output_vreg(ctx, v483);
                                        // Rule at src/isa/riscv64/lower.isle line 483.
                                        return Some(v484);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v481 = constructor_rv_vmul_vv(ctx, v167, v168, v169, v170);
                            let v482 = constructor_output_vreg(ctx, v481);
                            // Rule at src/isa/riscv64/lower.isle line 480.
                            return Some(v482);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v142 = C::put_in_regs(ctx, v40.0);
                            let v144 = C::value_regs_get(ctx, v142, 0x0);
                            let v145 = C::xreg_new(ctx, v144);
                            let v465 = C::value_regs_get(ctx, v142, 0x1);
                            let v466 = C::xreg_new(ctx, v465);
                            let v467 = C::put_in_regs(ctx, v40.1);
                            let v468 = C::value_regs_get(ctx, v467, 0x0);
                            let v469 = C::xreg_new(ctx, v468);
                            let v470 = C::value_regs_get(ctx, v467, 0x1);
                            let v471 = C::xreg_new(ctx, v470);
                            let v472 = constructor_rv_mulhu(ctx, v145, v469);
                            let v473 = constructor_madd(ctx, v145, v471, v472);
                            let v474 = constructor_madd(ctx, v466, v469, v473);
                            let v475 = C::zero_reg(ctx);
                            let v476 = constructor_madd(ctx, v145, v469, v475);
                            let v477 = C::xreg_to_reg(ctx, v476);
                            let v478 = C::xreg_to_reg(ctx, v474);
                            let v479 = C::value_regs(ctx, v477, v478);
                            let v480 = C::output(ctx, v479);
                            // Rule at src/isa/riscv64/lower.isle line 454.
                            return Some(v480);
                        }
                        let v34 = C::fits_in_32(ctx, v3);
                        if let Some(v35) = v34 {
                            let v36 = C::ty_int(ctx, v35);
                            if let Some(v37) = v36 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v44 = constructor_put_in_xreg(ctx, v40.1);
                                let v463 = constructor_rv_mulw(ctx, v43, v44);
                                let v464 = constructor_output_xreg(ctx, v463);
                                // Rule at src/isa/riscv64/lower.isle line 450.
                                return Some(v464);
                            }
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                            let v44 = constructor_put_in_xreg(ctx, v40.1);
                            let v461 = constructor_rv_mul(ctx, v43, v44);
                            let v462 = constructor_output_xreg(ctx, v461);
                            // Rule at src/isa/riscv64/lower.isle line 447.
                            return Some(v462);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v508 =
                                            constructor_rv_vmulhu_vx(ctx, v167, v173, v169, v170);
                                        let v509 = constructor_output_vreg(ctx, v508);
                                        // Rule at src/isa/riscv64/lower.isle line 516.
                                        return Some(v509);
                                    }
                                }
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v506 =
                                            constructor_rv_vmulhu_vx(ctx, v197, v198, v169, v170);
                                        let v507 = constructor_output_vreg(ctx, v506);
                                        // Rule at src/isa/riscv64/lower.isle line 513.
                                        return Some(v507);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v504 = constructor_rv_vmulhu_vv(ctx, v167, v168, v169, v170);
                            let v505 = constructor_output_vreg(ctx, v504);
                            // Rule at src/isa/riscv64/lower.isle line 510.
                            return Some(v505);
                        }
                        if v3 == I64 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                            let v44 = constructor_put_in_xreg(ctx, v40.1);
                            let v502 = constructor_rv_mulhu(ctx, v43, v44);
                            let v503 = constructor_output_xreg(ctx, v502);
                            // Rule at src/isa/riscv64/lower.isle line 507.
                            return Some(v503);
                        }
                        let v34 = C::fits_in_32(ctx, v3);
                        if let Some(v35) = v34 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v497 = constructor_zext(ctx, v40.0);
                            let v498 = constructor_zext(ctx, v40.1);
                            let v499 = constructor_rv_mul(ctx, v497, v498);
                            let v383 = C::ty_bits(ctx, v35);
                            let v384 = C::u8_as_i32(ctx, v383);
                            let v385 = C::imm12_const(ctx, v384);
                            let v500 = constructor_rv_srli(ctx, v499, v385);
                            let v501 = constructor_output_xreg(ctx, v500);
                            // Rule at src/isa/riscv64/lower.isle line 503.
                            return Some(v501);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v495 =
                                            constructor_rv_vmulh_vx(ctx, v167, v173, v169, v170);
                                        let v496 = constructor_output_vreg(ctx, v495);
                                        // Rule at src/isa/riscv64/lower.isle line 499.
                                        return Some(v496);
                                    }
                                }
                            }
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v493 =
                                            constructor_rv_vmulh_vx(ctx, v197, v198, v169, v170);
                                        let v494 = constructor_output_vreg(ctx, v493);
                                        // Rule at src/isa/riscv64/lower.isle line 496.
                                        return Some(v494);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v491 = constructor_rv_vmulh_vv(ctx, v167, v168, v169, v170);
                            let v492 = constructor_output_vreg(ctx, v491);
                            // Rule at src/isa/riscv64/lower.isle line 493.
                            return Some(v492);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v487 = constructor_sext(ctx, v40.0);
                            let v488 = constructor_sext(ctx, v40.1);
                            let v489 = constructor_lower_smlhi(ctx, v50, v487, v488);
                            let v490 = constructor_output_xreg(ctx, v489);
                            // Rule at src/isa/riscv64/lower.isle line 490.
                            return Some(v490);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v198 = constructor_put_in_xreg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2254 =
                                            constructor_rv_vsmul_vx(ctx, v197, v198, v169, v170);
                                        let v2255 = constructor_output_vreg(ctx, v2254);
                                        // Rule at src/isa/riscv64/lower.isle line 2826.
                                        return Some(v2255);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v173 = constructor_put_in_xreg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2252 =
                                            constructor_rv_vsmul_vx(ctx, v167, v173, v169, v170);
                                        let v2253 = constructor_output_vreg(ctx, v2252);
                                        // Rule at src/isa/riscv64/lower.isle line 2823.
                                        return Some(v2253);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2250 = constructor_rv_vsmul_vv(ctx, v167, v168, v169, v170);
                            let v2251 = constructor_output_vreg(ctx, v2250);
                            // Rule at src/isa/riscv64/lower.isle line 2820.
                            return Some(v2251);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v512 = C::has_m(ctx);
                        if v512 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v525 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v517);
                                                if let Some(v526) = v525 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v527 = constructor_rv_divuw(ctx, v43, v44);
                                                    let v528 = constructor_output_xreg(ctx, v527);
                                                    // Rule at src/isa/riscv64/lower.isle line 534.
                                                    return Some(v528);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v498 = constructor_zext(ctx, v40.1);
                                    let v513 = constructor_nonzero_divisor(ctx, v498);
                                    let v522 = constructor_rv_divuw(ctx, v43, v513);
                                    let v523 = constructor_output_xreg(ctx, v522);
                                    // Rule at src/isa/riscv64/lower.isle line 530.
                                    return Some(v523);
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v533 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v517);
                                                if let Some(v534) = v533 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v535 = constructor_rv_divu(ctx, v43, v44);
                                                    let v536 = constructor_output_xreg(ctx, v535);
                                                    // Rule at src/isa/riscv64/lower.isle line 543.
                                                    return Some(v536);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                    let v529 = constructor_nonzero_divisor(ctx, v44);
                                    let v530 = constructor_rv_divu(ctx, v43, v529);
                                    let v531 = constructor_output_xreg(ctx, v530);
                                    // Rule at src/isa/riscv64/lower.isle line 539.
                                    return Some(v531);
                                }
                                _ => {}
                            }
                            let v510 = C::fits_in_16(ctx, v3);
                            if let Some(v511) = v510 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v518 = C::safe_divisor_from_imm64(ctx, v511, v517);
                                            if let Some(v519) = v518 {
                                                let v497 = constructor_zext(ctx, v40.0);
                                                let v498 = constructor_zext(ctx, v40.1);
                                                let v520 = constructor_rv_divuw(ctx, v497, v498);
                                                let v521 = constructor_output_xreg(ctx, v520);
                                                // Rule at src/isa/riscv64/lower.isle line 525.
                                                return Some(v521);
                                            }
                                        }
                                    }
                                }
                                let v497 = constructor_zext(ctx, v40.0);
                                let v498 = constructor_zext(ctx, v40.1);
                                let v513 = constructor_nonzero_divisor(ctx, v498);
                                let v514 = constructor_rv_divuw(ctx, v497, v513);
                                let v515 = constructor_output_xreg(ctx, v514);
                                // Rule at src/isa/riscv64/lower.isle line 521.
                                return Some(v515);
                            }
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v512 = C::has_m(ctx);
                        if v512 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v525 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v517);
                                                if let Some(v526) = v525 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v545 = constructor_rv_divw(ctx, v43, v44);
                                                    let v546 = constructor_output_xreg(ctx, v545);
                                                    // Rule at src/isa/riscv64/lower.isle line 571.
                                                    return Some(v546);
                                                }
                                            }
                                        }
                                    }
                                    let v487 = constructor_sext(ctx, v40.0);
                                    let v488 = constructor_sext(ctx, v40.1);
                                    let v542 = constructor_safe_sdiv_divisor(ctx, I32, v487, v488);
                                    let v543 = constructor_rv_divw(ctx, v487, v542);
                                    let v544 = constructor_output_xreg(ctx, v543);
                                    // Rule at src/isa/riscv64/lower.isle line 566.
                                    return Some(v544);
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v533 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v517);
                                                if let Some(v534) = v533 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v551 = constructor_rv_div(ctx, v43, v44);
                                                    let v552 = constructor_output_xreg(ctx, v551);
                                                    // Rule at src/isa/riscv64/lower.isle line 580.
                                                    return Some(v552);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v74 = constructor_put_in_xreg(ctx, v40.0);
                                    let v547 = constructor_put_in_xreg(ctx, v40.1);
                                    let v548 = constructor_safe_sdiv_divisor(ctx, I64, v74, v547);
                                    let v549 = constructor_rv_div(ctx, v43, v548);
                                    let v550 = constructor_output_xreg(ctx, v549);
                                    // Rule at src/isa/riscv64/lower.isle line 576.
                                    return Some(v550);
                                }
                                _ => {}
                            }
                            let v510 = C::fits_in_16(ctx, v3);
                            if let Some(v511) = v510 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v518 = C::safe_divisor_from_imm64(ctx, v511, v517);
                                            if let Some(v519) = v518 {
                                                let v487 = constructor_sext(ctx, v40.0);
                                                let v488 = constructor_sext(ctx, v40.1);
                                                let v540 = constructor_rv_divw(ctx, v487, v488);
                                                let v541 = constructor_output_xreg(ctx, v540);
                                                // Rule at src/isa/riscv64/lower.isle line 561.
                                                return Some(v541);
                                            }
                                        }
                                    }
                                }
                                let v487 = constructor_sext(ctx, v40.0);
                                let v488 = constructor_sext(ctx, v40.1);
                                let v537 = constructor_safe_sdiv_divisor(ctx, v511, v487, v488);
                                let v538 = constructor_rv_divw(ctx, v487, v537);
                                let v539 = constructor_output_xreg(ctx, v538);
                                // Rule at src/isa/riscv64/lower.isle line 556.
                                return Some(v539);
                            }
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v512 = C::has_m(ctx);
                        if v512 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v525 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v517);
                                                if let Some(v526) = v525 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v559 = constructor_rv_remuw(ctx, v43, v44);
                                                    let v560 = constructor_output_xreg(ctx, v559);
                                                    // Rule at src/isa/riscv64/lower.isle line 618.
                                                    return Some(v560);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v498 = constructor_zext(ctx, v40.1);
                                    let v513 = constructor_nonzero_divisor(ctx, v498);
                                    let v557 = constructor_rv_remuw(ctx, v43, v513);
                                    let v558 = constructor_output_xreg(ctx, v557);
                                    // Rule at src/isa/riscv64/lower.isle line 614.
                                    return Some(v558);
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v533 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v517);
                                                if let Some(v534) = v533 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v563 = constructor_rv_remu(ctx, v43, v44);
                                                    let v564 = constructor_output_xreg(ctx, v563);
                                                    // Rule at src/isa/riscv64/lower.isle line 627.
                                                    return Some(v564);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                    let v529 = constructor_nonzero_divisor(ctx, v44);
                                    let v561 = constructor_rv_remu(ctx, v43, v529);
                                    let v562 = constructor_output_xreg(ctx, v561);
                                    // Rule at src/isa/riscv64/lower.isle line 623.
                                    return Some(v562);
                                }
                                _ => {}
                            }
                            let v510 = C::fits_in_16(ctx, v3);
                            if let Some(v511) = v510 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v518 = C::safe_divisor_from_imm64(ctx, v511, v517);
                                            if let Some(v519) = v518 {
                                                let v497 = constructor_zext(ctx, v40.0);
                                                let v498 = constructor_zext(ctx, v40.1);
                                                let v555 = constructor_rv_remuw(ctx, v497, v498);
                                                let v556 = constructor_output_xreg(ctx, v555);
                                                // Rule at src/isa/riscv64/lower.isle line 609.
                                                return Some(v556);
                                            }
                                        }
                                    }
                                }
                                let v497 = constructor_zext(ctx, v40.0);
                                let v498 = constructor_zext(ctx, v40.1);
                                let v513 = constructor_nonzero_divisor(ctx, v498);
                                let v553 = constructor_rv_remuw(ctx, v497, v513);
                                let v554 = constructor_output_xreg(ctx, v553);
                                // Rule at src/isa/riscv64/lower.isle line 605.
                                return Some(v554);
                            }
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v512 = C::has_m(ctx);
                        if v512 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v525 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v517);
                                                if let Some(v526) = v525 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v572 = constructor_rv_remw(ctx, v43, v44);
                                                    let v573 = constructor_output_xreg(ctx, v572);
                                                    // Rule at src/isa/riscv64/lower.isle line 647.
                                                    return Some(v573);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v488 = constructor_sext(ctx, v40.1);
                                    let v565 = constructor_nonzero_divisor(ctx, v488);
                                    let v570 = constructor_rv_remw(ctx, v43, v565);
                                    let v571 = constructor_output_xreg(ctx, v570);
                                    // Rule at src/isa/riscv64/lower.isle line 643.
                                    return Some(v571);
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v533 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v517);
                                                if let Some(v534) = v533 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v576 = constructor_rv_rem(ctx, v43, v44);
                                                    let v577 = constructor_output_xreg(ctx, v576);
                                                    // Rule at src/isa/riscv64/lower.isle line 656.
                                                    return Some(v577);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v44 = constructor_put_in_xreg(ctx, v40.1);
                                    let v529 = constructor_nonzero_divisor(ctx, v44);
                                    let v574 = constructor_rv_rem(ctx, v43, v529);
                                    let v575 = constructor_output_xreg(ctx, v574);
                                    // Rule at src/isa/riscv64/lower.isle line 652.
                                    return Some(v575);
                                }
                                _ => {}
                            }
                            let v510 = C::fits_in_16(ctx, v3);
                            if let Some(v511) = v510 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v518 = C::safe_divisor_from_imm64(ctx, v511, v517);
                                            if let Some(v519) = v518 {
                                                let v487 = constructor_sext(ctx, v40.0);
                                                let v488 = constructor_sext(ctx, v40.1);
                                                let v568 = constructor_rv_remw(ctx, v487, v488);
                                                let v569 = constructor_output_xreg(ctx, v568);
                                                // Rule at src/isa/riscv64/lower.isle line 638.
                                                return Some(v569);
                                            }
                                        }
                                    }
                                }
                                let v487 = constructor_sext(ctx, v40.0);
                                let v488 = constructor_sext(ctx, v40.1);
                                let v565 = constructor_nonzero_divisor(ctx, v488);
                                let v566 = constructor_rv_remw(ctx, v487, v565);
                                let v567 = constructor_output_xreg(ctx, v566);
                                // Rule at src/isa/riscv64/lower.isle line 634.
                                return Some(v567);
                            }
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v656 = C::has_zbs(ctx);
                        if v656 == true {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                match v79 {
                                    &InstructionData::Binary {
                                        opcode: ref v103,
                                        args: ref v104,
                                    } => {
                                        match v103 {
                                            &Opcode::Ushr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v66 = C::def_inst(ctx, v40.1);
                                                        if let Some(v67) = v66 {
                                                            let v68 = &C::inst_data(ctx, v67);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v516,
                                                                imm: v517,
                                                            } = v68
                                                            {
                                                                if let &Opcode::Iconst = v516 {
                                                                    let v675 = C::u64_from_imm64(
                                                                        ctx, v517,
                                                                    );
                                                                    if v675 == 0x1 {
                                                                        let v105 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v104,
                                                                            );
                                                                        let v703 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v105.1,
                                                                            );
                                                                        if let Some(v704) = v703 {
                                                                            let v705 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v704,
                                                                                );
                                                                            if let Some(v706) = v705
                                                                            {
                                                                                let v687 = constructor_put_in_xreg(ctx, v105.0);
                                                                                let v708 =
                                                                                    C::imm12_and(
                                                                                        ctx, v706,
                                                                                        0x1F,
                                                                                    );
                                                                                let v709 = constructor_rv_bexti(ctx, v687, v708);
                                                                                let v710 = constructor_output_xreg(ctx, v709);
                                                                                // Rule at src/isa/riscv64/lower.isle line 779.
                                                                                return Some(v710);
                                                                            }
                                                                        }
                                                                        let v687 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.0,
                                                                            );
                                                                        let v688 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.1,
                                                                            );
                                                                        let v690 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v691 =
                                                                            constructor_rv_andi(
                                                                                ctx, v688, v690,
                                                                            );
                                                                        let v692 =
                                                                            constructor_rv_bext(
                                                                                ctx, v687, v691,
                                                                            );
                                                                        let v693 =
                                                                            constructor_output_xreg(
                                                                                ctx, v692,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 753.
                                                                        return Some(v693);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v66 = C::def_inst(ctx, v40.1);
                                                        if let Some(v67) = v66 {
                                                            let v68 = &C::inst_data(ctx, v67);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v516,
                                                                imm: v517,
                                                            } = v68
                                                            {
                                                                if let &Opcode::Iconst = v516 {
                                                                    let v675 = C::u64_from_imm64(
                                                                        ctx, v517,
                                                                    );
                                                                    if v675 == 0x1 {
                                                                        let v105 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v104,
                                                                            );
                                                                        let v703 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v105.1,
                                                                            );
                                                                        if let Some(v704) = v703 {
                                                                            let v705 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v704,
                                                                                );
                                                                            if let Some(v706) = v705
                                                                            {
                                                                                let v687 = constructor_put_in_xreg(ctx, v105.0);
                                                                                let v712 =
                                                                                    C::imm12_and(
                                                                                        ctx, v706,
                                                                                        0x3F,
                                                                                    );
                                                                                let v713 = constructor_rv_bexti(ctx, v687, v712);
                                                                                let v714 = constructor_output_xreg(ctx, v713);
                                                                                // Rule at src/isa/riscv64/lower.isle line 785.
                                                                                return Some(v714);
                                                                            }
                                                                        }
                                                                        let v687 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.0,
                                                                            );
                                                                        let v688 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.1,
                                                                            );
                                                                        let v699 =
                                                                            constructor_rv_bext(
                                                                                ctx, v687, v688,
                                                                            );
                                                                        let v700 =
                                                                            constructor_output_xreg(
                                                                                ctx, v699,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 766.
                                                                        return Some(v700);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            &Opcode::Sshr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v66 = C::def_inst(ctx, v40.1);
                                                        if let Some(v67) = v66 {
                                                            let v68 = &C::inst_data(ctx, v67);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v516,
                                                                imm: v517,
                                                            } = v68
                                                            {
                                                                if let &Opcode::Iconst = v516 {
                                                                    let v675 = C::u64_from_imm64(
                                                                        ctx, v517,
                                                                    );
                                                                    if v675 == 0x1 {
                                                                        let v105 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v104,
                                                                            );
                                                                        let v703 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v105.1,
                                                                            );
                                                                        if let Some(v704) = v703 {
                                                                            let v705 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v704,
                                                                                );
                                                                            if let Some(v706) = v705
                                                                            {
                                                                                let v687 = constructor_put_in_xreg(ctx, v105.0);
                                                                                let v708 =
                                                                                    C::imm12_and(
                                                                                        ctx, v706,
                                                                                        0x1F,
                                                                                    );
                                                                                let v709 = constructor_rv_bexti(ctx, v687, v708);
                                                                                let v710 = constructor_output_xreg(ctx, v709);
                                                                                // Rule at src/isa/riscv64/lower.isle line 782.
                                                                                return Some(v710);
                                                                            }
                                                                        }
                                                                        let v687 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.0,
                                                                            );
                                                                        let v688 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.1,
                                                                            );
                                                                        let v690 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v691 =
                                                                            constructor_rv_andi(
                                                                                ctx, v688, v690,
                                                                            );
                                                                        let v692 =
                                                                            constructor_rv_bext(
                                                                                ctx, v687, v691,
                                                                            );
                                                                        let v693 =
                                                                            constructor_output_xreg(
                                                                                ctx, v692,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 756.
                                                                        return Some(v693);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v66 = C::def_inst(ctx, v40.1);
                                                        if let Some(v67) = v66 {
                                                            let v68 = &C::inst_data(ctx, v67);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v516,
                                                                imm: v517,
                                                            } = v68
                                                            {
                                                                if let &Opcode::Iconst = v516 {
                                                                    let v675 = C::u64_from_imm64(
                                                                        ctx, v517,
                                                                    );
                                                                    if v675 == 0x1 {
                                                                        let v105 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v104,
                                                                            );
                                                                        let v703 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v105.1,
                                                                            );
                                                                        if let Some(v704) = v703 {
                                                                            let v705 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v704,
                                                                                );
                                                                            if let Some(v706) = v705
                                                                            {
                                                                                let v687 = constructor_put_in_xreg(ctx, v105.0);
                                                                                let v712 =
                                                                                    C::imm12_and(
                                                                                        ctx, v706,
                                                                                        0x3F,
                                                                                    );
                                                                                let v713 = constructor_rv_bexti(ctx, v687, v712);
                                                                                let v714 = constructor_output_xreg(ctx, v713);
                                                                                // Rule at src/isa/riscv64/lower.isle line 788.
                                                                                return Some(v714);
                                                                            }
                                                                        }
                                                                        let v687 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.0,
                                                                            );
                                                                        let v688 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v105.1,
                                                                            );
                                                                        let v699 =
                                                                            constructor_rv_bext(
                                                                                ctx, v687, v688,
                                                                            );
                                                                        let v700 =
                                                                            constructor_output_xreg(
                                                                                ctx, v699,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 769.
                                                                        return Some(v700);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v680,
                                        imm: v681,
                                    } => {
                                        if let &Opcode::Iconst = v680 {
                                            let v3 = C::value_type(ctx, v2);
                                            match v3 {
                                                I32 => {
                                                    let v66 = C::def_inst(ctx, v40.1);
                                                    if let Some(v67) = v66 {
                                                        let v68 = &C::inst_data(ctx, v67);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v86,
                                                            args: ref v87,
                                                        } = v68
                                                        {
                                                            match v86 {
                                                                &Opcode::Ushr => {
                                                                    let v682 = C::u64_from_imm64(
                                                                        ctx, v681,
                                                                    );
                                                                    if v682 == 0x1 {
                                                                        let v88 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v87,
                                                                            );
                                                                        let v694 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.0,
                                                                            );
                                                                        let v695 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.1,
                                                                            );
                                                                        let v690 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v696 =
                                                                            constructor_rv_andi(
                                                                                ctx, v695, v690,
                                                                            );
                                                                        let v697 =
                                                                            constructor_rv_bext(
                                                                                ctx, v694, v696,
                                                                            );
                                                                        let v698 =
                                                                            constructor_output_xreg(
                                                                                ctx, v697,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 759.
                                                                        return Some(v698);
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v682 = C::u64_from_imm64(
                                                                        ctx, v681,
                                                                    );
                                                                    if v682 == 0x1 {
                                                                        let v88 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v87,
                                                                            );
                                                                        let v694 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.0,
                                                                            );
                                                                        let v695 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.1,
                                                                            );
                                                                        let v690 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v696 =
                                                                            constructor_rv_andi(
                                                                                ctx, v695, v690,
                                                                            );
                                                                        let v697 =
                                                                            constructor_rv_bext(
                                                                                ctx, v694, v696,
                                                                            );
                                                                        let v698 =
                                                                            constructor_output_xreg(
                                                                                ctx, v697,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 762.
                                                                        return Some(v698);
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                I64 => {
                                                    let v66 = C::def_inst(ctx, v40.1);
                                                    if let Some(v67) = v66 {
                                                        let v68 = &C::inst_data(ctx, v67);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v86,
                                                            args: ref v87,
                                                        } = v68
                                                        {
                                                            match v86 {
                                                                &Opcode::Ushr => {
                                                                    let v682 = C::u64_from_imm64(
                                                                        ctx, v681,
                                                                    );
                                                                    if v682 == 0x1 {
                                                                        let v88 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v87,
                                                                            );
                                                                        let v694 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.0,
                                                                            );
                                                                        let v695 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.1,
                                                                            );
                                                                        let v701 =
                                                                            constructor_rv_bext(
                                                                                ctx, v694, v695,
                                                                            );
                                                                        let v702 =
                                                                            constructor_output_xreg(
                                                                                ctx, v701,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 772.
                                                                        return Some(v702);
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v682 = C::u64_from_imm64(
                                                                        ctx, v681,
                                                                    );
                                                                    if v682 == 0x1 {
                                                                        let v88 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v87,
                                                                            );
                                                                        let v694 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.0,
                                                                            );
                                                                        let v695 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v88.1,
                                                                            );
                                                                        let v701 =
                                                                            constructor_rv_bext(
                                                                                ctx, v694, v695,
                                                                            );
                                                                        let v702 =
                                                                            constructor_output_xreg(
                                                                                ctx, v701,
                                                                            );
                                                                        // Rule at src/isa/riscv64/lower.isle line 775.
                                                                        return Some(v702);
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v578 = C::fits_in_64(ctx, v3);
                                            if let Some(v579) = v578 {
                                                let v682 = C::u64_from_imm64(ctx, v681);
                                                let v683 = C::bclr_imm(ctx, v579, v682);
                                                if let Some(v684) = v683 {
                                                    let v598 = constructor_put_in_xreg(ctx, v40.1);
                                                    let v685 =
                                                        constructor_rv_bclri(ctx, v598, v684);
                                                    let v686 = constructor_output_xreg(ctx, v685);
                                                    // Rule at src/isa/riscv64/lower.isle line 743.
                                                    return Some(v686);
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } = v68
                                {
                                    if let &Opcode::Iconst = v516 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v578 = C::fits_in_64(ctx, v3);
                                        if let Some(v579) = v578 {
                                            let v675 = C::u64_from_imm64(ctx, v517);
                                            let v676 = C::bclr_imm(ctx, v579, v675);
                                            if let Some(v677) = v676 {
                                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                let v678 = constructor_rv_bclri(ctx, v43, v677);
                                                let v679 = constructor_output_xreg(ctx, v678);
                                                // Rule at src/isa/riscv64/lower.isle line 739.
                                                return Some(v679);
                                            }
                                        }
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I64 {
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Bnot = v80 {
                                            let v201 = C::def_inst(ctx, v81);
                                            if let Some(v202) = v201 {
                                                let v203 = &C::inst_data(ctx, v202);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v348,
                                                    args: ref v349,
                                                } = v203
                                                {
                                                    if let &Opcode::Ishl = v348 {
                                                        let v350 =
                                                            C::unpack_value_array_2(ctx, v349);
                                                        let v665 = C::i64_from_iconst(ctx, v350.0);
                                                        if let Some(v666) = v665 {
                                                            if v666 == 0x1 {
                                                                let v598 = constructor_put_in_xreg(
                                                                    ctx, v40.1,
                                                                );
                                                                let v667 = constructor_put_in_xreg(
                                                                    ctx, v350.1,
                                                                );
                                                                let v673 = constructor_rv_bclr(
                                                                    ctx, v598, v667,
                                                                );
                                                                let v674 = constructor_output_xreg(
                                                                    ctx, v673,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 735.
                                                                return Some(v674);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v176 = C::def_inst(ctx, v70);
                                            if let Some(v177) = v176 {
                                                let v178 = &C::inst_data(ctx, v177);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v322,
                                                    args: ref v323,
                                                } = v178
                                                {
                                                    if let &Opcode::Ishl = v322 {
                                                        let v324 =
                                                            C::unpack_value_array_2(ctx, v323);
                                                        let v654 = C::i64_from_iconst(ctx, v324.0);
                                                        if let Some(v655) = v654 {
                                                            if v655 == 0x1 {
                                                                let v43 = constructor_put_in_xreg(
                                                                    ctx, v40.0,
                                                                );
                                                                let v657 = constructor_put_in_xreg(
                                                                    ctx, v324.1,
                                                                );
                                                                let v671 = constructor_rv_bclr(
                                                                    ctx, v43, v657,
                                                                );
                                                                let v672 = constructor_output_xreg(
                                                                    ctx, v671,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 732.
                                                                return Some(v672);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v34 = C::fits_in_32(ctx, v3);
                            if let Some(v35) = v34 {
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Bnot = v80 {
                                            let v201 = C::def_inst(ctx, v81);
                                            if let Some(v202) = v201 {
                                                let v203 = &C::inst_data(ctx, v202);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v348,
                                                    args: ref v349,
                                                } = v203
                                                {
                                                    if let &Opcode::Ishl = v348 {
                                                        let v350 =
                                                            C::unpack_value_array_2(ctx, v349);
                                                        let v665 = C::i64_from_iconst(ctx, v350.0);
                                                        if let Some(v666) = v665 {
                                                            if v666 == 0x1 {
                                                                let v598 = constructor_put_in_xreg(
                                                                    ctx, v40.1,
                                                                );
                                                                let v667 = constructor_put_in_xreg(
                                                                    ctx, v350.1,
                                                                );
                                                                let v383 = C::ty_bits(ctx, v35);
                                                                let v659 =
                                                                    C::u8_sub(ctx, v383, 0x1);
                                                                let v660 = C::u8_as_i32(ctx, v659);
                                                                let v661 =
                                                                    C::imm12_const(ctx, v660);
                                                                let v668 = constructor_rv_andi(
                                                                    ctx, v667, v661,
                                                                );
                                                                let v669 = constructor_rv_bclr(
                                                                    ctx, v598, v668,
                                                                );
                                                                let v670 = constructor_output_xreg(
                                                                    ctx, v669,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 728.
                                                                return Some(v670);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v176 = C::def_inst(ctx, v70);
                                            if let Some(v177) = v176 {
                                                let v178 = &C::inst_data(ctx, v177);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v322,
                                                    args: ref v323,
                                                } = v178
                                                {
                                                    if let &Opcode::Ishl = v322 {
                                                        let v324 =
                                                            C::unpack_value_array_2(ctx, v323);
                                                        let v654 = C::i64_from_iconst(ctx, v324.0);
                                                        if let Some(v655) = v654 {
                                                            if v655 == 0x1 {
                                                                let v43 = constructor_put_in_xreg(
                                                                    ctx, v40.0,
                                                                );
                                                                let v657 = constructor_put_in_xreg(
                                                                    ctx, v324.1,
                                                                );
                                                                let v383 = C::ty_bits(ctx, v35);
                                                                let v659 =
                                                                    C::u8_sub(ctx, v383, 0x1);
                                                                let v660 = C::u8_as_i32(ctx, v659);
                                                                let v661 =
                                                                    C::imm12_const(ctx, v660);
                                                                let v662 = constructor_rv_andi(
                                                                    ctx, v657, v661,
                                                                );
                                                                let v663 = constructor_rv_bclr(
                                                                    ctx, v43, v662,
                                                                );
                                                                let v664 = constructor_output_xreg(
                                                                    ctx, v663,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 725.
                                                                return Some(v664);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v652 = constructor_rv_vand_vi(ctx, v197, v214, v169, v170);
                                let v653 = constructor_output_vreg(ctx, v652);
                                // Rule at src/isa/riscv64/lower.isle line 719.
                                return Some(v653);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v650 = constructor_rv_vand_vi(ctx, v167, v194, v169, v170);
                                let v651 = constructor_output_vreg(ctx, v650);
                                // Rule at src/isa/riscv64/lower.isle line 715.
                                return Some(v651);
                            }
                            let v644 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v645) = v644 {
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Splat = v80 {
                                            let v197 = constructor_put_in_vreg(ctx, v40.1);
                                            let v198 = constructor_put_in_xreg(ctx, v81);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v648 =
                                                constructor_rv_vand_vx(ctx, v197, v198, v169, v170);
                                            let v649 = constructor_output_vreg(ctx, v648);
                                            // Rule at src/isa/riscv64/lower.isle line 711.
                                            return Some(v649);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Splat = v69 {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v173 = constructor_put_in_xreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v646 =
                                                constructor_rv_vand_vx(ctx, v167, v173, v169, v170);
                                            let v647 = constructor_output_vreg(ctx, v646);
                                            // Rule at src/isa/riscv64/lower.isle line 707.
                                            return Some(v647);
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v642 = constructor_rv_vand_vv(ctx, v167, v168, v169, v170);
                            let v643 = constructor_output_vreg(ctx, v642);
                            // Rule at src/isa/riscv64/lower.isle line 704.
                            return Some(v643);
                        }
                        let v608 = C::has_zbb(ctx);
                        if v608 == true {
                            if v3 == I128 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Bnot = v80 {
                                            let v625 = C::put_in_regs(ctx, v40.1);
                                            let v626 = C::value_regs_get(ctx, v625, 0x0);
                                            let v627 = C::xreg_new(ctx, v626);
                                            let v628 = C::put_in_regs(ctx, v81);
                                            let v629 = C::value_regs_get(ctx, v628, 0x0);
                                            let v630 = C::xreg_new(ctx, v629);
                                            let v631 = constructor_rv_andn(ctx, v627, v630);
                                            let v150 = C::put_in_regs(ctx, v40.1);
                                            let v632 = C::value_regs_get(ctx, v150, 0x1);
                                            let v633 = C::xreg_new(ctx, v632);
                                            let v634 = C::put_in_regs(ctx, v81);
                                            let v635 = C::value_regs_get(ctx, v634, 0x1);
                                            let v636 = C::xreg_new(ctx, v635);
                                            let v637 = constructor_rv_andn(ctx, v633, v636);
                                            let v638 = C::xreg_to_reg(ctx, v631);
                                            let v639 = C::xreg_to_reg(ctx, v637);
                                            let v640 = C::value_regs(ctx, v638, v639);
                                            let v641 = C::output(ctx, v640);
                                            // Rule at src/isa/riscv64/lower.isle line 698.
                                            return Some(v641);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v142 = C::put_in_regs(ctx, v40.0);
                                            let v144 = C::value_regs_get(ctx, v142, 0x0);
                                            let v145 = C::xreg_new(ctx, v144);
                                            let v613 = C::put_in_regs(ctx, v70);
                                            let v614 = C::value_regs_get(ctx, v613, 0x0);
                                            let v615 = C::xreg_new(ctx, v614);
                                            let v616 = constructor_rv_andn(ctx, v145, v615);
                                            let v584 = C::put_in_regs(ctx, v40.0);
                                            let v585 = C::value_regs_get(ctx, v584, 0x1);
                                            let v586 = C::xreg_new(ctx, v585);
                                            let v617 = C::put_in_regs(ctx, v70);
                                            let v618 = C::value_regs_get(ctx, v617, 0x1);
                                            let v619 = C::xreg_new(ctx, v618);
                                            let v620 = constructor_rv_andn(ctx, v586, v619);
                                            let v621 = C::xreg_to_reg(ctx, v616);
                                            let v622 = C::xreg_to_reg(ctx, v620);
                                            let v623 = C::value_regs(ctx, v621, v622);
                                            let v624 = C::output(ctx, v623);
                                            // Rule at src/isa/riscv64/lower.isle line 692.
                                            return Some(v624);
                                        }
                                    }
                                }
                            }
                            let v578 = C::fits_in_64(ctx, v3);
                            if let Some(v579) = v578 {
                                let v594 = C::ty_int(ctx, v579);
                                if let Some(v595) = v594 {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Unary {
                                            opcode: ref v80,
                                            arg: v81,
                                        } = v79
                                        {
                                            if let &Opcode::Bnot = v80 {
                                                let v598 = constructor_put_in_xreg(ctx, v40.1);
                                                let v198 = constructor_put_in_xreg(ctx, v81);
                                                let v611 = constructor_rv_andn(ctx, v598, v198);
                                                let v612 = constructor_output_xreg(ctx, v611);
                                                // Rule at src/isa/riscv64/lower.isle line 688.
                                                return Some(v612);
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Unary {
                                            opcode: ref v69,
                                            arg: v70,
                                        } = v68
                                        {
                                            if let &Opcode::Bnot = v69 {
                                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                let v173 = constructor_put_in_xreg(ctx, v70);
                                                let v609 = constructor_rv_andn(ctx, v43, v173);
                                                let v610 = constructor_output_xreg(ctx, v609);
                                                // Rule at src/isa/riscv64/lower.isle line 684.
                                                return Some(v610);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v606 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v604,
                                v605,
                                v602,
                            );
                            let v607 = constructor_output_freg(ctx, v606);
                            // Rule at src/isa/riscv64/lower.isle line 677.
                            return Some(v607);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v594 = C::ty_int(ctx, v579);
                            if let Some(v595) = v594 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v59 = C::i64_from_iconst(ctx, v40.0);
                                if let Some(v60) = v59 {
                                    let v61 = C::imm12_from_i64(ctx, v60);
                                    if let Some(v62) = v61 {
                                        let v598 = constructor_put_in_xreg(ctx, v40.1);
                                        let v599 = constructor_rv_andi(ctx, v598, v62);
                                        let v600 = constructor_output_xreg(ctx, v599);
                                        // Rule at src/isa/riscv64/lower.isle line 674.
                                        return Some(v600);
                                    }
                                }
                                let v51 = C::i64_from_iconst(ctx, v40.1);
                                if let Some(v52) = v51 {
                                    let v53 = C::imm12_from_i64(ctx, v52);
                                    if let Some(v54) = v53 {
                                        let v43 = constructor_put_in_xreg(ctx, v40.0);
                                        let v596 = constructor_rv_andi(ctx, v43, v54);
                                        let v597 = constructor_output_xreg(ctx, v596);
                                        // Rule at src/isa/riscv64/lower.isle line 671.
                                        return Some(v597);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v142 = C::put_in_regs(ctx, v40.0);
                            let v144 = C::value_regs_get(ctx, v142, 0x0);
                            let v145 = C::xreg_new(ctx, v144);
                            let v146 = C::put_in_regs(ctx, v40.1);
                            let v147 = C::value_regs_get(ctx, v146, 0x0);
                            let v148 = C::xreg_new(ctx, v147);
                            let v582 = constructor_rv_and(ctx, v145, v148);
                            let v584 = C::put_in_regs(ctx, v40.0);
                            let v585 = C::value_regs_get(ctx, v584, 0x1);
                            let v586 = C::xreg_new(ctx, v585);
                            let v587 = C::put_in_regs(ctx, v40.1);
                            let v588 = C::value_regs_get(ctx, v587, 0x1);
                            let v589 = C::xreg_new(ctx, v588);
                            let v590 = constructor_rv_and(ctx, v586, v589);
                            let v583 = C::xreg_to_reg(ctx, v582);
                            let v591 = C::xreg_to_reg(ctx, v590);
                            let v592 = C::value_regs(ctx, v583, v591);
                            let v593 = C::output(ctx, v592);
                            // Rule at src/isa/riscv64/lower.isle line 665.
                            return Some(v593);
                        }
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                            let v44 = constructor_put_in_xreg(ctx, v40.1);
                            let v580 = constructor_rv_and(ctx, v43, v44);
                            let v581 = constructor_output_xreg(ctx, v580);
                            // Rule at src/isa/riscv64/lower.isle line 662.
                            return Some(v581);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v656 = C::has_zbs(ctx);
                        if v656 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v578 = C::fits_in_64(ctx, v3);
                            if let Some(v579) = v578 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v680,
                                        imm: v681,
                                    } = v79
                                    {
                                        if let &Opcode::Iconst = v680 {
                                            let v682 = C::u64_from_imm64(ctx, v681);
                                            let v766 = C::bseti_imm(ctx, v682);
                                            if let Some(v767) = v766 {
                                                let v598 = constructor_put_in_xreg(ctx, v40.1);
                                                let v768 = constructor_rv_bseti(ctx, v598, v767);
                                                let v769 = constructor_output_xreg(ctx, v768);
                                                // Rule at src/isa/riscv64/lower.isle line 869.
                                                return Some(v769);
                                            }
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v675 = C::u64_from_imm64(ctx, v517);
                                            let v762 = C::bseti_imm(ctx, v675);
                                            if let Some(v763) = v762 {
                                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                let v764 = constructor_rv_bseti(ctx, v43, v763);
                                                let v765 = constructor_output_xreg(ctx, v764);
                                                // Rule at src/isa/riscv64/lower.isle line 865.
                                                return Some(v765);
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Binary {
                                            opcode: ref v103,
                                            args: ref v104,
                                        } = v79
                                        {
                                            if let &Opcode::Ishl = v103 {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v754 = C::i64_from_iconst(ctx, v105.0);
                                                if let Some(v755) = v754 {
                                                    if v755 == 0x1 {
                                                        let v598 =
                                                            constructor_put_in_xreg(ctx, v40.1);
                                                        let v688 =
                                                            constructor_put_in_xreg(ctx, v105.1);
                                                        let v690 = C::imm12_const(ctx, 0x1F);
                                                        let v691 =
                                                            constructor_rv_andi(ctx, v688, v690);
                                                        let v756 =
                                                            constructor_rv_bset(ctx, v598, v691);
                                                        let v757 =
                                                            constructor_output_xreg(ctx, v756);
                                                        // Rule at src/isa/riscv64/lower.isle line 854.
                                                        return Some(v757);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Binary {
                                            opcode: ref v86,
                                            args: ref v87,
                                        } = v68
                                        {
                                            if let &Opcode::Ishl = v86 {
                                                let v88 = C::unpack_value_array_2(ctx, v87);
                                                let v750 = C::i64_from_iconst(ctx, v88.0);
                                                if let Some(v751) = v750 {
                                                    if v751 == 0x1 {
                                                        let v43 =
                                                            constructor_put_in_xreg(ctx, v40.0);
                                                        let v695 =
                                                            constructor_put_in_xreg(ctx, v88.1);
                                                        let v690 = C::imm12_const(ctx, 0x1F);
                                                        let v696 =
                                                            constructor_rv_andi(ctx, v695, v690);
                                                        let v752 =
                                                            constructor_rv_bset(ctx, v43, v696);
                                                        let v753 =
                                                            constructor_output_xreg(ctx, v752);
                                                        // Rule at src/isa/riscv64/lower.isle line 851.
                                                        return Some(v753);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Binary {
                                            opcode: ref v103,
                                            args: ref v104,
                                        } = v79
                                        {
                                            if let &Opcode::Ishl = v103 {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v754 = C::i64_from_iconst(ctx, v105.0);
                                                if let Some(v755) = v754 {
                                                    if v755 == 0x1 {
                                                        let v598 =
                                                            constructor_put_in_xreg(ctx, v40.1);
                                                        let v688 =
                                                            constructor_put_in_xreg(ctx, v105.1);
                                                        let v760 =
                                                            constructor_rv_bset(ctx, v598, v688);
                                                        let v761 =
                                                            constructor_output_xreg(ctx, v760);
                                                        // Rule at src/isa/riscv64/lower.isle line 861.
                                                        return Some(v761);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Binary {
                                            opcode: ref v86,
                                            args: ref v87,
                                        } = v68
                                        {
                                            if let &Opcode::Ishl = v86 {
                                                let v88 = C::unpack_value_array_2(ctx, v87);
                                                let v750 = C::i64_from_iconst(ctx, v88.0);
                                                if let Some(v751) = v750 {
                                                    if v751 == 0x1 {
                                                        let v43 =
                                                            constructor_put_in_xreg(ctx, v40.0);
                                                        let v695 =
                                                            constructor_put_in_xreg(ctx, v88.1);
                                                        let v758 =
                                                            constructor_rv_bset(ctx, v43, v695);
                                                        let v759 =
                                                            constructor_output_xreg(ctx, v758);
                                                        // Rule at src/isa/riscv64/lower.isle line 858.
                                                        return Some(v759);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v748 = constructor_rv_vor_vi(ctx, v197, v214, v169, v170);
                                let v749 = constructor_output_vreg(ctx, v748);
                                // Rule at src/isa/riscv64/lower.isle line 845.
                                return Some(v749);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v746 = constructor_rv_vor_vi(ctx, v167, v194, v169, v170);
                                let v747 = constructor_output_vreg(ctx, v746);
                                // Rule at src/isa/riscv64/lower.isle line 841.
                                return Some(v747);
                            }
                            let v644 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v645) = v644 {
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Splat = v80 {
                                            let v197 = constructor_put_in_vreg(ctx, v40.1);
                                            let v198 = constructor_put_in_xreg(ctx, v81);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v744 =
                                                constructor_rv_vor_vx(ctx, v197, v198, v169, v170);
                                            let v745 = constructor_output_vreg(ctx, v744);
                                            // Rule at src/isa/riscv64/lower.isle line 837.
                                            return Some(v745);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Splat = v69 {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v173 = constructor_put_in_xreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v742 =
                                                constructor_rv_vor_vx(ctx, v167, v173, v169, v170);
                                            let v743 = constructor_output_vreg(ctx, v742);
                                            // Rule at src/isa/riscv64/lower.isle line 833.
                                            return Some(v743);
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v740 = constructor_rv_vor_vv(ctx, v167, v168, v169, v170);
                            let v741 = constructor_output_vreg(ctx, v740);
                            // Rule at src/isa/riscv64/lower.isle line 830.
                            return Some(v741);
                        }
                        let v608 = C::has_zbb(ctx);
                        if v608 == true {
                            if v3 == I128 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Bnot = v80 {
                                            let v625 = C::put_in_regs(ctx, v40.1);
                                            let v626 = C::value_regs_get(ctx, v625, 0x0);
                                            let v627 = C::xreg_new(ctx, v626);
                                            let v628 = C::put_in_regs(ctx, v81);
                                            let v629 = C::value_regs_get(ctx, v628, 0x0);
                                            let v630 = C::xreg_new(ctx, v629);
                                            let v734 = constructor_rv_orn(ctx, v627, v630);
                                            let v150 = C::put_in_regs(ctx, v40.1);
                                            let v632 = C::value_regs_get(ctx, v150, 0x1);
                                            let v633 = C::xreg_new(ctx, v632);
                                            let v634 = C::put_in_regs(ctx, v81);
                                            let v635 = C::value_regs_get(ctx, v634, 0x1);
                                            let v636 = C::xreg_new(ctx, v635);
                                            let v735 = constructor_rv_orn(ctx, v633, v636);
                                            let v736 = C::xreg_to_reg(ctx, v734);
                                            let v737 = C::xreg_to_reg(ctx, v735);
                                            let v738 = C::value_regs(ctx, v736, v737);
                                            let v739 = C::output(ctx, v738);
                                            // Rule at src/isa/riscv64/lower.isle line 824.
                                            return Some(v739);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Bnot = v69 {
                                            let v142 = C::put_in_regs(ctx, v40.0);
                                            let v144 = C::value_regs_get(ctx, v142, 0x0);
                                            let v145 = C::xreg_new(ctx, v144);
                                            let v613 = C::put_in_regs(ctx, v70);
                                            let v614 = C::value_regs_get(ctx, v613, 0x0);
                                            let v615 = C::xreg_new(ctx, v614);
                                            let v728 = constructor_rv_orn(ctx, v145, v615);
                                            let v584 = C::put_in_regs(ctx, v40.0);
                                            let v585 = C::value_regs_get(ctx, v584, 0x1);
                                            let v586 = C::xreg_new(ctx, v585);
                                            let v617 = C::put_in_regs(ctx, v70);
                                            let v618 = C::value_regs_get(ctx, v617, 0x1);
                                            let v619 = C::xreg_new(ctx, v618);
                                            let v729 = constructor_rv_orn(ctx, v586, v619);
                                            let v730 = C::xreg_to_reg(ctx, v728);
                                            let v731 = C::xreg_to_reg(ctx, v729);
                                            let v732 = C::value_regs(ctx, v730, v731);
                                            let v733 = C::output(ctx, v732);
                                            // Rule at src/isa/riscv64/lower.isle line 818.
                                            return Some(v733);
                                        }
                                    }
                                }
                            }
                            let v578 = C::fits_in_64(ctx, v3);
                            if let Some(v579) = v578 {
                                let v594 = C::ty_int(ctx, v579);
                                if let Some(v595) = v594 {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Unary {
                                            opcode: ref v80,
                                            arg: v81,
                                        } = v79
                                        {
                                            if let &Opcode::Bnot = v80 {
                                                let v598 = constructor_put_in_xreg(ctx, v40.1);
                                                let v198 = constructor_put_in_xreg(ctx, v81);
                                                let v726 = constructor_rv_orn(ctx, v598, v198);
                                                let v727 = constructor_output_xreg(ctx, v726);
                                                // Rule at src/isa/riscv64/lower.isle line 814.
                                                return Some(v727);
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Unary {
                                            opcode: ref v69,
                                            arg: v70,
                                        } = v68
                                        {
                                            if let &Opcode::Bnot = v69 {
                                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                let v173 = constructor_put_in_xreg(ctx, v70);
                                                let v724 = constructor_rv_orn(ctx, v43, v173);
                                                let v725 = constructor_output_xreg(ctx, v724);
                                                // Rule at src/isa/riscv64/lower.isle line 810.
                                                return Some(v725);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v722 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v604,
                                v605,
                                v602,
                            );
                            let v723 = constructor_output_freg(ctx, v722);
                            // Rule at src/isa/riscv64/lower.isle line 803.
                            return Some(v723);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v594 = C::ty_int(ctx, v579);
                            if let Some(v595) = v594 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v59 = C::i64_from_iconst(ctx, v40.0);
                                if let Some(v60) = v59 {
                                    let v61 = C::imm12_from_i64(ctx, v60);
                                    if let Some(v62) = v61 {
                                        let v598 = constructor_put_in_xreg(ctx, v40.1);
                                        let v719 = constructor_rv_ori(ctx, v598, v62);
                                        let v720 = constructor_output_xreg(ctx, v719);
                                        // Rule at src/isa/riscv64/lower.isle line 800.
                                        return Some(v720);
                                    }
                                }
                                let v51 = C::i64_from_iconst(ctx, v40.1);
                                if let Some(v52) = v51 {
                                    let v53 = C::imm12_from_i64(ctx, v52);
                                    if let Some(v54) = v53 {
                                        let v43 = constructor_put_in_xreg(ctx, v40.0);
                                        let v717 = constructor_rv_ori(ctx, v43, v54);
                                        let v718 = constructor_output_xreg(ctx, v717);
                                        // Rule at src/isa/riscv64/lower.isle line 797.
                                        return Some(v718);
                                    }
                                }
                            }
                        }
                        let v451 = C::ty_int(ctx, v3);
                        if let Some(v452) = v451 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v142 = C::put_in_regs(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v715 = constructor_gen_or(ctx, v452, v142, v400);
                            let v716 = C::output(ctx, v715);
                            // Rule at src/isa/riscv64/lower.isle line 793.
                            return Some(v716);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v656 = C::has_zbs(ctx);
                        if v656 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v578 = C::fits_in_64(ctx, v3);
                            if let Some(v579) = v578 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v680,
                                        imm: v681,
                                    } = v79
                                    {
                                        if let &Opcode::Iconst = v680 {
                                            let v682 = C::u64_from_imm64(ctx, v681);
                                            let v803 = C::binvi_imm(ctx, v682);
                                            if let Some(v804) = v803 {
                                                let v598 = constructor_put_in_xreg(ctx, v40.1);
                                                let v805 = constructor_rv_binvi(ctx, v598, v804);
                                                let v806 = constructor_output_xreg(ctx, v805);
                                                // Rule at src/isa/riscv64/lower.isle line 933.
                                                return Some(v806);
                                            }
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v516,
                                        imm: v517,
                                    } = v68
                                    {
                                        if let &Opcode::Iconst = v516 {
                                            let v675 = C::u64_from_imm64(ctx, v517);
                                            let v799 = C::binvi_imm(ctx, v675);
                                            if let Some(v800) = v799 {
                                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                let v801 = constructor_rv_binvi(ctx, v43, v800);
                                                let v802 = constructor_output_xreg(ctx, v801);
                                                // Rule at src/isa/riscv64/lower.isle line 929.
                                                return Some(v802);
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Binary {
                                            opcode: ref v103,
                                            args: ref v104,
                                        } = v79
                                        {
                                            if let &Opcode::Ishl = v103 {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v754 = C::i64_from_iconst(ctx, v105.0);
                                                if let Some(v755) = v754 {
                                                    if v755 == 0x1 {
                                                        let v598 =
                                                            constructor_put_in_xreg(ctx, v40.1);
                                                        let v688 =
                                                            constructor_put_in_xreg(ctx, v105.1);
                                                        let v690 = C::imm12_const(ctx, 0x1F);
                                                        let v691 =
                                                            constructor_rv_andi(ctx, v688, v690);
                                                        let v793 =
                                                            constructor_rv_binv(ctx, v598, v691);
                                                        let v794 =
                                                            constructor_output_xreg(ctx, v793);
                                                        // Rule at src/isa/riscv64/lower.isle line 918.
                                                        return Some(v794);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Binary {
                                            opcode: ref v86,
                                            args: ref v87,
                                        } = v68
                                        {
                                            if let &Opcode::Ishl = v86 {
                                                let v88 = C::unpack_value_array_2(ctx, v87);
                                                let v750 = C::i64_from_iconst(ctx, v88.0);
                                                if let Some(v751) = v750 {
                                                    if v751 == 0x1 {
                                                        let v43 =
                                                            constructor_put_in_xreg(ctx, v40.0);
                                                        let v695 =
                                                            constructor_put_in_xreg(ctx, v88.1);
                                                        let v690 = C::imm12_const(ctx, 0x1F);
                                                        let v696 =
                                                            constructor_rv_andi(ctx, v695, v690);
                                                        let v791 =
                                                            constructor_rv_binv(ctx, v43, v696);
                                                        let v792 =
                                                            constructor_output_xreg(ctx, v791);
                                                        // Rule at src/isa/riscv64/lower.isle line 915.
                                                        return Some(v792);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v77 = C::def_inst(ctx, v40.0);
                                    if let Some(v78) = v77 {
                                        let v79 = &C::inst_data(ctx, v78);
                                        if let &InstructionData::Binary {
                                            opcode: ref v103,
                                            args: ref v104,
                                        } = v79
                                        {
                                            if let &Opcode::Ishl = v103 {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v754 = C::i64_from_iconst(ctx, v105.0);
                                                if let Some(v755) = v754 {
                                                    if v755 == 0x1 {
                                                        let v598 =
                                                            constructor_put_in_xreg(ctx, v40.1);
                                                        let v688 =
                                                            constructor_put_in_xreg(ctx, v105.1);
                                                        let v797 =
                                                            constructor_rv_binv(ctx, v598, v688);
                                                        let v798 =
                                                            constructor_output_xreg(ctx, v797);
                                                        // Rule at src/isa/riscv64/lower.isle line 925.
                                                        return Some(v798);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::Binary {
                                            opcode: ref v86,
                                            args: ref v87,
                                        } = v68
                                        {
                                            if let &Opcode::Ishl = v86 {
                                                let v88 = C::unpack_value_array_2(ctx, v87);
                                                let v750 = C::i64_from_iconst(ctx, v88.0);
                                                if let Some(v751) = v750 {
                                                    if v751 == 0x1 {
                                                        let v43 =
                                                            constructor_put_in_xreg(ctx, v40.0);
                                                        let v695 =
                                                            constructor_put_in_xreg(ctx, v88.1);
                                                        let v795 =
                                                            constructor_rv_binv(ctx, v43, v695);
                                                        let v796 =
                                                            constructor_output_xreg(ctx, v795);
                                                        // Rule at src/isa/riscv64/lower.isle line 922.
                                                        return Some(v796);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v213 = constructor_replicated_imm5(ctx, v40.0);
                            if let Some(v214) = v213 {
                                let v197 = constructor_put_in_vreg(ctx, v40.1);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v789 = constructor_rv_vxor_vi(ctx, v197, v214, v169, v170);
                                let v790 = constructor_output_vreg(ctx, v789);
                                // Rule at src/isa/riscv64/lower.isle line 909.
                                return Some(v790);
                            }
                            let v193 = constructor_replicated_imm5(ctx, v40.1);
                            if let Some(v194) = v193 {
                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                let v169 = &constructor_unmasked(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v787 = constructor_rv_vxor_vi(ctx, v167, v194, v169, v170);
                                let v788 = constructor_output_vreg(ctx, v787);
                                // Rule at src/isa/riscv64/lower.isle line 905.
                                return Some(v788);
                            }
                            let v644 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v645) = v644 {
                                let v77 = C::def_inst(ctx, v40.0);
                                if let Some(v78) = v77 {
                                    let v79 = &C::inst_data(ctx, v78);
                                    if let &InstructionData::Unary {
                                        opcode: ref v80,
                                        arg: v81,
                                    } = v79
                                    {
                                        if let &Opcode::Splat = v80 {
                                            let v197 = constructor_put_in_vreg(ctx, v40.1);
                                            let v198 = constructor_put_in_xreg(ctx, v81);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v785 =
                                                constructor_rv_vxor_vx(ctx, v197, v198, v169, v170);
                                            let v786 = constructor_output_vreg(ctx, v785);
                                            // Rule at src/isa/riscv64/lower.isle line 901.
                                            return Some(v786);
                                        }
                                    }
                                }
                                let v66 = C::def_inst(ctx, v40.1);
                                if let Some(v67) = v66 {
                                    let v68 = &C::inst_data(ctx, v67);
                                    if let &InstructionData::Unary {
                                        opcode: ref v69,
                                        arg: v70,
                                    } = v68
                                    {
                                        if let &Opcode::Splat = v69 {
                                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                                            let v173 = constructor_put_in_xreg(ctx, v70);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v783 =
                                                constructor_rv_vxor_vx(ctx, v167, v173, v169, v170);
                                            let v784 = constructor_output_vreg(ctx, v783);
                                            // Rule at src/isa/riscv64/lower.isle line 897.
                                            return Some(v784);
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v781 = constructor_rv_vxor_vv(ctx, v167, v168, v169, v170);
                            let v782 = constructor_output_vreg(ctx, v781);
                            // Rule at src/isa/riscv64/lower.isle line 894.
                            return Some(v782);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v779 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v604,
                                v605,
                                v602,
                            );
                            let v780 = constructor_output_freg(ctx, v779);
                            // Rule at src/isa/riscv64/lower.isle line 891.
                            return Some(v780);
                        }
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v142 = C::put_in_regs(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v777 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v142, v400);
                            let v778 = C::output(ctx, v777);
                            // Rule at src/isa/riscv64/lower.isle line 888.
                            return Some(v778);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v594 = C::ty_int(ctx, v579);
                            if let Some(v595) = v594 {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v59 = C::i64_from_iconst(ctx, v40.0);
                                if let Some(v60) = v59 {
                                    let v61 = C::imm12_from_i64(ctx, v60);
                                    if let Some(v62) = v61 {
                                        let v598 = constructor_put_in_xreg(ctx, v40.1);
                                        let v774 = constructor_rv_xori(ctx, v598, v62);
                                        let v775 = constructor_output_xreg(ctx, v774);
                                        // Rule at src/isa/riscv64/lower.isle line 885.
                                        return Some(v775);
                                    }
                                }
                                let v51 = C::i64_from_iconst(ctx, v40.1);
                                if let Some(v52) = v51 {
                                    let v53 = C::imm12_from_i64(ctx, v52);
                                    if let Some(v54) = v53 {
                                        let v43 = constructor_put_in_xreg(ctx, v40.0);
                                        let v772 = constructor_rv_xori(ctx, v43, v54);
                                        let v773 = constructor_output_xreg(ctx, v772);
                                        // Rule at src/isa/riscv64/lower.isle line 882.
                                        return Some(v773);
                                    }
                                }
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v44 = constructor_put_in_xreg(ctx, v40.1);
                                let v770 = constructor_rv_xor(ctx, v43, v44);
                                let v771 = constructor_output_xreg(ctx, v770);
                                // Rule at src/isa/riscv64/lower.isle line 878.
                                return Some(v771);
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v608 = C::has_zbb(ctx);
                                if v608 == true {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v675 = C::u64_from_imm64(ctx, v517);
                                                let v1215 = C::u64_and(ctx, v675, 0x1F);
                                                let v1216 = C::u64_sub(ctx, 0x20, v1215);
                                                let v1217 = C::imm12_from_u64(ctx, v1216);
                                                if let Some(v1218) = v1217 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v1219 =
                                                        constructor_rv_roriw(ctx, v43, v1218);
                                                    let v1220 = constructor_output_xreg(ctx, v1219);
                                                    // Rule at src/isa/riscv64/lower.isle line 1390.
                                                    return Some(v1220);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1212 = constructor_rv_rolw(ctx, v43, v1030);
                                    let v1213 = constructor_output_xreg(ctx, v1212);
                                    // Rule at src/isa/riscv64/lower.isle line 1386.
                                    return Some(v1213);
                                }
                            }
                            I64 => {
                                let v608 = C::has_zbb(ctx);
                                if v608 == true {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v66 = C::def_inst(ctx, v40.1);
                                    if let Some(v67) = v66 {
                                        let v68 = &C::inst_data(ctx, v67);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v516,
                                            imm: v517,
                                        } = v68
                                        {
                                            if let &Opcode::Iconst = v516 {
                                                let v675 = C::u64_from_imm64(ctx, v517);
                                                let v1223 = C::u64_and(ctx, v675, 0x3F);
                                                let v1224 = C::u64_sub(ctx, 0x40, v1223);
                                                let v1225 = C::imm12_from_u64(ctx, v1224);
                                                if let Some(v1226) = v1225 {
                                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                                    let v1227 =
                                                        constructor_rv_rori(ctx, v43, v1226);
                                                    let v1228 = constructor_output_xreg(ctx, v1227);
                                                    // Rule at src/isa/riscv64/lower.isle line 1399.
                                                    return Some(v1228);
                                                }
                                            }
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1221 = constructor_rv_rol(ctx, v43, v1030);
                                    let v1222 = constructor_output_xreg(ctx, v1221);
                                    // Rule at src/isa/riscv64/lower.isle line 1395.
                                    return Some(v1222);
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v625 = C::put_in_regs(ctx, v40.1);
                                let v626 = C::value_regs_get(ctx, v625, 0x0);
                                let v627 = C::xreg_new(ctx, v626);
                                let v1057 = C::gen_shamt(ctx, I128, v627);
                                let v1058 = C::value_regs_get(ctx, v1057, 0x0);
                                let v1059 = C::xreg_new(ctx, v1058);
                                let v1060 = C::value_regs_get(ctx, v1057, 0x1);
                                let v1061 = C::xreg_new(ctx, v1060);
                                let v1062 = C::put_in_regs(ctx, v40.0);
                                let v1063 = C::value_regs_get(ctx, v1062, 0x0);
                                let v1064 = C::xreg_new(ctx, v1063);
                                let v1065 = constructor_rv_sll(ctx, v1064, v1059);
                                let v1066 = C::put_in_regs(ctx, v40.0);
                                let v1229 = C::value_regs_get(ctx, v1066, 0x1);
                                let v1230 = C::xreg_new(ctx, v1229);
                                let v1231 = constructor_rv_srl(ctx, v1230, v1061);
                                let v1070 = constructor_cmp_eqz(ctx, v1059);
                                let v1071 = C::zero_reg(ctx);
                                let v1232 = constructor_gen_select_xreg(ctx, v1070, v1071, v1231);
                                let v1233 = constructor_rv_or(ctx, v1065, v1232);
                                let v1234 = C::put_in_regs(ctx, v40.0);
                                let v1235 = C::value_regs_get(ctx, v1234, 0x1);
                                let v1236 = C::xreg_new(ctx, v1235);
                                let v1237 = constructor_rv_sll(ctx, v1236, v1059);
                                let v1238 = C::put_in_regs(ctx, v40.0);
                                let v1239 = C::value_regs_get(ctx, v1238, 0x0);
                                let v1240 = C::xreg_new(ctx, v1239);
                                let v1241 = constructor_rv_srl(ctx, v1240, v1061);
                                let v1242 = constructor_cmp_eqz(ctx, v1059);
                                let v1243 = C::zero_reg(ctx);
                                let v1244 = constructor_gen_select_xreg(ctx, v1242, v1243, v1241);
                                let v1245 = constructor_rv_or(ctx, v1237, v1244);
                                let v1246 = constructor_imm(ctx, I64, 0x40);
                                let v1247 = C::xreg_new(ctx, v1246);
                                let v1248 = C::put_in_regs(ctx, v40.1);
                                let v1249 = C::value_regs_get(ctx, v1248, 0x0);
                                let v1250 = C::xreg_new(ctx, v1249);
                                let v1085 = C::imm12_const(ctx, 0x7F);
                                let v1251 = constructor_rv_andi(ctx, v1250, v1085);
                                let v1252 = constructor_cmp_geu(ctx, v1251, v1247);
                                let v1253 = C::xreg_to_reg(ctx, v1245);
                                let v1254 = C::xreg_to_reg(ctx, v1233);
                                let v1255 = C::value_regs(ctx, v1253, v1254);
                                let v1256 = C::value_regs(ctx, v1254, v1253);
                                let v1257 = constructor_gen_select_regs(ctx, v1252, v1255, v1256);
                                let v1258 = C::output(ctx, v1257);
                                // Rule at src/isa/riscv64/lower.isle line 1404.
                                return Some(v1258);
                            }
                            _ => {}
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v497 = constructor_zext(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v1029 = C::value_regs_get(ctx, v400, 0x0);
                            let v1030 = C::xreg_new(ctx, v1029);
                            let v1194 = C::gen_shamt(ctx, v579, v1030);
                            let v1195 = C::value_regs_get(ctx, v1194, 0x0);
                            let v1196 = C::xreg_new(ctx, v1195);
                            let v1197 = C::value_regs_get(ctx, v1194, 0x1);
                            let v1198 = constructor_rv_sll(ctx, v497, v1196);
                            let v1200 = C::xreg_new(ctx, v1197);
                            let v1201 = constructor_rv_srl(ctx, v497, v1200);
                            let v1203 = constructor_cmp_eqz(ctx, v1196);
                            let v1204 = C::zero_reg(ctx);
                            let v1202 = C::xreg_to_reg(ctx, v1201);
                            let v1205 = C::xreg_new(ctx, v1202);
                            let v1206 = constructor_gen_select_xreg(ctx, v1203, v1204, v1205);
                            let v1199 = C::xreg_to_reg(ctx, v1198);
                            let v1208 = C::xreg_new(ctx, v1199);
                            let v1207 = C::xreg_to_reg(ctx, v1206);
                            let v1209 = C::xreg_new(ctx, v1207);
                            let v1210 = constructor_rv_or(ctx, v1208, v1209);
                            let v1211 = constructor_output_xreg(ctx, v1210);
                            // Rule at src/isa/riscv64/lower.isle line 1374.
                            return Some(v1211);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v608 = C::has_zbb(ctx);
                                if v608 == true {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v51 = C::i64_from_iconst(ctx, v40.1);
                                    if let Some(v52) = v51 {
                                        let v53 = C::imm12_from_i64(ctx, v52);
                                        if let Some(v54) = v53 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1267 = constructor_rv_roriw(ctx, v43, v54);
                                            let v1268 = constructor_output_xreg(ctx, v1267);
                                            // Rule at src/isa/riscv64/lower.isle line 1446.
                                            return Some(v1268);
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1265 = constructor_rv_rorw(ctx, v43, v1030);
                                    let v1266 = constructor_output_xreg(ctx, v1265);
                                    // Rule at src/isa/riscv64/lower.isle line 1442.
                                    return Some(v1266);
                                }
                            }
                            I64 => {
                                let v608 = C::has_zbb(ctx);
                                if v608 == true {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v51 = C::i64_from_iconst(ctx, v40.1);
                                    if let Some(v52) = v51 {
                                        let v53 = C::imm12_from_i64(ctx, v52);
                                        if let Some(v54) = v53 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1271 = constructor_rv_rori(ctx, v43, v54);
                                            let v1272 = constructor_output_xreg(ctx, v1271);
                                            // Rule at src/isa/riscv64/lower.isle line 1454.
                                            return Some(v1272);
                                        }
                                    }
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1269 = constructor_rv_ror(ctx, v43, v1030);
                                    let v1270 = constructor_output_xreg(ctx, v1269);
                                    // Rule at src/isa/riscv64/lower.isle line 1450.
                                    return Some(v1270);
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v625 = C::put_in_regs(ctx, v40.1);
                                let v626 = C::value_regs_get(ctx, v625, 0x0);
                                let v627 = C::xreg_new(ctx, v626);
                                let v1057 = C::gen_shamt(ctx, I128, v627);
                                let v1058 = C::value_regs_get(ctx, v1057, 0x0);
                                let v1059 = C::xreg_new(ctx, v1058);
                                let v1060 = C::value_regs_get(ctx, v1057, 0x1);
                                let v1061 = C::xreg_new(ctx, v1060);
                                let v1062 = C::put_in_regs(ctx, v40.0);
                                let v1063 = C::value_regs_get(ctx, v1062, 0x0);
                                let v1064 = C::xreg_new(ctx, v1063);
                                let v1273 = constructor_rv_srl(ctx, v1064, v1059);
                                let v1066 = C::put_in_regs(ctx, v40.0);
                                let v1229 = C::value_regs_get(ctx, v1066, 0x1);
                                let v1230 = C::xreg_new(ctx, v1229);
                                let v1274 = constructor_rv_sll(ctx, v1230, v1061);
                                let v1070 = constructor_cmp_eqz(ctx, v1059);
                                let v1071 = C::zero_reg(ctx);
                                let v1275 = constructor_gen_select_xreg(ctx, v1070, v1071, v1274);
                                let v1276 = constructor_rv_or(ctx, v1273, v1275);
                                let v1234 = C::put_in_regs(ctx, v40.0);
                                let v1235 = C::value_regs_get(ctx, v1234, 0x1);
                                let v1236 = C::xreg_new(ctx, v1235);
                                let v1277 = constructor_rv_srl(ctx, v1236, v1059);
                                let v1238 = C::put_in_regs(ctx, v40.0);
                                let v1239 = C::value_regs_get(ctx, v1238, 0x0);
                                let v1240 = C::xreg_new(ctx, v1239);
                                let v1278 = constructor_rv_sll(ctx, v1240, v1061);
                                let v1242 = constructor_cmp_eqz(ctx, v1059);
                                let v1243 = C::zero_reg(ctx);
                                let v1279 = constructor_gen_select_xreg(ctx, v1242, v1243, v1278);
                                let v1280 = constructor_rv_or(ctx, v1277, v1279);
                                let v1246 = constructor_imm(ctx, I64, 0x40);
                                let v1247 = C::xreg_new(ctx, v1246);
                                let v1248 = C::put_in_regs(ctx, v40.1);
                                let v1249 = C::value_regs_get(ctx, v1248, 0x0);
                                let v1250 = C::xreg_new(ctx, v1249);
                                let v1085 = C::imm12_const(ctx, 0x7F);
                                let v1251 = constructor_rv_andi(ctx, v1250, v1085);
                                let v1252 = constructor_cmp_geu(ctx, v1251, v1247);
                                let v1281 = C::xreg_to_reg(ctx, v1280);
                                let v1282 = C::xreg_to_reg(ctx, v1276);
                                let v1283 = C::value_regs(ctx, v1281, v1282);
                                let v1284 = C::value_regs(ctx, v1282, v1281);
                                let v1285 = constructor_gen_select_regs(ctx, v1252, v1283, v1284);
                                let v1286 = C::output(ctx, v1285);
                                // Rule at src/isa/riscv64/lower.isle line 1458.
                                return Some(v1286);
                            }
                            _ => {}
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v497 = constructor_zext(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v1029 = C::value_regs_get(ctx, v400, 0x0);
                            let v1030 = C::xreg_new(ctx, v1029);
                            let v1194 = C::gen_shamt(ctx, v579, v1030);
                            let v1195 = C::value_regs_get(ctx, v1194, 0x0);
                            let v1196 = C::xreg_new(ctx, v1195);
                            let v1197 = C::value_regs_get(ctx, v1194, 0x1);
                            let v1259 = C::xreg_new(ctx, v1197);
                            let v1260 = constructor_rv_srl(ctx, v497, v1196);
                            let v1261 = constructor_rv_sll(ctx, v497, v1259);
                            let v1203 = constructor_cmp_eqz(ctx, v1196);
                            let v1204 = C::zero_reg(ctx);
                            let v1262 = constructor_gen_select_xreg(ctx, v1203, v1204, v1261);
                            let v1263 = constructor_rv_or(ctx, v1260, v1262);
                            let v1264 = constructor_output_xreg(ctx, v1263);
                            // Rule at src/isa/riscv64/lower.isle line 1430.
                            return Some(v1264);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1098 = C::def_inst(ctx, v1041);
                                if let Some(v1099) = v1098 {
                                    let v1100 = &C::inst_data(ctx, v1099);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1101,
                                        imm: v1102,
                                    } = v1100
                                    {
                                        if let &Opcode::Iconst = v1101 {
                                            let v1103 = C::u64_from_imm64(ctx, v1102);
                                            let v1104 = C::uimm5_from_u64(ctx, v1103);
                                            if let Some(v1105) = v1104 {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v1106 = constructor_rv_vsll_vi(
                                                    ctx, v167, v1105, v169, v170,
                                                );
                                                let v1107 = constructor_output_vreg(ctx, v1106);
                                                // Rule at src/isa/riscv64/lower.isle line 1253.
                                                return Some(v1107);
                                            }
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v1029 = C::value_regs_get(ctx, v400, 0x0);
                            let v1030 = C::xreg_new(ctx, v1029);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1096 = constructor_rv_vsll_vx(ctx, v167, v1030, v169, v170);
                            let v1097 = constructor_output_vreg(ctx, v1096);
                            // Rule at src/isa/riscv64/lower.isle line 1250.
                            return Some(v1097);
                        }
                        match v3 {
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v1040 = C::maybe_uextend(ctx, v40.1);
                                if let Some(v1041) = v1040 {
                                    let v1042 = C::i64_from_iconst(ctx, v1041);
                                    if let Some(v1043) = v1042 {
                                        let v1044 = C::imm12_from_i64(ctx, v1043);
                                        if let Some(v1045) = v1044 {
                                            let v72 = C::has_zba(ctx);
                                            if v72 == true {
                                                let v77 = C::def_inst(ctx, v40.0);
                                                if let Some(v78) = v77 {
                                                    let v79 = &C::inst_data(ctx, v78);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v80,
                                                        arg: v81,
                                                    } = v79
                                                    {
                                                        if let &Opcode::Uextend = v80 {
                                                            let v82 = C::value_type(ctx, v81);
                                                            if v82 == I32 {
                                                                let v83 = constructor_put_in_xreg(
                                                                    ctx, v81,
                                                                );
                                                                let v1054 = constructor_rv_slliuw(
                                                                    ctx, v83, v1045,
                                                                );
                                                                let v1055 = constructor_output_xreg(
                                                                    ctx, v1054,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1222.
                                                                return Some(v1055);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1050 = constructor_ty_shift_mask(ctx, v3);
                                            let v1051 = C::imm12_and(ctx, v1045, v1050);
                                            let v1052 = constructor_rv_slli(ctx, v43, v1051);
                                            let v1053 = constructor_output_xreg(ctx, v1052);
                                            // Rule at src/isa/riscv64/lower.isle line 1218.
                                            return Some(v1053);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v625 = C::put_in_regs(ctx, v40.1);
                                let v626 = C::value_regs_get(ctx, v625, 0x0);
                                let v627 = C::xreg_new(ctx, v626);
                                let v1057 = C::gen_shamt(ctx, I128, v627);
                                let v1058 = C::value_regs_get(ctx, v1057, 0x0);
                                let v1059 = C::xreg_new(ctx, v1058);
                                let v1060 = C::value_regs_get(ctx, v1057, 0x1);
                                let v1061 = C::xreg_new(ctx, v1060);
                                let v1062 = C::put_in_regs(ctx, v40.0);
                                let v1063 = C::value_regs_get(ctx, v1062, 0x0);
                                let v1064 = C::xreg_new(ctx, v1063);
                                let v1065 = constructor_rv_sll(ctx, v1064, v1059);
                                let v1066 = C::put_in_regs(ctx, v40.0);
                                let v1067 = C::value_regs_get(ctx, v1066, 0x0);
                                let v1068 = C::xreg_new(ctx, v1067);
                                let v1069 = constructor_rv_srl(ctx, v1068, v1061);
                                let v1070 = constructor_cmp_eqz(ctx, v1059);
                                let v1071 = C::zero_reg(ctx);
                                let v1072 = constructor_gen_select_xreg(ctx, v1070, v1071, v1069);
                                let v1073 = C::put_in_regs(ctx, v40.0);
                                let v1074 = C::value_regs_get(ctx, v1073, 0x1);
                                let v1075 = C::xreg_new(ctx, v1074);
                                let v1076 = constructor_rv_sll(ctx, v1075, v1059);
                                let v1077 = constructor_rv_or(ctx, v1072, v1076);
                                let v1079 = constructor_imm(ctx, I64, 0x40);
                                let v1080 = C::xreg_new(ctx, v1079);
                                let v1081 = C::put_in_regs(ctx, v40.1);
                                let v1082 = C::value_regs_get(ctx, v1081, 0x0);
                                let v1083 = C::xreg_new(ctx, v1082);
                                let v1085 = C::imm12_const(ctx, 0x7F);
                                let v1086 = constructor_rv_andi(ctx, v1083, v1085);
                                let v1087 = constructor_cmp_geu(ctx, v1086, v1080);
                                let v1088 = C::zero_reg(ctx);
                                let v1089 = C::xreg_to_reg(ctx, v1088);
                                let v1090 = C::xreg_to_reg(ctx, v1065);
                                let v1091 = C::value_regs(ctx, v1089, v1090);
                                let v1092 = C::xreg_to_reg(ctx, v1077);
                                let v1093 = C::value_regs(ctx, v1090, v1092);
                                let v1094 = constructor_gen_select_regs(ctx, v1087, v1091, v1093);
                                let v1095 = C::output(ctx, v1094);
                                // Rule at src/isa/riscv64/lower.isle line 1227.
                                return Some(v1095);
                            }
                            _ => {}
                        }
                        let v1038 = C::int_fits_in_32(ctx, v3);
                        if let Some(v1039) = v1038 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1042 = C::i64_from_iconst(ctx, v1041);
                                if let Some(v1043) = v1042 {
                                    let v1044 = C::imm12_from_i64(ctx, v1043);
                                    if let Some(v1045) = v1044 {
                                        let v43 = constructor_put_in_xreg(ctx, v40.0);
                                        let v1046 = constructor_ty_shift_mask(ctx, v1039);
                                        let v1047 = C::imm12_and(ctx, v1045, v1046);
                                        let v1048 = constructor_rv_slliw(ctx, v43, v1047);
                                        let v1049 = constructor_output_xreg(ctx, v1048);
                                        // Rule at src/isa/riscv64/lower.isle line 1213.
                                        return Some(v1049);
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1034 = constructor_rv_sllw(ctx, v43, v1030);
                                let v1035 = constructor_output_xreg(ctx, v1034);
                                // Rule at src/isa/riscv64/lower.isle line 1205.
                                return Some(v1035);
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1036 = constructor_rv_sll(ctx, v43, v1030);
                                let v1037 = constructor_output_xreg(ctx, v1036);
                                // Rule at src/isa/riscv64/lower.isle line 1209.
                                return Some(v1037);
                            }
                            _ => {}
                        }
                        let v451 = C::ty_int(ctx, v3);
                        if let Some(v452) = v451 {
                            let v1024 = C::ty_8_or_16(ctx, v452);
                            if let Some(v1025) = v1024 {
                                let v1026 = constructor_ty_shift_mask(ctx, v1025);
                                let v1027 = constructor_u64_to_imm12(ctx, v1026);
                                if let Some(v1028) = v1027 {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v43 = constructor_put_in_xreg(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1031 = constructor_rv_andi(ctx, v1030, v1028);
                                    let v1032 = constructor_rv_sllw(ctx, v43, v1031);
                                    let v1033 = constructor_output_xreg(ctx, v1032);
                                    // Rule at src/isa/riscv64/lower.isle line 1200.
                                    return Some(v1033);
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1098 = C::def_inst(ctx, v1041);
                                if let Some(v1099) = v1098 {
                                    let v1100 = &C::inst_data(ctx, v1099);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1101,
                                        imm: v1102,
                                    } = v1100
                                    {
                                        if let &Opcode::Iconst = v1101 {
                                            let v1103 = C::u64_from_imm64(ctx, v1102);
                                            let v1104 = C::uimm5_from_u64(ctx, v1103);
                                            if let Some(v1105) = v1104 {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v1152 = constructor_rv_vsrl_vi(
                                                    ctx, v167, v1105, v169, v170,
                                                );
                                                let v1153 = constructor_output_vreg(ctx, v1152);
                                                // Rule at src/isa/riscv64/lower.isle line 1308.
                                                return Some(v1153);
                                            }
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v1029 = C::value_regs_get(ctx, v400, 0x0);
                            let v1030 = C::xreg_new(ctx, v1029);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1150 = constructor_rv_vsrl_vx(ctx, v167, v1030, v169, v170);
                            let v1151 = constructor_output_vreg(ctx, v1150);
                            // Rule at src/isa/riscv64/lower.isle line 1305.
                            return Some(v1151);
                        }
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v1040 = C::maybe_uextend(ctx, v40.1);
                                if let Some(v1041) = v1040 {
                                    let v1042 = C::i64_from_iconst(ctx, v1041);
                                    if let Some(v1043) = v1042 {
                                        let v1044 = C::imm12_from_i64(ctx, v1043);
                                        if let Some(v1045) = v1044 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1123 = constructor_rv_srliw(ctx, v43, v1045);
                                            let v1124 = constructor_output_xreg(ctx, v1123);
                                            // Rule at src/isa/riscv64/lower.isle line 1276.
                                            return Some(v1124);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v1040 = C::maybe_uextend(ctx, v40.1);
                                if let Some(v1041) = v1040 {
                                    let v1042 = C::i64_from_iconst(ctx, v1041);
                                    if let Some(v1043) = v1042 {
                                        let v1044 = C::imm12_from_i64(ctx, v1043);
                                        if let Some(v1045) = v1044 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1125 = constructor_rv_srli(ctx, v43, v1045);
                                            let v1126 = constructor_output_xreg(ctx, v1125);
                                            // Rule at src/isa/riscv64/lower.isle line 1279.
                                            return Some(v1126);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v625 = C::put_in_regs(ctx, v40.1);
                                let v626 = C::value_regs_get(ctx, v625, 0x0);
                                let v627 = C::xreg_new(ctx, v626);
                                let v1057 = C::gen_shamt(ctx, I128, v627);
                                let v1058 = C::value_regs_get(ctx, v1057, 0x0);
                                let v1059 = C::xreg_new(ctx, v1058);
                                let v1060 = C::value_regs_get(ctx, v1057, 0x1);
                                let v1061 = C::xreg_new(ctx, v1060);
                                let v1062 = C::put_in_regs(ctx, v40.0);
                                let v1127 = C::value_regs_get(ctx, v1062, 0x1);
                                let v1128 = C::xreg_new(ctx, v1127);
                                let v1129 = constructor_rv_sll(ctx, v1128, v1061);
                                let v1130 = constructor_cmp_eqz(ctx, v1059);
                                let v475 = C::zero_reg(ctx);
                                let v1131 = constructor_gen_select_xreg(ctx, v1130, v475, v1129);
                                let v1132 = C::put_in_regs(ctx, v40.0);
                                let v1133 = C::value_regs_get(ctx, v1132, 0x0);
                                let v1134 = C::xreg_new(ctx, v1133);
                                let v1135 = constructor_rv_srl(ctx, v1134, v1059);
                                let v1136 = constructor_rv_or(ctx, v1131, v1135);
                                let v1137 = constructor_imm(ctx, I64, 0x40);
                                let v1138 = C::xreg_new(ctx, v1137);
                                let v1139 = C::put_in_regs(ctx, v40.0);
                                let v1140 = C::value_regs_get(ctx, v1139, 0x1);
                                let v1141 = C::xreg_new(ctx, v1140);
                                let v1142 = constructor_rv_srl(ctx, v1141, v1059);
                                let v1081 = C::put_in_regs(ctx, v40.1);
                                let v1082 = C::value_regs_get(ctx, v1081, 0x0);
                                let v1083 = C::xreg_new(ctx, v1082);
                                let v1085 = C::imm12_const(ctx, 0x7F);
                                let v1086 = constructor_rv_andi(ctx, v1083, v1085);
                                let v1143 = constructor_cmp_geu(ctx, v1086, v1138);
                                let v1088 = C::zero_reg(ctx);
                                let v1144 = C::xreg_to_reg(ctx, v1142);
                                let v1089 = C::xreg_to_reg(ctx, v1088);
                                let v1145 = C::value_regs(ctx, v1144, v1089);
                                let v1146 = C::xreg_to_reg(ctx, v1136);
                                let v1147 = C::value_regs(ctx, v1146, v1144);
                                let v1148 = constructor_gen_select_regs(ctx, v1143, v1145, v1147);
                                let v1149 = C::output(ctx, v1148);
                                // Rule at src/isa/riscv64/lower.isle line 1282.
                                return Some(v1149);
                            }
                            _ => {}
                        }
                        let v451 = C::ty_int(ctx, v3);
                        if let Some(v452) = v451 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1042 = C::i64_from_iconst(ctx, v1041);
                                if let Some(v1043) = v1042 {
                                    let v1044 = C::imm12_from_i64(ctx, v1043);
                                    if let Some(v1045) = v1044 {
                                        let v1108 = C::fits_in_16(ctx, v452);
                                        if let Some(v1109) = v1108 {
                                            let v497 = constructor_zext(ctx, v40.0);
                                            let v1110 = constructor_ty_shift_mask(ctx, v1109);
                                            let v1120 = C::imm12_and(ctx, v1045, v1110);
                                            let v1121 = constructor_rv_srliw(ctx, v497, v1120);
                                            let v1122 = constructor_output_xreg(ctx, v1121);
                                            // Rule at src/isa/riscv64/lower.isle line 1273.
                                            return Some(v1122);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1116 = constructor_rv_srlw(ctx, v43, v1030);
                                let v1117 = constructor_output_xreg(ctx, v1116);
                                // Rule at src/isa/riscv64/lower.isle line 1265.
                                return Some(v1117);
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1118 = constructor_rv_srl(ctx, v43, v1030);
                                let v1119 = constructor_output_xreg(ctx, v1118);
                                // Rule at src/isa/riscv64/lower.isle line 1269.
                                return Some(v1119);
                            }
                            _ => {}
                        }
                        if let Some(v452) = v451 {
                            let v1108 = C::fits_in_16(ctx, v452);
                            if let Some(v1109) = v1108 {
                                let v1110 = constructor_ty_shift_mask(ctx, v1109);
                                let v1111 = constructor_u64_to_imm12(ctx, v1110);
                                if let Some(v1112) = v1111 {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v497 = constructor_zext(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1113 = constructor_rv_andi(ctx, v1030, v1112);
                                    let v1114 = constructor_rv_srlw(ctx, v497, v1113);
                                    let v1115 = constructor_output_xreg(ctx, v1114);
                                    // Rule at src/isa/riscv64/lower.isle line 1260.
                                    return Some(v1115);
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1098 = C::def_inst(ctx, v1041);
                                if let Some(v1099) = v1098 {
                                    let v1100 = &C::inst_data(ctx, v1099);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1101,
                                        imm: v1102,
                                    } = v1100
                                    {
                                        if let &Opcode::Iconst = v1101 {
                                            let v1103 = C::u64_from_imm64(ctx, v1102);
                                            let v1104 = C::uimm5_from_u64(ctx, v1103);
                                            if let Some(v1105) = v1104 {
                                                let v167 = constructor_put_in_vreg(ctx, v40.0);
                                                let v169 = &constructor_unmasked(ctx);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v1192 = constructor_rv_vsra_vi(
                                                    ctx, v167, v1105, v169, v170,
                                                );
                                                let v1193 = constructor_output_vreg(ctx, v1192);
                                                // Rule at src/isa/riscv64/lower.isle line 1368.
                                                return Some(v1193);
                                            }
                                        }
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v400 = C::put_in_regs(ctx, v40.1);
                            let v1029 = C::value_regs_get(ctx, v400, 0x0);
                            let v1030 = C::xreg_new(ctx, v1029);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1190 = constructor_rv_vsra_vx(ctx, v167, v1030, v169, v170);
                            let v1191 = constructor_output_vreg(ctx, v1190);
                            // Rule at src/isa/riscv64/lower.isle line 1365.
                            return Some(v1191);
                        }
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v1040 = C::maybe_uextend(ctx, v40.1);
                                if let Some(v1041) = v1040 {
                                    let v1042 = C::i64_from_iconst(ctx, v1041);
                                    if let Some(v1043) = v1042 {
                                        let v1044 = C::imm12_from_i64(ctx, v1043);
                                        if let Some(v1045) = v1044 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1162 = constructor_rv_sraiw(ctx, v43, v1045);
                                            let v1163 = constructor_output_xreg(ctx, v1162);
                                            // Rule at src/isa/riscv64/lower.isle line 1331.
                                            return Some(v1163);
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v1040 = C::maybe_uextend(ctx, v40.1);
                                if let Some(v1041) = v1040 {
                                    let v1042 = C::i64_from_iconst(ctx, v1041);
                                    if let Some(v1043) = v1042 {
                                        let v1044 = C::imm12_from_i64(ctx, v1043);
                                        if let Some(v1045) = v1044 {
                                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                                            let v1164 = constructor_rv_srai(ctx, v43, v1045);
                                            let v1165 = constructor_output_xreg(ctx, v1164);
                                            // Rule at src/isa/riscv64/lower.isle line 1334.
                                            return Some(v1165);
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v625 = C::put_in_regs(ctx, v40.1);
                                let v626 = C::value_regs_get(ctx, v625, 0x0);
                                let v627 = C::xreg_new(ctx, v626);
                                let v1057 = C::gen_shamt(ctx, I128, v627);
                                let v1058 = C::value_regs_get(ctx, v1057, 0x0);
                                let v1059 = C::xreg_new(ctx, v1058);
                                let v1060 = C::value_regs_get(ctx, v1057, 0x1);
                                let v1061 = C::xreg_new(ctx, v1060);
                                let v1062 = C::put_in_regs(ctx, v40.0);
                                let v1127 = C::value_regs_get(ctx, v1062, 0x1);
                                let v1128 = C::xreg_new(ctx, v1127);
                                let v1129 = constructor_rv_sll(ctx, v1128, v1061);
                                let v1130 = constructor_cmp_eqz(ctx, v1059);
                                let v475 = C::zero_reg(ctx);
                                let v1131 = constructor_gen_select_xreg(ctx, v1130, v475, v1129);
                                let v1132 = C::put_in_regs(ctx, v40.0);
                                let v1133 = C::value_regs_get(ctx, v1132, 0x0);
                                let v1134 = C::xreg_new(ctx, v1133);
                                let v1135 = constructor_rv_srl(ctx, v1134, v1059);
                                let v1136 = constructor_rv_or(ctx, v1131, v1135);
                                let v1137 = constructor_imm(ctx, I64, 0x40);
                                let v1138 = C::xreg_new(ctx, v1137);
                                let v1139 = C::put_in_regs(ctx, v40.0);
                                let v1140 = C::value_regs_get(ctx, v1139, 0x1);
                                let v1141 = C::xreg_new(ctx, v1140);
                                let v1166 = constructor_rv_sra(ctx, v1141, v1059);
                                let v1168 = C::i64_as_u64(ctx, -0x1);
                                let v1169 = constructor_imm(ctx, I64, v1168);
                                let v1170 = C::xreg_new(ctx, v1169);
                                let v1171 = C::put_in_regs(ctx, v40.0);
                                let v1172 = C::value_regs_get(ctx, v1171, 0x1);
                                let v1173 = C::xreg_new(ctx, v1172);
                                let v1174 = constructor_cmp_ltz(ctx, v1173);
                                let v1175 = C::zero_reg(ctx);
                                let v1176 = constructor_gen_select_xreg(ctx, v1174, v1170, v1175);
                                let v1177 = constructor_imm(ctx, I64, 0x40);
                                let v1178 = C::xreg_new(ctx, v1177);
                                let v1179 = C::put_in_regs(ctx, v40.1);
                                let v1180 = C::value_regs_get(ctx, v1179, 0x0);
                                let v1181 = C::xreg_new(ctx, v1180);
                                let v1085 = C::imm12_const(ctx, 0x7F);
                                let v1182 = constructor_rv_andi(ctx, v1181, v1085);
                                let v1183 = constructor_cmp_geu(ctx, v1182, v1178);
                                let v1184 = C::xreg_to_reg(ctx, v1166);
                                let v1185 = C::xreg_to_reg(ctx, v1176);
                                let v1186 = C::value_regs(ctx, v1184, v1185);
                                let v1146 = C::xreg_to_reg(ctx, v1136);
                                let v1187 = C::value_regs(ctx, v1146, v1184);
                                let v1188 = constructor_gen_select_regs(ctx, v1183, v1186, v1187);
                                let v1189 = C::output(ctx, v1188);
                                // Rule at src/isa/riscv64/lower.isle line 1337.
                                return Some(v1189);
                            }
                            _ => {}
                        }
                        let v451 = C::ty_int(ctx, v3);
                        if let Some(v452) = v451 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1040 = C::maybe_uextend(ctx, v40.1);
                            if let Some(v1041) = v1040 {
                                let v1042 = C::i64_from_iconst(ctx, v1041);
                                if let Some(v1043) = v1042 {
                                    let v1044 = C::imm12_from_i64(ctx, v1043);
                                    if let Some(v1045) = v1044 {
                                        let v1108 = C::fits_in_16(ctx, v452);
                                        if let Some(v1109) = v1108 {
                                            let v487 = constructor_sext(ctx, v40.0);
                                            let v1110 = constructor_ty_shift_mask(ctx, v1109);
                                            let v1120 = C::imm12_and(ctx, v1045, v1110);
                                            let v1160 = constructor_rv_sraiw(ctx, v487, v1120);
                                            let v1161 = constructor_output_xreg(ctx, v1160);
                                            // Rule at src/isa/riscv64/lower.isle line 1328.
                                            return Some(v1161);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1156 = constructor_rv_sraw(ctx, v43, v1030);
                                let v1157 = constructor_output_xreg(ctx, v1156);
                                // Rule at src/isa/riscv64/lower.isle line 1320.
                                return Some(v1157);
                            }
                            I64 => {
                                let v40 = C::unpack_value_array_2(ctx, v39);
                                let v43 = constructor_put_in_xreg(ctx, v40.0);
                                let v400 = C::put_in_regs(ctx, v40.1);
                                let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                let v1030 = C::xreg_new(ctx, v1029);
                                let v1158 = constructor_rv_sra(ctx, v43, v1030);
                                let v1159 = constructor_output_xreg(ctx, v1158);
                                // Rule at src/isa/riscv64/lower.isle line 1324.
                                return Some(v1159);
                            }
                            _ => {}
                        }
                        if let Some(v452) = v451 {
                            let v1108 = C::fits_in_16(ctx, v452);
                            if let Some(v1109) = v1108 {
                                let v1110 = constructor_ty_shift_mask(ctx, v1109);
                                let v1111 = constructor_u64_to_imm12(ctx, v1110);
                                if let Some(v1112) = v1111 {
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v487 = constructor_sext(ctx, v40.0);
                                    let v400 = C::put_in_regs(ctx, v40.1);
                                    let v1029 = C::value_regs_get(ctx, v400, 0x0);
                                    let v1030 = C::xreg_new(ctx, v1029);
                                    let v1113 = constructor_rv_andi(ctx, v1030, v1112);
                                    let v1154 = constructor_rv_sraw(ctx, v487, v1113);
                                    let v1155 = constructor_output_xreg(ctx, v1154);
                                    // Rule at src/isa/riscv64/lower.isle line 1315.
                                    return Some(v1155);
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v1460 = constructor_put_in_freg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1461 =
                                            constructor_rv_vfadd_vf(ctx, v197, v1460, v169, v170);
                                        let v1462 = constructor_output_vreg(ctx, v1461);
                                        // Rule at src/isa/riscv64/lower.isle line 1686.
                                        return Some(v1462);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v1299 = constructor_put_in_freg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1458 =
                                            constructor_rv_vfadd_vf(ctx, v167, v1299, v169, v170);
                                        let v1459 = constructor_output_vreg(ctx, v1458);
                                        // Rule at src/isa/riscv64/lower.isle line 1683.
                                        return Some(v1459);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1456 = constructor_rv_vfadd_vv(ctx, v167, v168, v169, v170);
                            let v1457 = constructor_output_vreg(ctx, v1456);
                            // Rule at src/isa/riscv64/lower.isle line 1680.
                            return Some(v1457);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1454 = constructor_rv_fadd(ctx, v602, &FRM::RNE, v604, v605);
                            let v1455 = constructor_output_freg(ctx, v1454);
                            // Rule at src/isa/riscv64/lower.isle line 1677.
                            return Some(v1455);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v1460 = constructor_put_in_freg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1469 =
                                            constructor_rv_vfrsub_vf(ctx, v197, v1460, v169, v170);
                                        let v1470 = constructor_output_vreg(ctx, v1469);
                                        // Rule at src/isa/riscv64/lower.isle line 1700.
                                        return Some(v1470);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v1299 = constructor_put_in_freg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1467 =
                                            constructor_rv_vfsub_vf(ctx, v167, v1299, v169, v170);
                                        let v1468 = constructor_output_vreg(ctx, v1467);
                                        // Rule at src/isa/riscv64/lower.isle line 1697.
                                        return Some(v1468);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1465 = constructor_rv_vfsub_vv(ctx, v167, v168, v169, v170);
                            let v1466 = constructor_output_vreg(ctx, v1465);
                            // Rule at src/isa/riscv64/lower.isle line 1694.
                            return Some(v1466);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1463 = constructor_rv_fsub(ctx, v602, &FRM::RNE, v604, v605);
                            let v1464 = constructor_output_freg(ctx, v1463);
                            // Rule at src/isa/riscv64/lower.isle line 1691.
                            return Some(v1464);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v1460 = constructor_put_in_freg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1477 =
                                            constructor_rv_vfmul_vf(ctx, v197, v1460, v169, v170);
                                        let v1478 = constructor_output_vreg(ctx, v1477);
                                        // Rule at src/isa/riscv64/lower.isle line 1713.
                                        return Some(v1478);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v1299 = constructor_put_in_freg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1475 =
                                            constructor_rv_vfmul_vf(ctx, v167, v1299, v169, v170);
                                        let v1476 = constructor_output_vreg(ctx, v1475);
                                        // Rule at src/isa/riscv64/lower.isle line 1710.
                                        return Some(v1476);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1473 = constructor_rv_vfmul_vv(ctx, v167, v168, v169, v170);
                            let v1474 = constructor_output_vreg(ctx, v1473);
                            // Rule at src/isa/riscv64/lower.isle line 1707.
                            return Some(v1474);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1471 = constructor_rv_fmul(ctx, v602, &FRM::RNE, v604, v605);
                            let v1472 = constructor_output_freg(ctx, v1471);
                            // Rule at src/isa/riscv64/lower.isle line 1704.
                            return Some(v1472);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v77 = C::def_inst(ctx, v40.0);
                            if let Some(v78) = v77 {
                                let v79 = &C::inst_data(ctx, v78);
                                if let &InstructionData::Unary {
                                    opcode: ref v80,
                                    arg: v81,
                                } = v79
                                {
                                    if let &Opcode::Splat = v80 {
                                        let v197 = constructor_put_in_vreg(ctx, v40.1);
                                        let v1460 = constructor_put_in_freg(ctx, v81);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1485 =
                                            constructor_rv_vfrdiv_vf(ctx, v197, v1460, v169, v170);
                                        let v1486 = constructor_output_vreg(ctx, v1485);
                                        // Rule at src/isa/riscv64/lower.isle line 1727.
                                        return Some(v1486);
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v1299 = constructor_put_in_freg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1483 =
                                            constructor_rv_vfdiv_vf(ctx, v167, v1299, v169, v170);
                                        let v1484 = constructor_output_vreg(ctx, v1483);
                                        // Rule at src/isa/riscv64/lower.isle line 1724.
                                        return Some(v1484);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1481 = constructor_rv_vfdiv_vv(ctx, v167, v168, v169, v170);
                            let v1482 = constructor_output_vreg(ctx, v1481);
                            // Rule at src/isa/riscv64/lower.isle line 1721.
                            return Some(v1482);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1479 = constructor_rv_fdiv(ctx, v602, &FRM::RNE, v604, v605);
                            let v1480 = constructor_output_freg(ctx, v1479);
                            // Rule at src/isa/riscv64/lower.isle line 1718.
                            return Some(v1480);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v66 = C::def_inst(ctx, v40.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Splat = v69 {
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v1299 = constructor_put_in_freg(ctx, v70);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1300 =
                                            constructor_rv_vfsgnj_vf(ctx, v167, v1299, v169, v170);
                                        let v1301 = constructor_output_vreg(ctx, v1300);
                                        // Rule at src/isa/riscv64/lower.isle line 1503.
                                        return Some(v1301);
                                    }
                                }
                            }
                            let v167 = constructor_put_in_vreg(ctx, v40.0);
                            let v168 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1297 = constructor_rv_vfsgnj_vv(ctx, v167, v168, v169, v170);
                            let v1298 = constructor_output_vreg(ctx, v1297);
                            // Rule at src/isa/riscv64/lower.isle line 1500.
                            return Some(v1298);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1295 = constructor_rv_fsgnj(ctx, v602, v604, v605);
                            let v1296 = constructor_output_freg(ctx, v1295);
                            // Rule at src/isa/riscv64/lower.isle line 1497.
                            return Some(v1296);
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1498 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v40.0,
                                v40.1,
                            );
                            let v985 = C::lane_type(ctx, v11);
                            let v1499 = constructor_canonical_nan_u64(ctx, v985);
                            let v1500 = constructor_imm(ctx, I64, v1499);
                            let v1501 = C::xreg_new(ctx, v1500);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1502 = constructor_rv_vmv_vx(ctx, v1501, v170);
                            let v1503 = constructor_put_in_vreg(ctx, v40.0);
                            let v1504 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v1505 = constructor_rv_vfmin_vv(ctx, v1503, v1504, v169, v170);
                            let v1506 = constructor_rv_vmerge_vvm(ctx, v1502, v1505, v1498, v170);
                            let v1507 = constructor_output_vreg(ctx, v1506);
                            // Rule at src/isa/riscv64/lower.isle line 1749.
                            return Some(v1507);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1488 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v602,
                                v604,
                                v605,
                            );
                            let v1489 = constructor_put_in_freg(ctx, v40.0);
                            let v1490 = constructor_put_in_freg(ctx, v40.1);
                            let v1491 = constructor_rv_fadd(ctx, v602, &FRM::RNE, v1489, v1490);
                            let v1492 = constructor_put_in_freg(ctx, v40.0);
                            let v1493 = constructor_put_in_freg(ctx, v40.1);
                            let v1494 = constructor_rv_fmin(ctx, v602, v1492, v1493);
                            let v1495 = constructor_float_to_int_compare(ctx, v1488);
                            let v1496 = constructor_gen_select_freg(ctx, v1495, v1494, v1491);
                            let v1497 = constructor_output_freg(ctx, v1496);
                            // Rule at src/isa/riscv64/lower.isle line 1735.
                            return Some(v1497);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v1498 = constructor_gen_fcmp_mask(
                                ctx,
                                v11,
                                &FloatCC::Ordered,
                                v40.0,
                                v40.1,
                            );
                            let v985 = C::lane_type(ctx, v11);
                            let v1499 = constructor_canonical_nan_u64(ctx, v985);
                            let v1500 = constructor_imm(ctx, I64, v1499);
                            let v1501 = C::xreg_new(ctx, v1500);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1502 = constructor_rv_vmv_vx(ctx, v1501, v170);
                            let v1503 = constructor_put_in_vreg(ctx, v40.0);
                            let v1504 = constructor_put_in_vreg(ctx, v40.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v1511 = constructor_rv_vfmax_vv(ctx, v1503, v1504, v169, v170);
                            let v1512 = constructor_rv_vmerge_vvm(ctx, v1502, v1511, v1498, v170);
                            let v1513 = constructor_output_vreg(ctx, v1512);
                            // Rule at src/isa/riscv64/lower.isle line 1776.
                            return Some(v1513);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v604 = constructor_put_in_freg(ctx, v40.0);
                            let v605 = constructor_put_in_freg(ctx, v40.1);
                            let v1488 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v602,
                                v604,
                                v605,
                            );
                            let v1489 = constructor_put_in_freg(ctx, v40.0);
                            let v1490 = constructor_put_in_freg(ctx, v40.1);
                            let v1491 = constructor_rv_fadd(ctx, v602, &FRM::RNE, v1489, v1490);
                            let v1492 = constructor_put_in_freg(ctx, v40.0);
                            let v1493 = constructor_put_in_freg(ctx, v40.1);
                            let v1508 = constructor_rv_fmax(ctx, v602, v1492, v1493);
                            let v1495 = constructor_float_to_int_compare(ctx, v1488);
                            let v1509 = constructor_gen_select_freg(ctx, v1495, v1508, v1491);
                            let v1510 = constructor_output_freg(ctx, v1509);
                            // Rule at src/isa/riscv64/lower.isle line 1761.
                            return Some(v1510);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v2164 = C::ty_lane_count(ctx, v11);
                            let v2206 = C::u64_udiv(ctx, v2164, 0x2);
                            if let Some(v2207) = v2206 {
                                let v2208 = constructor_u64_to_uimm5(ctx, v2207);
                                if let Some(v2209) = v2208 {
                                    let v2257 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2258) = v2257 {
                                        let v40 = C::unpack_value_array_2(ctx, v39);
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v2259 = C::ty_half_lanes(ctx, v11);
                                        let v2260 = v2259?;
                                        let v2261 = C::vstate_from_type(ctx, v2260);
                                        let v2262 = C::vstate_mf2(ctx, v2261);
                                        let v2263 =
                                            constructor_rv_vnclip_wi(ctx, v167, v2258, v169, v2262);
                                        let v2264 = constructor_put_in_vreg(ctx, v40.1);
                                        let v2265 = constructor_rv_vnclip_wi(
                                            ctx, v2264, v2258, v169, v2262,
                                        );
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2266 = constructor_rv_vslideup_vvi(
                                            ctx, v2263, v2265, v2209, v169, v170,
                                        );
                                        let v2267 = constructor_output_vreg(ctx, v2266);
                                        // Rule at src/isa/riscv64/lower.isle line 2831.
                                        return Some(v2267);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v2164 = C::ty_lane_count(ctx, v11);
                            let v2206 = C::u64_udiv(ctx, v2164, 0x2);
                            if let Some(v2207) = v2206 {
                                let v2208 = constructor_u64_to_uimm5(ctx, v2207);
                                if let Some(v2209) = v2208 {
                                    let v2257 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2258) = v2257 {
                                        let v40 = C::unpack_value_array_2(ctx, v39);
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v2122 = C::zero_reg(ctx);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v2256 = C::value_type(ctx, v40.0);
                                        let v2272 = C::vstate_from_type(ctx, v2256);
                                        let v2273 =
                                            constructor_rv_vmax_vx(ctx, v167, v2122, v169, v2272);
                                        let v2213 = constructor_put_in_vreg(ctx, v40.1);
                                        let v2274 = C::zero_reg(ctx);
                                        let v2275 =
                                            constructor_rv_vmax_vx(ctx, v2213, v2274, v169, v2272);
                                        let v2259 = C::ty_half_lanes(ctx, v11);
                                        let v2260 = v2259?;
                                        let v2261 = C::vstate_from_type(ctx, v2260);
                                        let v2262 = C::vstate_mf2(ctx, v2261);
                                        let v2276 = constructor_rv_vnclipu_wi(
                                            ctx, v2273, v2258, v169, v2262,
                                        );
                                        let v2277 = constructor_rv_vnclipu_wi(
                                            ctx, v2275, v2258, v169, v2262,
                                        );
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2278 = constructor_rv_vslideup_vvi(
                                            ctx, v2276, v2277, v2209, v169, v170,
                                        );
                                        let v2279 = constructor_output_vreg(ctx, v2278);
                                        // Rule at src/isa/riscv64/lower.isle line 2853.
                                        return Some(v2279);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v2164 = C::ty_lane_count(ctx, v11);
                            let v2206 = C::u64_udiv(ctx, v2164, 0x2);
                            if let Some(v2207) = v2206 {
                                let v2208 = constructor_u64_to_uimm5(ctx, v2207);
                                if let Some(v2209) = v2208 {
                                    let v2257 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2258) = v2257 {
                                        let v40 = C::unpack_value_array_2(ctx, v39);
                                        let v167 = constructor_put_in_vreg(ctx, v40.0);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v2259 = C::ty_half_lanes(ctx, v11);
                                        let v2260 = v2259?;
                                        let v2261 = C::vstate_from_type(ctx, v2260);
                                        let v2262 = C::vstate_mf2(ctx, v2261);
                                        let v2268 = constructor_rv_vnclipu_wi(
                                            ctx, v167, v2258, v169, v2262,
                                        );
                                        let v2264 = constructor_put_in_vreg(ctx, v40.1);
                                        let v2269 = constructor_rv_vnclipu_wi(
                                            ctx, v2264, v2258, v169, v2262,
                                        );
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2270 = constructor_rv_vslideup_vvi(
                                            ctx, v2268, v2269, v2209, v169, v170,
                                        );
                                        let v2271 = constructor_output_vreg(ctx, v2270);
                                        // Rule at src/isa/riscv64/lower.isle line 2840.
                                        return Some(v2271);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v2164 = C::ty_lane_count(ctx, v11);
                            let v2206 = C::u64_udiv(ctx, v2164, 0x2);
                            if let Some(v2207) = v2206 {
                                let v2208 = constructor_u64_to_uimm5(ctx, v2207);
                                if let Some(v2209) = v2208 {
                                    let v2210 = constructor_gen_vec_mask(ctx, 0x5555555555555555);
                                    let v40 = C::unpack_value_array_2(ctx, v39);
                                    let v2211 = constructor_put_in_vreg(ctx, v40.0);
                                    let v170 = C::vstate_from_type(ctx, v11);
                                    let v2212 =
                                        constructor_rv_vcompress_vm(ctx, v2211, v2210, v170);
                                    let v2213 = constructor_put_in_vreg(ctx, v40.1);
                                    let v2214 =
                                        constructor_rv_vcompress_vm(ctx, v2213, v2210, v170);
                                    let v169 = &constructor_unmasked(ctx);
                                    let v2215 = constructor_rv_vslideup_vvi(
                                        ctx, v2212, v2214, v2209, v169, v170,
                                    );
                                    let v2217 = constructor_gen_vec_mask(ctx, 0xAAAAAAAAAAAAAAAA);
                                    let v2218 = constructor_put_in_vreg(ctx, v40.0);
                                    let v2219 =
                                        constructor_rv_vcompress_vm(ctx, v2218, v2217, v170);
                                    let v2220 = constructor_put_in_vreg(ctx, v40.1);
                                    let v2221 =
                                        constructor_rv_vcompress_vm(ctx, v2220, v2217, v170);
                                    let v2222 = constructor_rv_vslideup_vvi(
                                        ctx, v2219, v2221, v2209, v169, v170,
                                    );
                                    let v2223 =
                                        constructor_rv_vadd_vv(ctx, v2215, v2222, v169, v170);
                                    let v2224 = constructor_output_vreg(ctx, v2223);
                                    // Rule at src/isa/riscv64/lower.isle line 2760.
                                    return Some(v2224);
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v40 = C::unpack_value_array_2(ctx, v39);
                            let v43 = constructor_put_in_xreg(ctx, v40.0);
                            let v44 = constructor_put_in_xreg(ctx, v40.1);
                            let v1615 = C::xreg_to_reg(ctx, v43);
                            let v1616 = C::xreg_to_reg(ctx, v44);
                            let v1617 = C::value_regs(ctx, v1615, v1616);
                            let v1618 = C::output(ctx, v1617);
                            // Rule at src/isa/riscv64/lower.isle line 1864.
                            return Some(v1618);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2026,
            arg: v2027,
            imm: v2028,
        } => {
            if let &Opcode::Extractlane = v2026 {
                let v2031 = constructor_put_in_vreg(ctx, v2027);
                let v2029 = C::value_type(ctx, v2027);
                let v2030 = C::u8_from_uimm8(ctx, v2028);
                let v2032 = constructor_gen_extractlane(ctx, v2029, v2031, v2030);
                let v2033 = constructor_output_reg(ctx, v2032);
                // Rule at src/isa/riscv64/lower.isle line 2520.
                return Some(v2033);
            }
        }
        &InstructionData::Call {
            opcode: ref v2006,
            args: v2007,
            func_ref: v2008,
        } => {
            match v2006 {
                &Opcode::Call => {
                    let v2010 = C::func_ref_data(ctx, v2008);
                    let v2009 = C::value_list_slice(ctx, v2007);
                    let v2014 = C::gen_call(ctx, v2010.0, v2010.1, v2010.2, v2009);
                    // Rule at src/isa/riscv64/lower.isle line 2503.
                    return Some(v2014);
                }
                &Opcode::ReturnCall => {
                    let v2010 = C::func_ref_data(ctx, v2008);
                    let v2009 = C::value_list_slice(ctx, v2007);
                    let v2024 = C::gen_return_call(ctx, v2010.0, v2010.1, v2010.2, v2009);
                    // Rule at src/isa/riscv64/lower.isle line 2511.
                    return Some(v2024);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2015,
            args: v2016,
            sig_ref: v2017,
        } => {
            match v2015 {
                &Opcode::CallIndirect => {
                    let v2018 = C::value_list_slice(ctx, v2016);
                    let v2019 = C::value_slice_unwrap(ctx, v2018);
                    if let Some(v2020) = v2019 {
                        let v2023 = C::gen_call_indirect(ctx, v2017, v2020.0, v2020.1);
                        // Rule at src/isa/riscv64/lower.isle line 2506.
                        return Some(v2023);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2018 = C::value_list_slice(ctx, v2016);
                    let v2019 = C::value_slice_unwrap(ctx, v2018);
                    if let Some(v2020) = v2019 {
                        let v2025 = C::gen_return_call_indirect(ctx, v2017, v2020.0, v2020.1);
                        // Rule at src/isa/riscv64/lower.isle line 2514.
                        return Some(v2025);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1801,
            args: ref v1802,
            cond: ref v1803,
        } => {
            if let &Opcode::Fcmp = v1801 {
                let v1804 = C::unpack_value_array_2(ctx, v1802);
                let v1807 = C::value_type(ctx, v1804.0);
                let v1815 = C::ty_vec_fits_in_register(ctx, v1807);
                if let Some(v1816) = v1815 {
                    let v1817 = constructor_gen_fcmp_mask(ctx, v1816, v1803, v1804.0, v1804.1);
                    let v1818 = constructor_gen_expand_mask(ctx, v1816, v1817);
                    let v1819 = constructor_output_vreg(ctx, v1818);
                    // Rule at src/isa/riscv64/lower.isle line 2230.
                    return Some(v1819);
                }
                let v1808 = C::ty_scalar_float(ctx, v1807);
                if let Some(v1809) = v1808 {
                    let v1810 = constructor_put_in_freg(ctx, v1804.0);
                    let v1811 = constructor_put_in_freg(ctx, v1804.1);
                    let v1812 = &constructor_fcmp_to_float_compare(ctx, v1803, v1809, v1810, v1811);
                    let v1813 = constructor_lower_float_compare(ctx, v1812);
                    let v1814 = constructor_output_xreg(ctx, v1813);
                    // Rule at src/isa/riscv64/lower.isle line 2223.
                    return Some(v1814);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1820,
            func_ref: v1821,
        } => {
            if let &Opcode::FuncAddr = v1820 {
                let v1822 = C::func_ref_data(ctx, v1821);
                let v1827 = C::load_ext_name(ctx, v1822.1, 0x0);
                let v1828 = constructor_output_reg(ctx, v1827);
                // Rule at src/isa/riscv64/lower.isle line 2235.
                return Some(v1828);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v374,
            args: ref v375,
            code: ref v376,
        } => {
            if let &Opcode::UaddOverflowTrap = v374 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I64 {
                        let v377 = C::unpack_value_array_2(ctx, v375);
                        let v389 = constructor_put_in_xreg(ctx, v377.0);
                        let v390 = constructor_put_in_xreg(ctx, v377.1);
                        let v391 = constructor_rv_add(ctx, v389, v390);
                        let v393 = constructor_put_in_xreg(ctx, v377.0);
                        let v394 =
                            constructor_gen_trapif(ctx, &IntCC::UnsignedLessThan, v391, v393, v376);
                        let v395 = constructor_output_xreg(ctx, v391);
                        // Rule at src/isa/riscv64/lower.isle line 310.
                        return Some(v395);
                    }
                    let v34 = C::fits_in_32(ctx, v3);
                    if let Some(v35) = v34 {
                        let v377 = C::unpack_value_array_2(ctx, v375);
                        let v380 = constructor_zext(ctx, v377.0);
                        let v381 = constructor_zext(ctx, v377.1);
                        let v382 = constructor_rv_add(ctx, v380, v381);
                        let v383 = C::ty_bits(ctx, v35);
                        let v384 = C::u8_as_i32(ctx, v383);
                        let v385 = C::imm12_const(ctx, v384);
                        let v386 = constructor_rv_srli(ctx, v382, v385);
                        let v387 = constructor_gen_trapnz(ctx, v386, v376);
                        let v388 = constructor_output_xreg(ctx, v382);
                        // Rule at src/isa/riscv64/lower.isle line 302.
                        return Some(v388);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1781,
            args: ref v1782,
            cond: ref v1783,
        } => {
            if let &Opcode::Icmp = v1781 {
                let v1784 = C::unpack_value_array_2(ctx, v1782);
                let v1787 = C::value_type(ctx, v1784.0);
                let v1796 = C::ty_vec_fits_in_register(ctx, v1787);
                if let Some(v1797) = v1796 {
                    let v1798 = constructor_gen_icmp_mask(ctx, v1797, v1783, v1784.0, v1784.1);
                    let v1799 = constructor_gen_expand_mask(ctx, v1797, v1798);
                    let v1800 = constructor_output_vreg(ctx, v1799);
                    // Rule at src/isa/riscv64/lower.isle line 2219.
                    return Some(v1800);
                }
                if v1787 == I128 {
                    let v1792 = C::put_in_regs(ctx, v1784.0);
                    let v1793 = C::put_in_regs(ctx, v1784.1);
                    let v1794 = constructor_lower_icmp_i128(ctx, v1783, v1792, v1793);
                    let v1795 = constructor_output_xreg(ctx, v1794);
                    // Rule at src/isa/riscv64/lower.isle line 2174.
                    return Some(v1795);
                }
                let v1788 = C::fits_in_64(ctx, v1787);
                if let Some(v1789) = v1788 {
                    let v1790 = constructor_lower_icmp(ctx, v1783, v1784.0, v1784.1);
                    let v1791 = constructor_output_xreg(ctx, v1790);
                    // Rule at src/isa/riscv64/lower.isle line 2085.
                    return Some(v1791);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1682,
            arg: v1683,
            flags: v1684,
            offset: v1685,
        } => {
            match v1682 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1686 = C::offset32_to_i32(ctx, v1685);
                            let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                            let v1728 = &constructor_element_width_from_type(ctx, v11);
                            let v1730 = VecAMode::UnitStride { base: v1729 };
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1731 = constructor_vec_load(ctx, v1728, &v1730, v1684, v169, v170);
                            let v1732 = constructor_output_reg(ctx, v1731);
                            // Rule at src/isa/riscv64/lower.isle line 2002.
                            return Some(v1732);
                        }
                        if v3 == I128 {
                            let v1686 = C::offset32_to_i32(ctx, v1685);
                            let v1715 = C::s32_add_fallible(ctx, v1686, 0x8);
                            if let Some(v1716) = v1715 {
                                let v1717 = constructor_amode(ctx, v1683, v1686, I64);
                                let v1719 = constructor_gen_load(ctx, v1717, &LoadOP::Ld, v1684);
                                let v1720 = C::xreg_new(ctx, v1719);
                                let v1721 = constructor_amode(ctx, v1683, v1716, I64);
                                let v1722 = constructor_gen_load(ctx, v1721, &LoadOP::Ld, v1684);
                                let v1723 = C::xreg_new(ctx, v1722);
                                let v1724 = C::xreg_to_reg(ctx, v1720);
                                let v1725 = C::xreg_to_reg(ctx, v1723);
                                let v1726 = C::value_regs(ctx, v1724, v1725);
                                let v1727 = C::output(ctx, v1726);
                                // Rule at src/isa/riscv64/lower.isle line 1996.
                                return Some(v1727);
                            }
                        }
                        let v1686 = C::offset32_to_i32(ctx, v1685);
                        let v1710 = constructor_amode(ctx, v1683, v1686, v3);
                        let v1711 = &C::load_op(ctx, v3);
                        let v1712 = constructor_gen_load(ctx, v1710, v1711, v1684);
                        let v1713 = constructor_output_reg(ctx, v1712);
                        // Rule at src/isa/riscv64/lower.isle line 1993.
                        return Some(v1713);
                    }
                }
                &Opcode::Uload8 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1688 = constructor_amode(ctx, v1683, v1686, I8);
                    let v1690 = constructor_gen_load(ctx, v1688, &LoadOP::Lbu, v1684);
                    let v1691 = constructor_output_reg(ctx, v1690);
                    // Rule at src/isa/riscv64/lower.isle line 1969.
                    return Some(v1691);
                }
                &Opcode::Sload8 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1688 = constructor_amode(ctx, v1683, v1686, I8);
                    let v1693 = constructor_gen_load(ctx, v1688, &LoadOP::Lb, v1684);
                    let v1694 = constructor_output_reg(ctx, v1693);
                    // Rule at src/isa/riscv64/lower.isle line 1973.
                    return Some(v1694);
                }
                &Opcode::Uload16 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1696 = constructor_amode(ctx, v1683, v1686, I16);
                    let v1698 = constructor_gen_load(ctx, v1696, &LoadOP::Lhu, v1684);
                    let v1699 = constructor_output_reg(ctx, v1698);
                    // Rule at src/isa/riscv64/lower.isle line 1977.
                    return Some(v1699);
                }
                &Opcode::Sload16 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1696 = constructor_amode(ctx, v1683, v1686, I16);
                    let v1701 = constructor_gen_load(ctx, v1696, &LoadOP::Lh, v1684);
                    let v1702 = constructor_output_reg(ctx, v1701);
                    // Rule at src/isa/riscv64/lower.isle line 1981.
                    return Some(v1702);
                }
                &Opcode::Uload32 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1703 = constructor_amode(ctx, v1683, v1686, I32);
                    let v1705 = constructor_gen_load(ctx, v1703, &LoadOP::Lwu, v1684);
                    let v1706 = constructor_output_reg(ctx, v1705);
                    // Rule at src/isa/riscv64/lower.isle line 1985.
                    return Some(v1706);
                }
                &Opcode::Sload32 => {
                    let v1686 = C::offset32_to_i32(ctx, v1685);
                    let v1703 = constructor_amode(ctx, v1683, v1686, I32);
                    let v1708 = constructor_gen_load(ctx, v1703, &LoadOP::Lw, v1684);
                    let v1709 = constructor_output_reg(ctx, v1708);
                    // Rule at src/isa/riscv64/lower.isle line 1989.
                    return Some(v1709);
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1734 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1684,
                                    v1729,
                                );
                                let v1735 = constructor_output_vreg(ctx, v1734);
                                // Rule at src/isa/riscv64/lower.isle line 2029.
                                return Some(v1735);
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I16X8 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1737 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1684,
                                    v1729,
                                );
                                let v1738 = constructor_output_vreg(ctx, v1737);
                                // Rule at src/isa/riscv64/lower.isle line 2041.
                                return Some(v1738);
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1734 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1684,
                                    v1729,
                                );
                                let v1735 = constructor_output_vreg(ctx, v1734);
                                // Rule at src/isa/riscv64/lower.isle line 2033.
                                return Some(v1735);
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I32X4 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1737 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1684,
                                    v1729,
                                );
                                let v1738 = constructor_output_vreg(ctx, v1737);
                                // Rule at src/isa/riscv64/lower.isle line 2045.
                                return Some(v1738);
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1734 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Zero,
                                    v1684,
                                    v1729,
                                );
                                let v1735 = constructor_output_vreg(ctx, v1734);
                                // Rule at src/isa/riscv64/lower.isle line 2037.
                                return Some(v1735);
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == I64X2 {
                                let v1686 = C::offset32_to_i32(ctx, v1685);
                                let v1729 = constructor_amode(ctx, v1683, v1686, v11);
                                let v1737 = constructor_gen_load64_extend(
                                    ctx,
                                    v11,
                                    &ExtendOp::Signed,
                                    v1684,
                                    v1729,
                                );
                                let v1738 = constructor_output_vreg(ctx, v1737);
                                // Rule at src/isa/riscv64/lower.isle line 2049.
                                return Some(v1738);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1399,
            arg: v1400,
            flags: v1401,
        } => {
            match v1399 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1402 = C::put_in_reg(ctx, v1400);
                        let v1922 = C::value_type(ctx, v1400);
                        let v3 = C::value_type(ctx, v2);
                        let v1923 = constructor_gen_bitcast(ctx, v1402, v1922, v3);
                        let v1924 = constructor_output_reg(ctx, v1923);
                        // Rule at src/isa/riscv64/lower.isle line 2404.
                        return Some(v1924);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1356 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1357) = v1356 {
                            let v1402 = C::put_in_reg(ctx, v1400);
                            let v1403 = constructor_gen_atomic_load(ctx, v1402, v1357);
                            let v1404 = constructor_output_reg(ctx, v1403);
                            // Rule at src/isa/riscv64/lower.isle line 1609.
                            return Some(v1404);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1988,
            args: v1989,
        } => {
            if let &Opcode::Return = v1988 {
                let v1990 = C::value_list_slice(ctx, v1989);
                let v1991 = constructor_lower_return(ctx, v1990);
                // Rule at src/isa/riscv64/lower.isle line 2468.
                return Some(v1991);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1673 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v1674 = constructor_side_effect(ctx, &v1673);
                    // Rule at src/isa/riscv64/lower.isle line 1950.
                    return Some(v1674);
                }
                &Opcode::GetFramePointer => {
                    let v1992 = C::fp_reg(ctx);
                    let v1993 = constructor_gen_mov_from_preg(ctx, v1992);
                    let v1994 = constructor_output_reg(ctx, v1993);
                    // Rule at src/isa/riscv64/lower.isle line 2473.
                    return Some(v1994);
                }
                &Opcode::GetStackPointer => {
                    let v1995 = C::sp_reg(ctx);
                    let v1996 = constructor_gen_mov_from_preg(ctx, v1995);
                    let v1997 = constructor_output_reg(ctx, v1996);
                    // Rule at src/isa/riscv64/lower.isle line 2476.
                    return Some(v1997);
                }
                &Opcode::GetReturnAddress => {
                    let v1998 = C::load_ra(ctx);
                    let v1999 = constructor_output_reg(ctx, v1998);
                    // Rule at src/isa/riscv64/lower.isle line 2479.
                    return Some(v1999);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = constructor_imm(ctx, v3, 0x0);
                        let v33 = constructor_output_reg(ctx, v32);
                        // Rule at src/isa/riscv64/lower.isle line 29.
                        return Some(v33);
                    }
                }
                &Opcode::Fence => {
                    let v1676 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v1677 = SideEffectNoResult::Inst { inst: v1676 };
                    let v1678 = constructor_side_effect(ctx, &v1677);
                    // Rule at src/isa/riscv64/lower.isle line 1955.
                    return Some(v1678);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2138,
            args: ref v2139,
            imm: v2140,
        } => {
            if let &Opcode::Shuffle = v2138 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        if v11 == I8X16 {
                            let v2144 = C::vconst_from_immediate(ctx, v2140);
                            if let Some(v2145) = v2144 {
                                let v2147 = C::i8_to_imm5(ctx, -0x10);
                                if let Some(v2148) = v2147 {
                                    let v2149 = constructor_gen_constant(ctx, v11, v2145);
                                    let v2141 = C::unpack_value_array_2(ctx, v2139);
                                    let v2150 = constructor_put_in_vreg(ctx, v2141.0);
                                    let v169 = &constructor_unmasked(ctx);
                                    let v170 = C::vstate_from_type(ctx, v11);
                                    let v2151 =
                                        constructor_rv_vrgather_vv(ctx, v2150, v2149, v169, v170);
                                    let v2152 =
                                        constructor_rv_vadd_vi(ctx, v2149, v2148, v169, v170);
                                    let v2153 = constructor_put_in_vreg(ctx, v2141.1);
                                    let v2154 =
                                        constructor_rv_vrgather_vv(ctx, v2153, v2152, v169, v170);
                                    let v2155 =
                                        constructor_rv_vor_vv(ctx, v2151, v2154, v169, v170);
                                    let v2156 = constructor_output_vreg(ctx, v2155);
                                    // Rule at src/isa/riscv64/lower.isle line 2687.
                                    return Some(v2156);
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1514,
            stack_slot: v1515,
            offset: v1516,
        } => {
            if let &Opcode::StackAddr = v1514 {
                let v1517 = C::gen_stack_addr(ctx, v1515, v1516);
                let v1518 = constructor_output_reg(ctx, v1517);
                // Rule at src/isa/riscv64/lower.isle line 1785.
                return Some(v1518);
            }
        }
        &InstructionData::Store {
            opcode: ref v1739,
            args: ref v1740,
            flags: v1741,
            offset: v1742,
        } => {
            match v1739 {
                &Opcode::Store => {
                    let v1743 = C::unpack_value_array_2(ctx, v1740);
                    let v1757 = C::value_type(ctx, v1743.0);
                    let v1773 = C::ty_vec_fits_in_register(ctx, v1757);
                    if let Some(v1774) = v1773 {
                        let v1746 = C::offset32_to_i32(ctx, v1742);
                        let v1776 = constructor_amode(ctx, v1743.1, v1746, v1774);
                        let v1778 = constructor_put_in_vreg(ctx, v1743.0);
                        let v1775 = &constructor_element_width_from_type(ctx, v1774);
                        let v1777 = VecAMode::UnitStride { base: v1776 };
                        let v169 = &constructor_unmasked(ctx);
                        let v1779 = C::vstate_from_type(ctx, v1774);
                        let v1780 =
                            constructor_vec_store(ctx, v1775, &v1777, v1778, v1741, v169, v1779);
                        // Rule at src/isa/riscv64/lower.isle line 2073.
                        return Some(v1780);
                    }
                    if v1757 == I128 {
                        let v1746 = C::offset32_to_i32(ctx, v1742);
                        let v1762 = C::s32_add_fallible(ctx, v1746, 0x8);
                        if let Some(v1763) = v1762 {
                            let v1764 = constructor_amode(ctx, v1743.1, v1746, I64);
                            let v1766 = C::put_in_regs(ctx, v1743.0);
                            let v1767 = C::value_regs_get(ctx, v1766, 0x0);
                            let v1768 =
                                constructor_gen_store(ctx, v1764, &StoreOP::Sd, v1741, v1767);
                            let v1769 = constructor_amode(ctx, v1743.1, v1763, I64);
                            let v1770 = C::put_in_regs(ctx, v1743.0);
                            let v1771 = C::value_regs_get(ctx, v1770, 0x1);
                            let v1772 =
                                constructor_gen_store(ctx, v1769, &StoreOP::Sd, v1741, v1771);
                            // Rule at src/isa/riscv64/lower.isle line 2068.
                            return Some(v1772);
                        }
                    }
                    let v1746 = C::offset32_to_i32(ctx, v1742);
                    let v1758 = constructor_amode(ctx, v1743.1, v1746, v1757);
                    let v1759 = &C::store_op(ctx, v1757);
                    let v1760 = C::put_in_reg(ctx, v1743.0);
                    let v1761 = constructor_gen_store(ctx, v1758, v1759, v1741, v1760);
                    // Rule at src/isa/riscv64/lower.isle line 2065.
                    return Some(v1761);
                }
                &Opcode::Istore8 => {
                    let v1743 = C::unpack_value_array_2(ctx, v1740);
                    let v1746 = C::offset32_to_i32(ctx, v1742);
                    let v1747 = constructor_amode(ctx, v1743.1, v1746, I8);
                    let v1749 = C::put_in_reg(ctx, v1743.0);
                    let v1750 = constructor_gen_store(ctx, v1747, &StoreOP::Sb, v1741, v1749);
                    // Rule at src/isa/riscv64/lower.isle line 2053.
                    return Some(v1750);
                }
                &Opcode::Istore16 => {
                    let v1743 = C::unpack_value_array_2(ctx, v1740);
                    let v1746 = C::offset32_to_i32(ctx, v1742);
                    let v1751 = constructor_amode(ctx, v1743.1, v1746, I16);
                    let v1749 = C::put_in_reg(ctx, v1743.0);
                    let v1753 = constructor_gen_store(ctx, v1751, &StoreOP::Sh, v1741, v1749);
                    // Rule at src/isa/riscv64/lower.isle line 2057.
                    return Some(v1753);
                }
                &Opcode::Istore32 => {
                    let v1743 = C::unpack_value_array_2(ctx, v1740);
                    let v1746 = C::offset32_to_i32(ctx, v1742);
                    let v1754 = constructor_amode(ctx, v1743.1, v1746, I32);
                    let v1749 = C::put_in_reg(ctx, v1743.0);
                    let v1756 = constructor_gen_store(ctx, v1754, &StoreOP::Sw, v1741, v1749);
                    // Rule at src/isa/riscv64/lower.isle line 2061.
                    return Some(v1756);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1405,
            args: ref v1406,
            flags: v1407,
        } => {
            if let &Opcode::AtomicStore = v1405 {
                let v1408 = C::unpack_value_array_2(ctx, v1406);
                let v1411 = C::value_type(ctx, v1408.0);
                let v1412 = C::valid_atomic_transaction(ctx, v1411);
                if let Some(v1413) = v1412 {
                    let v1414 = C::put_in_reg(ctx, v1408.1);
                    let v1415 = C::put_in_reg(ctx, v1408.0);
                    let v1416 = constructor_gen_atomic_store(ctx, v1414, v1413, v1415);
                    // Rule at src/isa/riscv64/lower.isle line 1615.
                    return Some(v1416);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1302,
            args: ref v1303,
        } => {
            match v1302 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1526 = constructor_is_nonzero_cmp(ctx, v1304.0);
                            let v1310 = constructor_put_in_freg(ctx, v1304.1);
                            let v1311 = constructor_put_in_freg(ctx, v1304.2);
                            let v1538 = constructor_gen_select_freg(ctx, v1526, v1310, v1311);
                            let v1539 = constructor_output_freg(ctx, v1538);
                            // Rule at src/isa/riscv64/lower.isle line 1810.
                            return Some(v1539);
                        }
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1526 = constructor_is_nonzero_cmp(ctx, v1304.0);
                            let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                            let v1535 = constructor_put_in_vreg(ctx, v1304.2);
                            let v1536 = constructor_gen_select_vreg(ctx, v1526, v1315, v1535);
                            let v1537 = constructor_output_vreg(ctx, v1536);
                            // Rule at src/isa/riscv64/lower.isle line 1807.
                            return Some(v1537);
                        }
                        if v3 == I128 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1526 = constructor_is_nonzero_cmp(ctx, v1304.0);
                            let v1531 = C::put_in_regs(ctx, v1304.1);
                            let v1532 = C::put_in_regs(ctx, v1304.2);
                            let v1533 = constructor_gen_select_regs(ctx, v1526, v1531, v1532);
                            let v1534 = C::output(ctx, v1533);
                            // Rule at src/isa/riscv64/lower.isle line 1804.
                            return Some(v1534);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1526 = constructor_is_nonzero_cmp(ctx, v1304.0);
                            let v1527 = constructor_put_in_xreg(ctx, v1304.1);
                            let v1528 = constructor_put_in_xreg(ctx, v1304.2);
                            let v1529 = constructor_gen_select_xreg(ctx, v1526, v1527, v1528);
                            let v1530 = constructor_output_xreg(ctx, v1529);
                            // Rule at src/isa/riscv64/lower.isle line 1801.
                            return Some(v1530);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1981 = C::i64_from_iconst(ctx, v1304.2);
                            if let Some(v1982) = v1981 {
                                if v1982 == 0x0 {
                                    let v1983 = constructor_put_in_xreg(ctx, v1304.1);
                                    let v1978 = constructor_gen_bmask(ctx, v1304.0);
                                    let v1984 = constructor_rv_and(ctx, v1983, v1978);
                                    let v1985 = constructor_output_xreg(ctx, v1984);
                                    // Rule at src/isa/riscv64/lower.isle line 2459.
                                    return Some(v1985);
                                }
                            }
                            let v1975 = C::i64_from_iconst(ctx, v1304.1);
                            if let Some(v1976) = v1975 {
                                if v1976 == 0x0 {
                                    let v1977 = constructor_put_in_xreg(ctx, v1304.2);
                                    let v1978 = constructor_gen_bmask(ctx, v1304.0);
                                    let v1979 = constructor_rv_andn(ctx, v1977, v1978);
                                    let v1980 = constructor_output_xreg(ctx, v1979);
                                    // Rule at src/isa/riscv64/lower.isle line 2457.
                                    return Some(v1980);
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1948 = constructor_gen_bmask(ctx, v1304.0);
                            let v1531 = C::put_in_regs(ctx, v1304.1);
                            let v1954 = C::value_regs_get(ctx, v1531, 0x0);
                            let v1955 = C::xreg_new(ctx, v1954);
                            let v1956 = constructor_rv_and(ctx, v1948, v1955);
                            let v1957 = C::put_in_regs(ctx, v1304.2);
                            let v1958 = C::value_regs_get(ctx, v1957, 0x0);
                            let v1959 = C::xreg_new(ctx, v1958);
                            let v1960 = constructor_rv_andn(ctx, v1959, v1948);
                            let v1961 = constructor_rv_or(ctx, v1956, v1960);
                            let v1963 = C::put_in_regs(ctx, v1304.1);
                            let v1964 = C::value_regs_get(ctx, v1963, 0x1);
                            let v1965 = C::xreg_new(ctx, v1964);
                            let v1966 = constructor_rv_and(ctx, v1948, v1965);
                            let v1967 = C::put_in_regs(ctx, v1304.2);
                            let v1968 = C::value_regs_get(ctx, v1967, 0x1);
                            let v1969 = C::xreg_new(ctx, v1968);
                            let v1970 = constructor_rv_andn(ctx, v1969, v1948);
                            let v1971 = constructor_rv_or(ctx, v1966, v1970);
                            let v1962 = C::xreg_to_reg(ctx, v1961);
                            let v1972 = C::xreg_to_reg(ctx, v1971);
                            let v1973 = C::value_regs(ctx, v1962, v1972);
                            let v1974 = C::output(ctx, v1973);
                            // Rule at src/isa/riscv64/lower.isle line 2449.
                            return Some(v1974);
                        }
                        if let Some(v579) = v578 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1948 = constructor_gen_bmask(ctx, v1304.0);
                            let v1527 = constructor_put_in_xreg(ctx, v1304.1);
                            let v1949 = constructor_rv_and(ctx, v1948, v1527);
                            let v1950 = constructor_put_in_xreg(ctx, v1304.2);
                            let v1951 = constructor_rv_andn(ctx, v1950, v1948);
                            let v1952 = constructor_rv_or(ctx, v1949, v1951);
                            let v1953 = constructor_output_xreg(ctx, v1952);
                            // Rule at src/isa/riscv64/lower.isle line 2446.
                            return Some(v1953);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1319 = C::def_inst(ctx, v1304.0);
                            if let Some(v1320) = v1319 {
                                let v1321 = &C::inst_data(ctx, v1320);
                                match v1321 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1570,
                                        args: ref v1571,
                                        cond: ref v1572,
                                    } => {
                                        if let &Opcode::Fcmp = v1570 {
                                            let v1573 = C::unpack_value_array_2(ctx, v1571);
                                            let v1576 = C::value_type(ctx, v1573.0);
                                            let v1577 = C::ty_vec_fits_in_register(ctx, v1576);
                                            if let Some(v1578) = v1577 {
                                                let v1579 = constructor_gen_fcmp_mask(
                                                    ctx, v1578, v1572, v1573.0, v1573.1,
                                                );
                                                let v1566 = constructor_put_in_vreg(ctx, v1304.2);
                                                let v1567 = constructor_put_in_vreg(ctx, v1304.1);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v1580 = constructor_rv_vmerge_vvm(
                                                    ctx, v1566, v1567, v1579, v170,
                                                );
                                                let v1581 = constructor_output_vreg(ctx, v1580);
                                                // Rule at src/isa/riscv64/lower.isle line 1841.
                                                return Some(v1581);
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1556,
                                        args: ref v1557,
                                        cond: ref v1558,
                                    } => {
                                        if let &Opcode::Icmp = v1556 {
                                            let v1559 = C::unpack_value_array_2(ctx, v1557);
                                            let v1562 = C::value_type(ctx, v1559.0);
                                            let v1563 = C::ty_vec_fits_in_register(ctx, v1562);
                                            if let Some(v1564) = v1563 {
                                                let v1565 = constructor_gen_icmp_mask(
                                                    ctx, v1564, v1558, v1559.0, v1559.1,
                                                );
                                                let v1566 = constructor_put_in_vreg(ctx, v1304.2);
                                                let v1567 = constructor_put_in_vreg(ctx, v1304.1);
                                                let v170 = C::vstate_from_type(ctx, v11);
                                                let v1568 = constructor_rv_vmerge_vvm(
                                                    ctx, v1566, v1567, v1565, v170,
                                                );
                                                let v1569 = constructor_output_vreg(ctx, v1568);
                                                // Rule at src/isa/riscv64/lower.isle line 1837.
                                                return Some(v1569);
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1582,
                                        arg: v1583,
                                        flags: v1584,
                                    } => {
                                        if let &Opcode::Bitcast = v1582 {
                                            let v1585 = C::def_inst(ctx, v1583);
                                            if let Some(v1586) = v1585 {
                                                let v1587 = &C::inst_data(ctx, v1586);
                                                match v1587 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1588,
                                                        args: ref v1589,
                                                        cond: ref v1590,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1588 {
                                                            let v1591 =
                                                                C::unpack_value_array_2(ctx, v1589);
                                                            let v1594 = C::value_type(ctx, v1591.0);
                                                            let v1595 = C::ty_vec_fits_in_register(
                                                                ctx, v1594,
                                                            );
                                                            if let Some(v1596) = v1595 {
                                                                let v1597 =
                                                                    constructor_gen_fcmp_mask(
                                                                        ctx, v1596, v1590, v1591.0,
                                                                        v1591.1,
                                                                    );
                                                                let v1566 = constructor_put_in_vreg(
                                                                    ctx, v1304.2,
                                                                );
                                                                let v1567 = constructor_put_in_vreg(
                                                                    ctx, v1304.1,
                                                                );
                                                                let v170 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1598 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1566, v1567, v1597,
                                                                        v170,
                                                                    );
                                                                let v1599 = constructor_output_vreg(
                                                                    ctx, v1598,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1845.
                                                                return Some(v1599);
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1600,
                                                        args: ref v1601,
                                                        cond: ref v1602,
                                                    } => {
                                                        if let &Opcode::Icmp = v1600 {
                                                            let v1603 =
                                                                C::unpack_value_array_2(ctx, v1601);
                                                            let v1606 = C::value_type(ctx, v1603.0);
                                                            let v1607 = C::ty_vec_fits_in_register(
                                                                ctx, v1606,
                                                            );
                                                            if let Some(v1608) = v1607 {
                                                                let v1609 =
                                                                    constructor_gen_icmp_mask(
                                                                        ctx, v1608, v1602, v1603.0,
                                                                        v1603.1,
                                                                    );
                                                                let v1566 = constructor_put_in_vreg(
                                                                    ctx, v1304.2,
                                                                );
                                                                let v1567 = constructor_put_in_vreg(
                                                                    ctx, v1304.1,
                                                                );
                                                                let v170 =
                                                                    C::vstate_from_type(ctx, v11);
                                                                let v1610 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1566, v1567, v1609,
                                                                        v170,
                                                                    );
                                                                let v1611 = constructor_output_vreg(
                                                                    ctx, v1610,
                                                                );
                                                                // Rule at src/isa/riscv64/lower.isle line 1849.
                                                                return Some(v1611);
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1548 = constructor_put_in_vreg(ctx, v1304.0);
                            let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1549 = constructor_rv_vand_vv(ctx, v1548, v1315, v169, v170);
                            let v1550 = constructor_put_in_vreg(ctx, v1304.0);
                            let v1551 = constructor_rv_vnot_v(ctx, v1550, v169, v170);
                            let v1552 = constructor_put_in_vreg(ctx, v1304.2);
                            let v1553 = constructor_rv_vand_vv(ctx, v1551, v1552, v169, v170);
                            let v1554 = constructor_rv_vor_vv(ctx, v1549, v1553, v169, v170);
                            let v1555 = constructor_output_vreg(ctx, v1554);
                            // Rule at src/isa/riscv64/lower.isle line 1827.
                            return Some(v1555);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1540 = constructor_put_in_xreg(ctx, v1304.0);
                            let v1527 = constructor_put_in_xreg(ctx, v1304.1);
                            let v1541 = constructor_rv_and(ctx, v1540, v1527);
                            let v1542 = constructor_put_in_xreg(ctx, v1304.0);
                            let v1543 = constructor_rv_not(ctx, v1542);
                            let v1544 = constructor_put_in_xreg(ctx, v1304.2);
                            let v1545 = constructor_rv_and(ctx, v1543, v1544);
                            let v1546 = constructor_rv_or(ctx, v1541, v1545);
                            let v1547 = constructor_output_xreg(ctx, v1546);
                            // Rule at src/isa/riscv64/lower.isle line 1816.
                            return Some(v1547);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1319 = C::def_inst(ctx, v1304.0);
                            if let Some(v1320) = v1319 {
                                let v1321 = &C::inst_data(ctx, v1320);
                                if let &InstructionData::Unary {
                                    opcode: ref v1322,
                                    arg: v1323,
                                } = v1321
                                {
                                    match v1322 {
                                        &Opcode::Splat => {
                                            let v1327 = C::def_inst(ctx, v1304.2);
                                            if let Some(v1328) = v1327 {
                                                let v1329 = &C::inst_data(ctx, v1328);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1330,
                                                    arg: v1331,
                                                } = v1329
                                                {
                                                    if let &Opcode::Fneg = v1330 {
                                                        let v1332 =
                                                            constructor_put_in_vreg(ctx, v1331);
                                                        let v1315 =
                                                            constructor_put_in_vreg(ctx, v1304.1);
                                                        let v1324 =
                                                            constructor_put_in_freg(ctx, v1323);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v1335 = constructor_rv_vfmsac_vf(
                                                            ctx, v1332, v1315, v1324, v169, v170,
                                                        );
                                                        let v1336 =
                                                            constructor_output_vreg(ctx, v1335);
                                                        // Rule at src/isa/riscv64/lower.isle line 1525.
                                                        return Some(v1336);
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Fneg => {
                                            let v1340 = C::def_inst(ctx, v1323);
                                            if let Some(v1341) = v1340 {
                                                let v1342 = &C::inst_data(ctx, v1341);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1343,
                                                    arg: v1344,
                                                } = v1342
                                                {
                                                    if let &Opcode::Splat = v1343 {
                                                        let v1327 = C::def_inst(ctx, v1304.2);
                                                        if let Some(v1328) = v1327 {
                                                            let v1329 = &C::inst_data(ctx, v1328);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v1330,
                                                                arg: v1331,
                                                            } = v1329
                                                            {
                                                                if let &Opcode::Fneg = v1330 {
                                                                    let v1332 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1331,
                                                                        );
                                                                    let v1315 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v1304.1,
                                                                        );
                                                                    let v1345 =
                                                                        constructor_put_in_freg(
                                                                            ctx, v1344,
                                                                        );
                                                                    let v169 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v170 = C::vstate_from_type(
                                                                        ctx, v11,
                                                                    );
                                                                    let v1346 =
                                                                        constructor_rv_vfnmacc_vf(
                                                                            ctx, v1332, v1315,
                                                                            v1345, v169, v170,
                                                                        );
                                                                    let v1347 =
                                                                        constructor_output_vreg(
                                                                            ctx, v1346,
                                                                        );
                                                                    // Rule at src/isa/riscv64/lower.isle line 1533.
                                                                    return Some(v1347);
                                                                }
                                                            }
                                                        }
                                                        let v1314 =
                                                            constructor_put_in_vreg(ctx, v1304.2);
                                                        let v1315 =
                                                            constructor_put_in_vreg(ctx, v1304.1);
                                                        let v1345 =
                                                            constructor_put_in_freg(ctx, v1344);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v1350 = constructor_rv_vfnmsac_vf(
                                                            ctx, v1314, v1315, v1345, v169, v170,
                                                        );
                                                        let v1351 =
                                                            constructor_output_vreg(ctx, v1350);
                                                        // Rule at src/isa/riscv64/lower.isle line 1541.
                                                        return Some(v1351);
                                                    }
                                                }
                                            }
                                            let v1327 = C::def_inst(ctx, v1304.2);
                                            if let Some(v1328) = v1327 {
                                                let v1329 = &C::inst_data(ctx, v1328);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v1330,
                                                    arg: v1331,
                                                } = v1329
                                                {
                                                    if let &Opcode::Fneg = v1330 {
                                                        let v1332 =
                                                            constructor_put_in_vreg(ctx, v1331);
                                                        let v1315 =
                                                            constructor_put_in_vreg(ctx, v1304.1);
                                                        let v1337 =
                                                            constructor_put_in_vreg(ctx, v1323);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v1338 = constructor_rv_vfnmacc_vv(
                                                            ctx, v1332, v1315, v1337, v169, v170,
                                                        );
                                                        let v1339 =
                                                            constructor_output_vreg(ctx, v1338);
                                                        // Rule at src/isa/riscv64/lower.isle line 1530.
                                                        return Some(v1339);
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1327 = C::def_inst(ctx, v1304.2);
                            if let Some(v1328) = v1327 {
                                let v1329 = &C::inst_data(ctx, v1328);
                                if let &InstructionData::Unary {
                                    opcode: ref v1330,
                                    arg: v1331,
                                } = v1329
                                {
                                    if let &Opcode::Fneg = v1330 {
                                        let v1332 = constructor_put_in_vreg(ctx, v1331);
                                        let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                                        let v1316 = constructor_put_in_vreg(ctx, v1304.0);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v1333 = constructor_rv_vfmsac_vv(
                                            ctx, v1332, v1315, v1316, v169, v170,
                                        );
                                        let v1334 = constructor_output_vreg(ctx, v1333);
                                        // Rule at src/isa/riscv64/lower.isle line 1522.
                                        return Some(v1334);
                                    }
                                }
                            }
                            if let Some(v1320) = v1319 {
                                let v1321 = &C::inst_data(ctx, v1320);
                                if let &InstructionData::Unary {
                                    opcode: ref v1322,
                                    arg: v1323,
                                } = v1321
                                {
                                    match v1322 {
                                        &Opcode::Splat => {
                                            let v1314 = constructor_put_in_vreg(ctx, v1304.2);
                                            let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                                            let v1324 = constructor_put_in_freg(ctx, v1323);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v1325 = constructor_rv_vfmacc_vf(
                                                ctx, v1314, v1315, v1324, v169, v170,
                                            );
                                            let v1326 = constructor_output_vreg(ctx, v1325);
                                            // Rule at src/isa/riscv64/lower.isle line 1517.
                                            return Some(v1326);
                                        }
                                        &Opcode::Fneg => {
                                            let v1314 = constructor_put_in_vreg(ctx, v1304.2);
                                            let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                                            let v1337 = constructor_put_in_vreg(ctx, v1323);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v1348 = constructor_rv_vfnmsac_vv(
                                                ctx, v1314, v1315, v1337, v169, v170,
                                            );
                                            let v1349 = constructor_output_vreg(ctx, v1348);
                                            // Rule at src/isa/riscv64/lower.isle line 1538.
                                            return Some(v1349);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v1314 = constructor_put_in_vreg(ctx, v1304.2);
                            let v1315 = constructor_put_in_vreg(ctx, v1304.1);
                            let v1316 = constructor_put_in_vreg(ctx, v1304.0);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1317 =
                                constructor_rv_vfmacc_vv(ctx, v1314, v1315, v1316, v169, v170);
                            let v1318 = constructor_output_vreg(ctx, v1317);
                            // Rule at src/isa/riscv64/lower.isle line 1514.
                            return Some(v1318);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v1304 = C::unpack_value_array_3(ctx, v1303);
                            let v1309 = constructor_put_in_freg(ctx, v1304.0);
                            let v1310 = constructor_put_in_freg(ctx, v1304.1);
                            let v1311 = constructor_put_in_freg(ctx, v1304.2);
                            let v1312 =
                                constructor_rv_fmadd(ctx, v602, &FRM::RNE, v1309, v1310, v1311);
                            let v1313 = constructor_output_freg(ctx, v1312);
                            // Rule at src/isa/riscv64/lower.isle line 1507.
                            return Some(v1313);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2034,
            args: ref v2035,
            imm: v2036,
        } => {
            if let &Opcode::Insertlane = v2034 {
                let v2037 = C::unpack_value_array_2(ctx, v2035);
                let v2040 = C::value_type(ctx, v2037.0);
                let v2041 = C::ty_vec_fits_in_register(ctx, v2040);
                if let Some(v2042) = v2041 {
                    let v2060 = C::i64_from_iconst(ctx, v2037.1);
                    if let Some(v2061) = v2060 {
                        let v2062 = C::imm5_from_i64(ctx, v2061);
                        if let Some(v2063) = v2062 {
                            let v2046 = C::u8_from_uimm8(ctx, v2036);
                            let v2047 = C::u8_as_u64(ctx, v2046);
                            let v2048 = C::u64_shl(ctx, 0x1, v2047);
                            let v2049 = constructor_gen_vec_mask(ctx, v2048);
                            let v2050 = constructor_put_in_vreg(ctx, v2037.0);
                            let v2052 = C::vstate_from_type(ctx, v2042);
                            let v2064 = constructor_rv_vmerge_vim(ctx, v2050, v2063, v2049, v2052);
                            let v2065 = constructor_output_vreg(ctx, v2064);
                            // Rule at src/isa/riscv64/lower.isle line 2543.
                            return Some(v2065);
                        }
                    }
                    let v2043 = C::value_type(ctx, v2037.1);
                    let v2055 = C::ty_scalar_float(ctx, v2043);
                    if let Some(v2056) = v2055 {
                        let v2046 = C::u8_from_uimm8(ctx, v2036);
                        let v2047 = C::u8_as_u64(ctx, v2046);
                        let v2048 = C::u64_shl(ctx, 0x1, v2047);
                        let v2049 = constructor_gen_vec_mask(ctx, v2048);
                        let v2050 = constructor_put_in_vreg(ctx, v2037.0);
                        let v2057 = constructor_put_in_freg(ctx, v2037.1);
                        let v2052 = C::vstate_from_type(ctx, v2042);
                        let v2058 = constructor_rv_vfmerge_vfm(ctx, v2050, v2057, v2049, v2052);
                        let v2059 = constructor_output_vreg(ctx, v2058);
                        // Rule at src/isa/riscv64/lower.isle line 2535.
                        return Some(v2059);
                    }
                    let v2044 = C::ty_int(ctx, v2043);
                    if let Some(v2045) = v2044 {
                        let v2046 = C::u8_from_uimm8(ctx, v2036);
                        let v2047 = C::u8_as_u64(ctx, v2046);
                        let v2048 = C::u64_shl(ctx, 0x1, v2047);
                        let v2049 = constructor_gen_vec_mask(ctx, v2048);
                        let v2050 = constructor_put_in_vreg(ctx, v2037.0);
                        let v2051 = constructor_put_in_xreg(ctx, v2037.1);
                        let v2052 = C::vstate_from_type(ctx, v2042);
                        let v2053 = constructor_rv_vmerge_vxm(ctx, v2050, v2051, v2049, v2052);
                        let v2054 = constructor_output_vreg(ctx, v2053);
                        // Rule at src/isa/riscv64/lower.isle line 2528.
                        return Some(v2054);
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1679,
            code: ref v1680,
        } => {
            match v1679 {
                &Opcode::Trap => {
                    let v1681 = constructor_udf(ctx, v1680);
                    // Rule at src/isa/riscv64/lower.isle line 1960.
                    return Some(v1681);
                }
                &Opcode::ResumableTrap => {
                    let v1681 = constructor_udf(ctx, v1680);
                    // Rule at src/isa/riscv64/lower.isle line 1965.
                    return Some(v1681);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v453,
            arg: v454,
        } => {
            match v453 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v829 = C::def_inst(ctx, v454);
                        if let Some(v830) = v829 {
                            let v831 = &C::inst_data(ctx, v830);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v2073,
                                imm: v2074,
                            } = v831
                            {
                                if let &Opcode::Iconst = v2073 {
                                    let v2075 = C::u64_from_imm64(ctx, v2074);
                                    let v2076 = C::imm5_from_u64(ctx, v2075);
                                    if let Some(v2077) = v2076 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2066 = C::vstate_from_type(ctx, v3);
                                        let v2078 = constructor_rv_vmv_vi(ctx, v2077, v2066);
                                        let v2079 = constructor_output_vreg(ctx, v2078);
                                        // Rule at src/isa/riscv64/lower.isle line 2557.
                                        return Some(v2079);
                                    }
                                }
                            }
                        }
                        let v941 = C::value_type(ctx, v454);
                        let v2069 = C::ty_int_ref_scalar_64_extract(ctx, v941);
                        if let Some(v2070) = v2069 {
                            let v807 = constructor_put_in_xreg(ctx, v454);
                            let v3 = C::value_type(ctx, v2);
                            let v2066 = C::vstate_from_type(ctx, v3);
                            let v2071 = constructor_rv_vmv_vx(ctx, v807, v2066);
                            let v2072 = constructor_output_vreg(ctx, v2071);
                            // Rule at src/isa/riscv64/lower.isle line 2554.
                            return Some(v2072);
                        }
                        let v1862 = C::ty_scalar_float(ctx, v941);
                        if let Some(v1863) = v1862 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v3 = C::value_type(ctx, v2);
                            let v2066 = C::vstate_from_type(ctx, v3);
                            let v2067 = constructor_rv_vfmv_vf(ctx, v810, v2066);
                            let v2068 = constructor_output_vreg(ctx, v2067);
                            // Rule at src/isa/riscv64/lower.isle line 2551.
                            return Some(v2068);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v941 = C::value_type(ctx, v454);
                    let v2108 = C::ty_vec_fits_in_register(ctx, v941);
                    if let Some(v2109) = v2108 {
                        let v458 = constructor_put_in_vreg(ctx, v454);
                        let v1867 = constructor_put_in_vreg(ctx, v454);
                        let v169 = &constructor_unmasked(ctx);
                        let v2113 = C::vstate_from_type(ctx, v2109);
                        let v2118 = constructor_rv_vredmaxu_vs(ctx, v458, v1867, v169, v2113);
                        let v2119 = constructor_rv_vmv_xs(ctx, v2118, v2113);
                        let v2120 = constructor_rv_snez(ctx, v2119);
                        let v2121 = constructor_output_xreg(ctx, v2120);
                        // Rule at src/isa/riscv64/lower.isle line 2642.
                        return Some(v2121);
                    }
                }
                &Opcode::VallTrue => {
                    let v941 = C::value_type(ctx, v454);
                    let v2108 = C::ty_vec_fits_in_register(ctx, v941);
                    if let Some(v2109) = v2108 {
                        let v2111 = C::i8_to_imm5(ctx, 0x1);
                        if let Some(v2112) = v2111 {
                            let v2113 = C::vstate_from_type(ctx, v2109);
                            let v2114 = constructor_rv_vmv_vi(ctx, v2112, v2113);
                            let v1867 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v2115 = constructor_rv_vredminu_vs(ctx, v1867, v2114, v169, v2113);
                            let v2116 = constructor_rv_vmv_xs(ctx, v2115, v2113);
                            let v2117 = constructor_output_xreg(ctx, v2116);
                            // Rule at src/isa/riscv64/lower.isle line 2628.
                            return Some(v2117);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v941 = C::value_type(ctx, v454);
                    let v2108 = C::ty_vec_fits_in_register(ctx, v941);
                    if let Some(v2109) = v2108 {
                        let v458 = constructor_put_in_vreg(ctx, v454);
                        let v2122 = C::zero_reg(ctx);
                        let v169 = &constructor_unmasked(ctx);
                        let v2113 = C::vstate_from_type(ctx, v2109);
                        let v2123 = constructor_rv_vmslt_vx(ctx, v458, v2122, v169, v2113);
                        let v2125 = C::vstate_from_type(ctx, I64X2);
                        let v2126 = constructor_rv_vmv_xs(ctx, v2123, v2125);
                        let v2127 = C::ty_lane_mask(ctx, v2109);
                        let v2128 = constructor_gen_andi(ctx, v2126, v2127);
                        let v2129 = constructor_output_xreg(ctx, v2128);
                        // Rule at src/isa/riscv64/lower.isle line 2658.
                        return Some(v2129);
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v459 = constructor_rv_vneg_v(ctx, v458, v169, v170);
                            let v460 = constructor_output_vreg(ctx, v459);
                            // Rule at src/isa/riscv64/lower.isle line 441.
                            return Some(v460);
                        }
                        let v451 = C::ty_int(ctx, v3);
                        if let Some(v452) = v451 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v456 = constructor_neg(ctx, v452, v455);
                            let v457 = C::output(ctx, v456);
                            // Rule at src/isa/riscv64/lower.isle line 438.
                            return Some(v457);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v459 = constructor_rv_vneg_v(ctx, v458, v169, v170);
                            let v991 = constructor_put_in_vreg(ctx, v454);
                            let v2004 = constructor_rv_vmax_vv(ctx, v991, v459, v169, v170);
                            let v2005 = constructor_output_vreg(ctx, v2004);
                            // Rule at src/isa/riscv64/lower.isle line 2497.
                            return Some(v2005);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v906 = constructor_sext(ctx, v454);
                            let v2000 = constructor_rv_neg(ctx, v906);
                            let v2001 = constructor_cmp_gt(ctx, v906, v2000);
                            let v2002 = constructor_gen_select_xreg(ctx, v2001, v906, v2000);
                            let v2003 = constructor_output_xreg(ctx, v2002);
                            // Rule at src/isa/riscv64/lower.isle line 2489.
                            return Some(v2003);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v608 = C::has_zbb(ctx);
                            if v608 == true {
                                let v829 = C::def_inst(ctx, v454);
                                if let Some(v830) = v829 {
                                    let v831 = &C::inst_data(ctx, v830);
                                    if let &InstructionData::Binary {
                                        opcode: ref v832,
                                        args: ref v833,
                                    } = v831
                                    {
                                        if let &Opcode::Bxor = v832 {
                                            let v834 = C::unpack_value_array_2(ctx, v833);
                                            let v837 = constructor_put_in_xreg(ctx, v834.0);
                                            let v838 = constructor_put_in_xreg(ctx, v834.1);
                                            let v839 = constructor_rv_xnor(ctx, v837, v838);
                                            let v840 = constructor_output_xreg(ctx, v839);
                                            // Rule at src/isa/riscv64/lower.isle line 957.
                                            return Some(v840);
                                        }
                                    }
                                }
                            }
                        }
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v827 = constructor_rv_vnot_v(ctx, v458, v169, v170);
                            let v828 = constructor_output_vreg(ctx, v827);
                            // Rule at src/isa/riscv64/lower.isle line 954.
                            return Some(v828);
                        }
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v816 = C::value_regs_get(ctx, v455, 0x0);
                            let v817 = C::xreg_new(ctx, v816);
                            let v818 = constructor_rv_not(ctx, v817);
                            let v820 = C::put_in_regs(ctx, v454);
                            let v821 = C::value_regs_get(ctx, v820, 0x1);
                            let v822 = C::xreg_new(ctx, v821);
                            let v823 = constructor_rv_not(ctx, v822);
                            let v819 = C::xreg_to_reg(ctx, v818);
                            let v824 = C::xreg_to_reg(ctx, v823);
                            let v825 = C::value_regs(ctx, v819, v824);
                            let v826 = C::output(ctx, v825);
                            // Rule at src/isa/riscv64/lower.isle line 949.
                            return Some(v826);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v811 = constructor_move_f_to_x(ctx, v810, v602);
                            let v812 = constructor_rv_not(ctx, v811);
                            let v813 = constructor_float_int_of_same_size(ctx, v602);
                            let v814 = constructor_move_x_to_f(ctx, v812, v813);
                            let v815 = constructor_output_freg(ctx, v814);
                            // Rule at src/isa/riscv64/lower.isle line 946.
                            return Some(v815);
                        }
                        if let Some(v50) = v49 {
                            let v807 = constructor_put_in_xreg(ctx, v454);
                            let v808 = constructor_rv_not(ctx, v807);
                            let v809 = constructor_output_xreg(ctx, v808);
                            // Rule at src/isa/riscv64/lower.isle line 943.
                            return Some(v809);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v843 = C::value_regs_get(ctx, v455, 0x1);
                            let v844 = C::xreg_new(ctx, v843);
                            let v845 = constructor_gen_bitrev(ctx, I64, v844);
                            let v820 = C::put_in_regs(ctx, v454);
                            let v847 = C::value_regs_get(ctx, v820, 0x0);
                            let v848 = C::xreg_new(ctx, v847);
                            let v849 = constructor_gen_bitrev(ctx, I64, v848);
                            let v846 = C::xreg_to_reg(ctx, v845);
                            let v850 = C::xreg_to_reg(ctx, v849);
                            let v851 = C::value_regs(ctx, v846, v850);
                            let v852 = C::output(ctx, v851);
                            // Rule at src/isa/riscv64/lower.isle line 966.
                            return Some(v852);
                        }
                        let v49 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v50) = v49 {
                            let v807 = constructor_put_in_xreg(ctx, v454);
                            let v841 = constructor_gen_bitrev(ctx, v50, v807);
                            let v842 = constructor_output_xreg(ctx, v841);
                            // Rule at src/isa/riscv64/lower.isle line 963.
                            return Some(v842);
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v608 = C::has_zbb(ctx);
                        if v608 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v807 = constructor_put_in_xreg(ctx, v454);
                                    let v902 = constructor_rv_clzw(ctx, v807);
                                    let v903 = constructor_output_xreg(ctx, v902);
                                    // Rule at src/isa/riscv64/lower.isle line 1067.
                                    return Some(v903);
                                }
                                I64 => {
                                    let v807 = constructor_put_in_xreg(ctx, v454);
                                    let v904 = constructor_rv_clz(ctx, v807);
                                    let v905 = constructor_output_xreg(ctx, v904);
                                    // Rule at src/isa/riscv64/lower.isle line 1071.
                                    return Some(v905);
                                }
                                _ => {}
                            }
                            let v510 = C::fits_in_16(ctx, v3);
                            if let Some(v511) = v510 {
                                let v894 = constructor_zext(ctx, v454);
                                let v895 = constructor_rv_clz(ctx, v894);
                                let v896 = C::ty_bits(ctx, v511);
                                let v897 = C::u8_as_i32(ctx, v896);
                                let v899 = C::imm12_const_add(ctx, v897, -0x40);
                                let v900 = constructor_rv_addi(ctx, v895, v899);
                                let v901 = constructor_output_xreg(ctx, v900);
                                // Rule at src/isa/riscv64/lower.isle line 1060.
                                return Some(v901);
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v816 = C::value_regs_get(ctx, v455, 0x0);
                            let v817 = C::xreg_new(ctx, v816);
                            let v864 = C::put_in_regs(ctx, v454);
                            let v865 = C::value_regs_get(ctx, v864, 0x1);
                            let v866 = C::xreg_new(ctx, v865);
                            let v884 = constructor_gen_clz(ctx, v866);
                            let v885 = constructor_gen_clz(ctx, v817);
                            let v886 = constructor_cmp_eqz(ctx, v866);
                            let v887 = C::zero_reg(ctx);
                            let v888 = constructor_gen_select_xreg(ctx, v886, v885, v887);
                            let v889 = constructor_rv_add(ctx, v884, v888);
                            let v891 = constructor_imm(ctx, I64, 0x0);
                            let v890 = C::xreg_to_reg(ctx, v889);
                            let v892 = C::value_regs(ctx, v890, v891);
                            let v893 = C::output(ctx, v892);
                            // Rule at src/isa/riscv64/lower.isle line 1050.
                            return Some(v893);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v807 = constructor_put_in_xreg(ctx, v454);
                            let v882 = constructor_gen_cltz(ctx, true, v807, v579);
                            let v883 = constructor_output_xreg(ctx, v882);
                            // Rule at src/isa/riscv64/lower.isle line 1047.
                            return Some(v883);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v816 = C::value_regs_get(ctx, v455, 0x0);
                            let v817 = C::xreg_new(ctx, v816);
                            let v864 = C::put_in_regs(ctx, v454);
                            let v865 = C::value_regs_get(ctx, v864, 0x1);
                            let v866 = C::xreg_new(ctx, v865);
                            let v917 = constructor_cmp_ltz(ctx, v866);
                            let v918 = constructor_rv_not(ctx, v817);
                            let v919 = constructor_gen_select_xreg(ctx, v917, v918, v817);
                            let v920 = constructor_cmp_ltz(ctx, v866);
                            let v921 = constructor_rv_not(ctx, v866);
                            let v922 = constructor_gen_select_xreg(ctx, v920, v921, v866);
                            let v923 = constructor_gen_clz(ctx, v922);
                            let v924 = constructor_gen_clz(ctx, v919);
                            let v925 = constructor_cmp_eqz(ctx, v922);
                            let v926 = C::zero_reg(ctx);
                            let v927 = constructor_gen_select_xreg(ctx, v925, v924, v926);
                            let v928 = constructor_rv_add(ctx, v923, v927);
                            let v930 = C::imm12_const(ctx, -0x1);
                            let v931 = constructor_rv_addi(ctx, v928, v930);
                            let v933 = constructor_imm(ctx, I64, 0x0);
                            let v932 = C::xreg_to_reg(ctx, v931);
                            let v934 = C::value_regs(ctx, v932, v933);
                            let v935 = C::output(ctx, v934);
                            // Rule at src/isa/riscv64/lower.isle line 1095.
                            return Some(v935);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v906 = constructor_sext(ctx, v454);
                            let v907 = constructor_cmp_ltz(ctx, v906);
                            let v908 = constructor_rv_not(ctx, v906);
                            let v909 = constructor_gen_select_xreg(ctx, v907, v908, v906);
                            let v910 = constructor_gen_clz(ctx, v909);
                            let v911 = C::ty_bits(ctx, v579);
                            let v912 = C::u8_as_i32(ctx, v911);
                            let v914 = C::imm12_const_add(ctx, v912, -0x41);
                            let v915 = constructor_rv_addi(ctx, v910, v914);
                            let v916 = constructor_output_xreg(ctx, v915);
                            // Rule at src/isa/riscv64/lower.isle line 1084.
                            return Some(v916);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v816 = C::value_regs_get(ctx, v455, 0x0);
                            let v817 = C::xreg_new(ctx, v816);
                            let v864 = C::put_in_regs(ctx, v454);
                            let v865 = C::value_regs_get(ctx, v864, 0x1);
                            let v866 = C::xreg_new(ctx, v865);
                            let v867 = C::xreg_to_reg(ctx, v866);
                            let v868 = constructor_lower_ctz(ctx, I64, v867);
                            let v869 = C::xreg_new(ctx, v868);
                            let v870 = C::xreg_to_reg(ctx, v817);
                            let v871 = constructor_lower_ctz(ctx, I64, v870);
                            let v872 = C::xreg_new(ctx, v871);
                            let v873 = constructor_cmp_eqz(ctx, v817);
                            let v874 = C::zero_reg(ctx);
                            let v875 = constructor_gen_select_xreg(ctx, v873, v869, v874);
                            let v876 = constructor_rv_add(ctx, v872, v875);
                            let v878 = constructor_imm(ctx, I64, 0x0);
                            let v877 = C::xreg_to_reg(ctx, v876);
                            let v879 = C::value_regs(ctx, v877, v878);
                            let v880 = C::output(ctx, v879);
                            // Rule at src/isa/riscv64/lower.isle line 1035.
                            return Some(v880);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v861 = C::put_in_reg(ctx, v454);
                            let v862 = constructor_lower_ctz(ctx, v579, v861);
                            let v863 = constructor_output_reg(ctx, v862);
                            // Rule at src/isa/riscv64/lower.isle line 1032.
                            return Some(v863);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v843 = C::value_regs_get(ctx, v455, 0x1);
                            let v844 = C::xreg_new(ctx, v843);
                            let v855 = constructor_gen_bswap(ctx, I64, v844);
                            let v820 = C::put_in_regs(ctx, v454);
                            let v847 = C::value_regs_get(ctx, v820, 0x0);
                            let v848 = C::xreg_new(ctx, v847);
                            let v857 = constructor_gen_bswap(ctx, I64, v848);
                            let v856 = C::xreg_to_reg(ctx, v855);
                            let v858 = C::xreg_to_reg(ctx, v857);
                            let v859 = C::value_regs(ctx, v856, v858);
                            let v860 = C::output(ctx, v859);
                            // Rule at src/isa/riscv64/lower.isle line 992.
                            return Some(v860);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v594 = C::ty_int(ctx, v579);
                            if let Some(v595) = v594 {
                                let v807 = constructor_put_in_xreg(ctx, v454);
                                let v853 = constructor_gen_bswap(ctx, v595, v807);
                                let v854 = constructor_output_xreg(ctx, v853);
                                // Rule at src/isa/riscv64/lower.isle line 989.
                                return Some(v854);
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v977 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v978) = v977 {
                                let v980 = constructor_u64_to_uimm5(ctx, 0x2);
                                if let Some(v981) = v980 {
                                    let v983 = constructor_u64_to_uimm5(ctx, 0x4);
                                    if let Some(v984) = v983 {
                                        let v985 = C::lane_type(ctx, v11);
                                        let v987 = C::ty_mask(ctx, v985);
                                        let v988 = C::u64_and(ctx, 0x5555555555555555, v987);
                                        let v989 = constructor_imm(ctx, v985, v988);
                                        let v990 = C::xreg_new(ctx, v989);
                                        let v991 = constructor_put_in_vreg(ctx, v454);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v992 =
                                            constructor_rv_vsrl_vi(ctx, v991, v978, v169, v170);
                                        let v993 =
                                            constructor_rv_vand_vx(ctx, v992, v990, v169, v170);
                                        let v994 = constructor_put_in_vreg(ctx, v454);
                                        let v995 =
                                            constructor_rv_vsub_vv(ctx, v994, v993, v169, v170);
                                        let v997 = C::u64_and(ctx, 0x3333333333333333, v987);
                                        let v998 = constructor_imm(ctx, v985, v997);
                                        let v999 = C::xreg_new(ctx, v998);
                                        let v1000 =
                                            constructor_rv_vsrl_vi(ctx, v995, v981, v169, v170);
                                        let v1001 =
                                            constructor_rv_vand_vx(ctx, v1000, v999, v169, v170);
                                        let v1002 =
                                            constructor_rv_vand_vx(ctx, v995, v999, v169, v170);
                                        let v1003 =
                                            constructor_rv_vadd_vv(ctx, v1002, v1001, v169, v170);
                                        let v1005 = C::u64_and(ctx, 0xF0F0F0F0F0F0F0F, v987);
                                        let v1006 = constructor_imm(ctx, v985, v1005);
                                        let v1007 = C::xreg_new(ctx, v1006);
                                        let v1008 =
                                            constructor_rv_vsrl_vi(ctx, v1003, v984, v169, v170);
                                        let v1009 =
                                            constructor_rv_vadd_vv(ctx, v1003, v1008, v169, v170);
                                        let v1010 =
                                            constructor_rv_vand_vx(ctx, v1009, v1007, v169, v170);
                                        let v1012 = C::u64_and(ctx, 0x101010101010101, v987);
                                        let v1013 = constructor_imm(ctx, v985, v1012);
                                        let v1014 = C::xreg_new(ctx, v1013);
                                        let v1015 =
                                            constructor_rv_vmul_vx(ctx, v1010, v1014, v169, v170);
                                        let v1016 = C::ty_bits(ctx, v985);
                                        let v1017 = C::u8_as_u64(ctx, v1016);
                                        let v1019 = C::u64_sub(ctx, v1017, 0x8);
                                        let v1020 = constructor_imm(ctx, I64, v1019);
                                        let v1021 = C::xreg_new(ctx, v1020);
                                        let v1022 =
                                            constructor_rv_vsrl_vx(ctx, v1015, v1021, v169, v170);
                                        let v1023 = constructor_output_vreg(ctx, v1022);
                                        // Rule at src/isa/riscv64/lower.isle line 1166.
                                        return Some(v1023);
                                    }
                                }
                            }
                        }
                        let v608 = C::has_zbb(ctx);
                        if v608 == true {
                            match v3 {
                                I32 => {
                                    let v807 = constructor_put_in_xreg(ctx, v454);
                                    let v965 = constructor_rv_cpopw(ctx, v807);
                                    let v966 = constructor_output_xreg(ctx, v965);
                                    // Rule at src/isa/riscv64/lower.isle line 1141.
                                    return Some(v966);
                                }
                                I128 => {
                                    let v455 = C::put_in_regs(ctx, v454);
                                    let v816 = C::value_regs_get(ctx, v455, 0x0);
                                    let v817 = C::xreg_new(ctx, v816);
                                    let v967 = constructor_rv_cpop(ctx, v817);
                                    let v968 = C::value_regs_get(ctx, v455, 0x1);
                                    let v969 = C::xreg_new(ctx, v968);
                                    let v970 = constructor_rv_cpop(ctx, v969);
                                    let v971 = constructor_rv_add(ctx, v967, v970);
                                    let v973 = constructor_imm(ctx, I64, 0x0);
                                    let v972 = C::xreg_to_reg(ctx, v971);
                                    let v974 = C::value_regs(ctx, v972, v973);
                                    let v975 = C::output(ctx, v974);
                                    // Rule at src/isa/riscv64/lower.isle line 1145.
                                    return Some(v975);
                                }
                                _ => {}
                            }
                            let v578 = C::fits_in_64(ctx, v3);
                            if let Some(v579) = v578 {
                                let v894 = constructor_zext(ctx, v454);
                                let v963 = constructor_rv_cpop(ctx, v894);
                                let v964 = constructor_output_xreg(ctx, v963);
                                // Rule at src/isa/riscv64/lower.isle line 1137.
                                return Some(v964);
                            }
                        }
                        if v3 == I128 {
                            let v455 = C::put_in_regs(ctx, v454);
                            let v816 = C::value_regs_get(ctx, v455, 0x0);
                            let v817 = C::xreg_new(ctx, v816);
                            let v952 = constructor_gen_popcnt(ctx, v817);
                            let v953 = C::xreg_new(ctx, v952);
                            let v954 = C::value_regs_get(ctx, v455, 0x1);
                            let v955 = C::xreg_new(ctx, v954);
                            let v956 = constructor_gen_popcnt(ctx, v955);
                            let v957 = C::xreg_new(ctx, v956);
                            let v958 = constructor_rv_add(ctx, v953, v957);
                            let v960 = constructor_imm(ctx, I64, 0x0);
                            let v959 = C::xreg_to_reg(ctx, v958);
                            let v961 = C::value_regs(ctx, v959, v960);
                            let v962 = C::output(ctx, v961);
                            // Rule at src/isa/riscv64/lower.isle line 1129.
                            return Some(v962);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v894 = constructor_zext(ctx, v454);
                            let v950 = constructor_gen_popcnt(ctx, v894);
                            let v951 = constructor_output_reg(ctx, v950);
                            // Rule at src/isa/riscv64/lower.isle line 1126.
                            return Some(v951);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1354 = constructor_rv_vfsqrt_v(ctx, v458, v169, v170);
                            let v1355 = constructor_output_vreg(ctx, v1354);
                            // Rule at src/isa/riscv64/lower.isle line 1549.
                            return Some(v1355);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v1352 = constructor_rv_fsqrt(ctx, v602, &FRM::RNE, v810);
                            let v1353 = constructor_output_freg(ctx, v1352);
                            // Rule at src/isa/riscv64/lower.isle line 1546.
                            return Some(v1353);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1293 = constructor_rv_vfneg_v(ctx, v458, v169, v170);
                            let v1294 = constructor_output_vreg(ctx, v1293);
                            // Rule at src/isa/riscv64/lower.isle line 1493.
                            return Some(v1294);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v1291 = constructor_rv_fneg(ctx, v602, v810);
                            let v1292 = constructor_output_freg(ctx, v1291);
                            // Rule at src/isa/riscv64/lower.isle line 1490.
                            return Some(v1292);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v1289 = constructor_rv_vfabs_v(ctx, v458, v169, v170);
                            let v1290 = constructor_output_vreg(ctx, v1289);
                            // Rule at src/isa/riscv64/lower.isle line 1486.
                            return Some(v1290);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v1287 = constructor_rv_fabs(ctx, v602, v810);
                            let v1288 = constructor_output_freg(ctx, v1287);
                            // Rule at src/isa/riscv64/lower.isle line 1483.
                            return Some(v1288);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v1929 = constructor_gen_vec_round(ctx, v458, &FRM::RUP, v11);
                            let v1930 = constructor_output_vreg(ctx, v1929);
                            // Rule at src/isa/riscv64/lower.isle line 2411.
                            return Some(v1930);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v861 = C::put_in_reg(ctx, v454);
                            let v1926 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v861, v602);
                            let v1927 = constructor_output_reg(ctx, v1926);
                            // Rule at src/isa/riscv64/lower.isle line 2408.
                            return Some(v1927);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v1935 = constructor_gen_vec_round(ctx, v458, &FRM::RDN, v11);
                            let v1936 = constructor_output_vreg(ctx, v1935);
                            // Rule at src/isa/riscv64/lower.isle line 2418.
                            return Some(v1936);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v861 = C::put_in_reg(ctx, v454);
                            let v1932 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v861, v602);
                            let v1933 = constructor_output_reg(ctx, v1932);
                            // Rule at src/isa/riscv64/lower.isle line 2415.
                            return Some(v1933);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v1941 = constructor_gen_vec_round(ctx, v458, &FRM::RTZ, v11);
                            let v1942 = constructor_output_vreg(ctx, v1941);
                            // Rule at src/isa/riscv64/lower.isle line 2425.
                            return Some(v1942);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v861 = C::put_in_reg(ctx, v454);
                            let v1938 =
                                constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v861, v602);
                            let v1939 = constructor_output_reg(ctx, v1938);
                            // Rule at src/isa/riscv64/lower.isle line 2422.
                            return Some(v1939);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v1946 = constructor_gen_vec_round(ctx, v458, &FRM::RNE, v11);
                            let v1947 = constructor_output_vreg(ctx, v1946);
                            // Rule at src/isa/riscv64/lower.isle line 2432.
                            return Some(v1947);
                        }
                        let v601 = C::ty_scalar_float(ctx, v3);
                        if let Some(v602) = v601 {
                            let v861 = C::put_in_reg(ctx, v454);
                            let v1944 = constructor_gen_float_round(
                                ctx,
                                &FloatRoundOP::Nearest,
                                v861,
                                v602,
                            );
                            let v1945 = constructor_output_reg(ctx, v1944);
                            // Rule at src/isa/riscv64/lower.isle line 2429.
                            return Some(v1945);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v807 = constructor_put_in_xreg(ctx, v454);
                    let v1519 = constructor_rv_seqz(ctx, v807);
                    let v1520 = constructor_output_xreg(ctx, v1519);
                    // Rule at src/isa/riscv64/lower.isle line 1791.
                    return Some(v1520);
                }
                &Opcode::IsInvalid => {
                    let v807 = constructor_put_in_xreg(ctx, v454);
                    let v1522 = C::imm12_const(ctx, 0x1);
                    let v1523 = constructor_rv_addi(ctx, v807, v1522);
                    let v1524 = constructor_rv_seqz(ctx, v1523);
                    let v1525 = constructor_output_xreg(ctx, v1524);
                    // Rule at src/isa/riscv64/lower.isle line 1797.
                    return Some(v1525);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v2244 = C::i64_from_iconst(ctx, v454);
                            if let Some(v2245) = v2244 {
                                let v2246 = C::imm5_from_i64(ctx, v2245);
                                if let Some(v2247) = v2246 {
                                    let v2233 = C::zero_reg(ctx);
                                    let v170 = C::vstate_from_type(ctx, v11);
                                    let v2234 = constructor_rv_vmv_vx(ctx, v2233, v170);
                                    let v2240 = constructor_gen_vec_mask(ctx, 0x1);
                                    let v2248 =
                                        constructor_rv_vmerge_vim(ctx, v2234, v2247, v2240, v170);
                                    let v2249 = constructor_output_vreg(ctx, v2248);
                                    // Rule at src/isa/riscv64/lower.isle line 2813.
                                    return Some(v2249);
                                }
                            }
                            let v644 = C::ty_vector_not_float(ctx, v11);
                            if let Some(v645) = v644 {
                                let v2233 = C::zero_reg(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2234 = constructor_rv_vmv_vx(ctx, v2233, v170);
                                let v2240 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2241 = constructor_put_in_xreg(ctx, v454);
                                let v2242 =
                                    constructor_rv_vmerge_vxm(ctx, v2234, v2241, v2240, v170);
                                let v2243 = constructor_output_vreg(ctx, v2242);
                                // Rule at src/isa/riscv64/lower.isle line 2807.
                                return Some(v2243);
                            }
                            let v2231 = C::ty_vector_float(ctx, v11);
                            if let Some(v2232) = v2231 {
                                let v2233 = C::zero_reg(ctx);
                                let v170 = C::vstate_from_type(ctx, v11);
                                let v2234 = constructor_rv_vmv_vx(ctx, v2233, v170);
                                let v2235 = constructor_put_in_freg(ctx, v454);
                                let v2236 = constructor_rv_vfmv_sf(ctx, v2235, v170);
                                let v2237 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2238 =
                                    constructor_rv_vmerge_vvm(ctx, v2234, v2236, v2237, v170);
                                let v2239 = constructor_output_vreg(ctx, v2238);
                                // Rule at src/isa/riscv64/lower.isle line 2800.
                                return Some(v2239);
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1986 = constructor_lower_bmask(ctx, v454, v3);
                        let v1987 = C::output(ctx, v1986);
                        // Rule at src/isa/riscv64/lower.isle line 2464.
                        return Some(v1987);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v455 = C::put_in_regs(ctx, v454);
                        let v816 = C::value_regs_get(ctx, v455, 0x0);
                        let v1438 = constructor_output_reg(ctx, v816);
                        // Rule at src/isa/riscv64/lower.isle line 1644.
                        return Some(v1438);
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v829 = C::def_inst(ctx, v454);
                            if let Some(v830) = v829 {
                                let v831 = &C::inst_data(ctx, v830);
                                if let &InstructionData::Unary {
                                    opcode: ref v2160,
                                    arg: v2161,
                                } = v831
                                {
                                    if let &Opcode::SwidenLow = v2160 {
                                        let v2173 = C::def_inst(ctx, v2161);
                                        if let Some(v2174) = v2173 {
                                            let v2175 = &C::inst_data(ctx, v2174);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2176,
                                                arg: v2177,
                                            } = v2175
                                            {
                                                if let &Opcode::SwidenLow = v2176 {
                                                    let v2183 = constructor_put_in_vreg(ctx, v2177);
                                                    let v169 = &constructor_unmasked(ctx);
                                                    let v170 = C::vstate_from_type(ctx, v11);
                                                    let v2198 = constructor_rv_vsext_vf8(
                                                        ctx, v2183, v169, v170,
                                                    );
                                                    let v2199 = constructor_output_vreg(ctx, v2198);
                                                    // Rule at src/isa/riscv64/lower.isle line 2731.
                                                    return Some(v2199);
                                                }
                                            }
                                        }
                                        let v2168 = constructor_put_in_vreg(ctx, v2161);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2196 =
                                            constructor_rv_vsext_vf4(ctx, v2168, v169, v170);
                                        let v2197 = constructor_output_vreg(ctx, v2196);
                                        // Rule at src/isa/riscv64/lower.isle line 2728.
                                        return Some(v2197);
                                    }
                                }
                            }
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2194 = constructor_rv_vsext_vf2(ctx, v458, v169, v170);
                            let v2195 = constructor_output_vreg(ctx, v2194);
                            // Rule at src/isa/riscv64/lower.isle line 2725.
                            return Some(v2195);
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v829 = C::def_inst(ctx, v454);
                            if let Some(v830) = v829 {
                                let v831 = &C::inst_data(ctx, v830);
                                if let &InstructionData::Unary {
                                    opcode: ref v2160,
                                    arg: v2161,
                                } = v831
                                {
                                    if let &Opcode::SwidenHigh = v2160 {
                                        let v2173 = C::def_inst(ctx, v2161);
                                        if let Some(v2174) = v2173 {
                                            let v2175 = &C::inst_data(ctx, v2174);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2176,
                                                arg: v2177,
                                            } = v2175
                                            {
                                                if let &Opcode::SwidenHigh = v2176 {
                                                    let v2178 = C::value_type(ctx, v2177);
                                                    let v2179 = C::ty_lane_count(ctx, v2178);
                                                    let v2164 = C::ty_lane_count(ctx, v11);
                                                    let v2180 = C::u64_sub(ctx, v2179, v2164);
                                                    let v2181 = C::uimm5_from_u64(ctx, v2180);
                                                    if let Some(v2182) = v2181 {
                                                        let v2183 =
                                                            constructor_put_in_vreg(ctx, v2177);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v2184 = C::vstate_from_type(ctx, v2178);
                                                        let v2185 = constructor_rv_vslidedown_vi(
                                                            ctx, v2183, v2182, v169, v2184,
                                                        );
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v2186 = constructor_rv_vsext_vf8(
                                                            ctx, v2185, v169, v170,
                                                        );
                                                        let v2187 =
                                                            constructor_output_vreg(ctx, v2186);
                                                        // Rule at src/isa/riscv64/lower.isle line 2705.
                                                        return Some(v2187);
                                                    }
                                                }
                                            }
                                        }
                                        let v2162 = C::value_type(ctx, v2161);
                                        let v2163 = C::ty_lane_count(ctx, v2162);
                                        let v2164 = C::ty_lane_count(ctx, v11);
                                        let v2165 = C::u64_sub(ctx, v2163, v2164);
                                        let v2166 = C::uimm5_from_u64(ctx, v2165);
                                        if let Some(v2167) = v2166 {
                                            let v2168 = constructor_put_in_vreg(ctx, v2161);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v2169 = C::vstate_from_type(ctx, v2162);
                                            let v2170 = constructor_rv_vslidedown_vi(
                                                ctx, v2168, v2167, v169, v2169,
                                            );
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v2171 =
                                                constructor_rv_vsext_vf4(ctx, v2170, v169, v170);
                                            let v2172 = constructor_output_vreg(ctx, v2171);
                                            // Rule at src/isa/riscv64/lower.isle line 2701.
                                            return Some(v2172);
                                        }
                                    }
                                }
                            }
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v941 = C::value_type(ctx, v454);
                            let v2157 = constructor_gen_slidedown_half(ctx, v941, v458);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2158 = constructor_rv_vsext_vf2(ctx, v2157, v169, v170);
                            let v2159 = constructor_output_vreg(ctx, v2158);
                            // Rule at src/isa/riscv64/lower.isle line 2698.
                            return Some(v2159);
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v829 = C::def_inst(ctx, v454);
                            if let Some(v830) = v829 {
                                let v831 = &C::inst_data(ctx, v830);
                                if let &InstructionData::Unary {
                                    opcode: ref v2160,
                                    arg: v2161,
                                } = v831
                                {
                                    if let &Opcode::UwidenLow = v2160 {
                                        let v2173 = C::def_inst(ctx, v2161);
                                        if let Some(v2174) = v2173 {
                                            let v2175 = &C::inst_data(ctx, v2174);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2176,
                                                arg: v2177,
                                            } = v2175
                                            {
                                                if let &Opcode::UwidenLow = v2176 {
                                                    let v2183 = constructor_put_in_vreg(ctx, v2177);
                                                    let v169 = &constructor_unmasked(ctx);
                                                    let v170 = C::vstate_from_type(ctx, v11);
                                                    let v2204 = constructor_rv_vzext_vf8(
                                                        ctx, v2183, v169, v170,
                                                    );
                                                    let v2205 = constructor_output_vreg(ctx, v2204);
                                                    // Rule at src/isa/riscv64/lower.isle line 2742.
                                                    return Some(v2205);
                                                }
                                            }
                                        }
                                        let v2168 = constructor_put_in_vreg(ctx, v2161);
                                        let v169 = &constructor_unmasked(ctx);
                                        let v170 = C::vstate_from_type(ctx, v11);
                                        let v2202 =
                                            constructor_rv_vzext_vf4(ctx, v2168, v169, v170);
                                        let v2203 = constructor_output_vreg(ctx, v2202);
                                        // Rule at src/isa/riscv64/lower.isle line 2739.
                                        return Some(v2203);
                                    }
                                }
                            }
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2200 = constructor_rv_vzext_vf2(ctx, v458, v169, v170);
                            let v2201 = constructor_output_vreg(ctx, v2200);
                            // Rule at src/isa/riscv64/lower.isle line 2736.
                            return Some(v2201);
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v829 = C::def_inst(ctx, v454);
                            if let Some(v830) = v829 {
                                let v831 = &C::inst_data(ctx, v830);
                                if let &InstructionData::Unary {
                                    opcode: ref v2160,
                                    arg: v2161,
                                } = v831
                                {
                                    if let &Opcode::UwidenHigh = v2160 {
                                        let v2173 = C::def_inst(ctx, v2161);
                                        if let Some(v2174) = v2173 {
                                            let v2175 = &C::inst_data(ctx, v2174);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2176,
                                                arg: v2177,
                                            } = v2175
                                            {
                                                if let &Opcode::UwidenHigh = v2176 {
                                                    let v2178 = C::value_type(ctx, v2177);
                                                    let v2179 = C::ty_lane_count(ctx, v2178);
                                                    let v2164 = C::ty_lane_count(ctx, v11);
                                                    let v2180 = C::u64_sub(ctx, v2179, v2164);
                                                    let v2181 = C::uimm5_from_u64(ctx, v2180);
                                                    if let Some(v2182) = v2181 {
                                                        let v2183 =
                                                            constructor_put_in_vreg(ctx, v2177);
                                                        let v169 = &constructor_unmasked(ctx);
                                                        let v2184 = C::vstate_from_type(ctx, v2178);
                                                        let v2185 = constructor_rv_vslidedown_vi(
                                                            ctx, v2183, v2182, v169, v2184,
                                                        );
                                                        let v170 = C::vstate_from_type(ctx, v11);
                                                        let v2192 = constructor_rv_vzext_vf8(
                                                            ctx, v2185, v169, v170,
                                                        );
                                                        let v2193 =
                                                            constructor_output_vreg(ctx, v2192);
                                                        // Rule at src/isa/riscv64/lower.isle line 2719.
                                                        return Some(v2193);
                                                    }
                                                }
                                            }
                                        }
                                        let v2162 = C::value_type(ctx, v2161);
                                        let v2163 = C::ty_lane_count(ctx, v2162);
                                        let v2164 = C::ty_lane_count(ctx, v11);
                                        let v2165 = C::u64_sub(ctx, v2163, v2164);
                                        let v2166 = C::uimm5_from_u64(ctx, v2165);
                                        if let Some(v2167) = v2166 {
                                            let v2168 = constructor_put_in_vreg(ctx, v2161);
                                            let v169 = &constructor_unmasked(ctx);
                                            let v2169 = C::vstate_from_type(ctx, v2162);
                                            let v2170 = constructor_rv_vslidedown_vi(
                                                ctx, v2168, v2167, v169, v2169,
                                            );
                                            let v170 = C::vstate_from_type(ctx, v11);
                                            let v2190 =
                                                constructor_rv_vzext_vf4(ctx, v2170, v169, v170);
                                            let v2191 = constructor_output_vreg(ctx, v2190);
                                            // Rule at src/isa/riscv64/lower.isle line 2715.
                                            return Some(v2191);
                                        }
                                    }
                                }
                            }
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v941 = C::value_type(ctx, v454);
                            let v2157 = constructor_gen_slidedown_half(ctx, v941, v458);
                            let v169 = &constructor_unmasked(ctx);
                            let v170 = C::vstate_from_type(ctx, v11);
                            let v2188 = constructor_rv_vzext_vf2(ctx, v2157, v169, v170);
                            let v2189 = constructor_output_vreg(ctx, v2188);
                            // Rule at src/isa/riscv64/lower.isle line 2712.
                            return Some(v2189);
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v894 = constructor_zext(ctx, v454);
                            let v938 = constructor_imm(ctx, I64, 0x0);
                            let v937 = C::xreg_to_reg(ctx, v894);
                            let v939 = C::value_regs(ctx, v937, v938);
                            let v940 = C::output(ctx, v939);
                            // Rule at src/isa/riscv64/lower.isle line 1114.
                            return Some(v940);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v894 = constructor_zext(ctx, v454);
                            let v936 = constructor_output_xreg(ctx, v894);
                            // Rule at src/isa/riscv64/lower.isle line 1112.
                            return Some(v936);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v906 = constructor_sext(ctx, v454);
                            let v945 = C::imm12_const(ctx, 0x3F);
                            let v946 = constructor_rv_srai(ctx, v906, v945);
                            let v943 = C::xreg_to_reg(ctx, v906);
                            let v947 = C::xreg_to_reg(ctx, v946);
                            let v948 = C::value_regs(ctx, v943, v947);
                            let v949 = C::output(ctx, v948);
                            // Rule at src/isa/riscv64/lower.isle line 1120.
                            return Some(v949);
                        }
                        let v578 = C::fits_in_64(ctx, v3);
                        if let Some(v579) = v578 {
                            let v906 = constructor_sext(ctx, v454);
                            let v942 = constructor_output_xreg(ctx, v906);
                            // Rule at src/isa/riscv64/lower.isle line 1118.
                            return Some(v942);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v810 = constructor_put_in_freg(ctx, v454);
                    let v1439 = constructor_rv_fcvtds(ctx, v810);
                    let v1440 = constructor_output_freg(ctx, v1439);
                    // Rule at src/isa/riscv64/lower.isle line 1648.
                    return Some(v1440);
                }
                &Opcode::Fdemote => {
                    let v810 = constructor_put_in_freg(ctx, v454);
                    let v1443 = constructor_rv_fcvtsd(ctx, &FRM::RNE, v810);
                    let v1444 = constructor_output_freg(ctx, v1443);
                    // Rule at src/isa/riscv64/lower.isle line 1658.
                    return Some(v1444);
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            if v11 == F32X4 {
                                let v1446 = C::i8_to_imm5(ctx, 0x0);
                                if let Some(v1447) = v1446 {
                                    let v458 = constructor_put_in_vreg(ctx, v454);
                                    let v169 = &constructor_unmasked(ctx);
                                    let v170 = C::vstate_from_type(ctx, v11);
                                    let v1448 = C::vstate_mf2(ctx, v170);
                                    let v1449 = constructor_rv_vfncvt_f_f_w(ctx, v458, v169, v1448);
                                    let v1451 = constructor_gen_vec_mask(ctx, 0xC);
                                    let v1452 =
                                        constructor_rv_vmerge_vim(ctx, v1449, v1447, v1451, v170);
                                    let v1453 = constructor_output_vreg(ctx, v1452);
                                    // Rule at src/isa/riscv64/lower.isle line 1665.
                                    return Some(v1453);
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v182 = C::ty_half_width(ctx, v11);
                            if let Some(v183) = v182 {
                                let v458 = constructor_put_in_vreg(ctx, v454);
                                let v169 = &constructor_unmasked(ctx);
                                let v187 = C::vstate_from_type(ctx, v183);
                                let v188 = C::vstate_mf2(ctx, v187);
                                let v1441 = constructor_rv_vfwcvt_f_f_v(ctx, v458, v169, v188);
                                let v1442 = constructor_output_vreg(ctx, v1441);
                                // Rule at src/isa/riscv64/lower.isle line 1653.
                                return Some(v1442);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v810 = constructor_put_in_freg(ctx, v454);
                        let v1829 = constructor_put_in_freg(ctx, v454);
                        let v941 = C::value_type(ctx, v454);
                        let v1830 = constructor_rv_feq(ctx, v941, v810, v1829);
                        let v1832 =
                            constructor_gen_trapz(ctx, v1830, &TrapCode::BadConversionToInteger);
                        let v1834 = C::fcvt_umin_bound(ctx, v941, false);
                        let v1835 = constructor_imm(ctx, v941, v1834);
                        let v1836 = C::freg_new(ctx, v1835);
                        let v1837 = constructor_put_in_freg(ctx, v454);
                        let v1838 = constructor_rv_fle(ctx, v941, v1837, v1836);
                        let v1840 = constructor_gen_trapnz(ctx, v1838, &TrapCode::IntegerOverflow);
                        let v3 = C::value_type(ctx, v2);
                        let v1841 = C::fcvt_umax_bound(ctx, v941, v3, false);
                        let v1842 = constructor_imm(ctx, v941, v1841);
                        let v1843 = C::freg_new(ctx, v1842);
                        let v1844 = constructor_put_in_freg(ctx, v454);
                        let v1845 = constructor_rv_fge(ctx, v941, v1844, v1843);
                        let v1846 = constructor_gen_trapnz(ctx, v1845, &TrapCode::IntegerOverflow);
                        let v1847 = constructor_put_in_freg(ctx, v454);
                        let v1848 = constructor_lower_inbounds_fcvt_to_uint(ctx, v3, v941, v1847);
                        let v1849 = constructor_output_xreg(ctx, v1848);
                        // Rule at src/isa/riscv64/lower.isle line 2247.
                        return Some(v1849);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v810 = constructor_put_in_freg(ctx, v454);
                        let v1829 = constructor_put_in_freg(ctx, v454);
                        let v941 = C::value_type(ctx, v454);
                        let v1830 = constructor_rv_feq(ctx, v941, v810, v1829);
                        let v1832 =
                            constructor_gen_trapz(ctx, v1830, &TrapCode::BadConversionToInteger);
                        let v3 = C::value_type(ctx, v2);
                        let v1850 = C::fcvt_smin_bound(ctx, v941, v3, false);
                        let v1851 = constructor_imm(ctx, v941, v1850);
                        let v1852 = C::freg_new(ctx, v1851);
                        let v1837 = constructor_put_in_freg(ctx, v454);
                        let v1853 = constructor_rv_fle(ctx, v941, v1837, v1852);
                        let v1854 = constructor_gen_trapnz(ctx, v1853, &TrapCode::IntegerOverflow);
                        let v1855 = C::fcvt_smax_bound(ctx, v941, v3, false);
                        let v1856 = constructor_imm(ctx, v941, v1855);
                        let v1857 = C::freg_new(ctx, v1856);
                        let v1844 = constructor_put_in_freg(ctx, v454);
                        let v1858 = constructor_rv_fge(ctx, v941, v1844, v1857);
                        let v1859 = constructor_gen_trapnz(ctx, v1858, &TrapCode::IntegerOverflow);
                        let v1847 = constructor_put_in_freg(ctx, v454);
                        let v1860 = constructor_lower_inbounds_fcvt_to_sint(ctx, v3, v941, v1847);
                        let v1861 = constructor_output_xreg(ctx, v1860);
                        // Rule at src/isa/riscv64/lower.isle line 2264.
                        return Some(v1861);
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1446 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1447) = v1446 {
                                let v458 = constructor_put_in_vreg(ctx, v454);
                                let v1867 = constructor_put_in_vreg(ctx, v454);
                                let v169 = &constructor_unmasked(ctx);
                                let v941 = C::value_type(ctx, v454);
                                let v1868 = C::vstate_from_type(ctx, v941);
                                let v1869 = constructor_rv_vmfne_vv(ctx, v458, v1867, v169, v1868);
                                let v1870 = constructor_put_in_vreg(ctx, v454);
                                let v1877 =
                                    constructor_rv_vfcvt_rtz_xu_f_v(ctx, v1870, v169, v1868);
                                let v1878 =
                                    constructor_rv_vmerge_vim(ctx, v1877, v1447, v1869, v1868);
                                let v1879 = constructor_output_vreg(ctx, v1878);
                                // Rule at src/isa/riscv64/lower.isle line 2342.
                                return Some(v1879);
                            }
                        }
                        let v941 = C::value_type(ctx, v454);
                        let v1862 = C::ty_scalar_float(ctx, v941);
                        if let Some(v1863) = v1862 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v1829 = constructor_put_in_freg(ctx, v454);
                            let v1874 = constructor_lower_fcvt_to_uint_sat(ctx, v1863, v3, v1829);
                            let v1875 = constructor_handle_fcvt_to_int_nan(ctx, v1863, v810, v1874);
                            let v1876 = constructor_output_xreg(ctx, v1875);
                            // Rule at src/isa/riscv64/lower.isle line 2323.
                            return Some(v1876);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v1446 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1447) = v1446 {
                                let v458 = constructor_put_in_vreg(ctx, v454);
                                let v1867 = constructor_put_in_vreg(ctx, v454);
                                let v169 = &constructor_unmasked(ctx);
                                let v941 = C::value_type(ctx, v454);
                                let v1868 = C::vstate_from_type(ctx, v941);
                                let v1869 = constructor_rv_vmfne_vv(ctx, v458, v1867, v169, v1868);
                                let v1870 = constructor_put_in_vreg(ctx, v454);
                                let v1871 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v1870, v169, v1868);
                                let v1872 =
                                    constructor_rv_vmerge_vim(ctx, v1871, v1447, v1869, v1868);
                                let v1873 = constructor_output_vreg(ctx, v1872);
                                // Rule at src/isa/riscv64/lower.isle line 2315.
                                return Some(v1873);
                            }
                        }
                        let v941 = C::value_type(ctx, v454);
                        let v1862 = C::ty_scalar_float(ctx, v941);
                        if let Some(v1863) = v1862 {
                            let v810 = constructor_put_in_freg(ctx, v454);
                            let v1829 = constructor_put_in_freg(ctx, v454);
                            let v1864 = constructor_lower_fcvt_to_sint_sat(ctx, v1863, v3, v1829);
                            let v1865 = constructor_handle_fcvt_to_int_nan(ctx, v1863, v810, v1864);
                            let v1866 = constructor_output_xreg(ctx, v1865);
                            // Rule at src/isa/riscv64/lower.isle line 2280.
                            return Some(v1866);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v941 = C::value_type(ctx, v454);
                            let v1868 = C::vstate_from_type(ctx, v941);
                            let v1908 = constructor_rv_vfcvt_f_xu_v(ctx, v458, v169, v1868);
                            let v1909 = constructor_output_vreg(ctx, v1908);
                            // Rule at src/isa/riscv64/lower.isle line 2389.
                            return Some(v1909);
                        }
                        match v3 {
                            F32 => {
                                let v941 = C::value_type(ctx, v454);
                                match v941 {
                                    I32 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1898 = constructor_rv_fcvtswu(ctx, &FRM::RNE, v807);
                                        let v1899 = constructor_output_freg(ctx, v1898);
                                        // Rule at src/isa/riscv64/lower.isle line 2374.
                                        return Some(v1899);
                                    }
                                    I64 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1900 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v807);
                                        let v1901 = constructor_output_freg(ctx, v1900);
                                        // Rule at src/isa/riscv64/lower.isle line 2377.
                                        return Some(v1901);
                                    }
                                    _ => {}
                                }
                                let v1880 = C::fits_in_16(ctx, v941);
                                if let Some(v1881) = v1880 {
                                    let v894 = constructor_zext(ctx, v454);
                                    let v1896 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v894);
                                    let v1897 = constructor_output_freg(ctx, v1896);
                                    // Rule at src/isa/riscv64/lower.isle line 2371.
                                    return Some(v1897);
                                }
                            }
                            F64 => {
                                let v941 = C::value_type(ctx, v454);
                                match v941 {
                                    I32 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1904 = constructor_rv_fcvtdwu(ctx, v807);
                                        let v1905 = constructor_output_freg(ctx, v1904);
                                        // Rule at src/isa/riscv64/lower.isle line 2383.
                                        return Some(v1905);
                                    }
                                    I64 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1906 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v807);
                                        let v1907 = constructor_output_freg(ctx, v1906);
                                        // Rule at src/isa/riscv64/lower.isle line 2386.
                                        return Some(v1907);
                                    }
                                    _ => {}
                                }
                                let v1880 = C::fits_in_16(ctx, v941);
                                if let Some(v1881) = v1880 {
                                    let v894 = constructor_zext(ctx, v454);
                                    let v1902 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v894);
                                    let v1903 = constructor_output_freg(ctx, v1902);
                                    // Rule at src/isa/riscv64/lower.isle line 2380.
                                    return Some(v1903);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v10 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v11) = v10 {
                            let v458 = constructor_put_in_vreg(ctx, v454);
                            let v169 = &constructor_unmasked(ctx);
                            let v941 = C::value_type(ctx, v454);
                            let v1868 = C::vstate_from_type(ctx, v941);
                            let v1894 = constructor_rv_vfcvt_f_x_v(ctx, v458, v169, v1868);
                            let v1895 = constructor_output_vreg(ctx, v1894);
                            // Rule at src/isa/riscv64/lower.isle line 2367.
                            return Some(v1895);
                        }
                        match v3 {
                            F32 => {
                                let v941 = C::value_type(ctx, v454);
                                match v941 {
                                    I32 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1884 = constructor_rv_fcvtsw(ctx, &FRM::RNE, v807);
                                        let v1885 = constructor_output_freg(ctx, v1884);
                                        // Rule at src/isa/riscv64/lower.isle line 2352.
                                        return Some(v1885);
                                    }
                                    I64 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1886 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v807);
                                        let v1887 = constructor_output_freg(ctx, v1886);
                                        // Rule at src/isa/riscv64/lower.isle line 2355.
                                        return Some(v1887);
                                    }
                                    _ => {}
                                }
                                let v1880 = C::fits_in_16(ctx, v941);
                                if let Some(v1881) = v1880 {
                                    let v906 = constructor_sext(ctx, v454);
                                    let v1882 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v906);
                                    let v1883 = constructor_output_freg(ctx, v1882);
                                    // Rule at src/isa/riscv64/lower.isle line 2349.
                                    return Some(v1883);
                                }
                            }
                            F64 => {
                                let v941 = C::value_type(ctx, v454);
                                match v941 {
                                    I32 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1890 = constructor_rv_fcvtdw(ctx, v807);
                                        let v1891 = constructor_output_freg(ctx, v1890);
                                        // Rule at src/isa/riscv64/lower.isle line 2361.
                                        return Some(v1891);
                                    }
                                    I64 => {
                                        let v807 = constructor_put_in_xreg(ctx, v454);
                                        let v1892 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v807);
                                        let v1893 = constructor_output_freg(ctx, v1892);
                                        // Rule at src/isa/riscv64/lower.isle line 2364.
                                        return Some(v1893);
                                    }
                                    _ => {}
                                }
                                let v1880 = C::fits_in_16(ctx, v941);
                                if let Some(v1881) = v1880 {
                                    let v906 = constructor_sext(ctx, v454);
                                    let v1888 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v906);
                                    let v1889 = constructor_output_freg(ctx, v1888);
                                    // Rule at src/isa/riscv64/lower.isle line 2358.
                                    return Some(v1889);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v455 = C::put_in_regs(ctx, v454);
                    let v816 = C::value_regs_get(ctx, v455, 0x0);
                    let v817 = C::xreg_new(ctx, v816);
                    let v864 = C::put_in_regs(ctx, v454);
                    let v865 = C::value_regs_get(ctx, v864, 0x1);
                    let v866 = C::xreg_new(ctx, v865);
                    let v870 = C::xreg_to_reg(ctx, v817);
                    let v1612 = C::value_reg(ctx, v870);
                    let v867 = C::xreg_to_reg(ctx, v866);
                    let v1613 = C::value_reg(ctx, v867);
                    let v1614 = C::output_pair(ctx, v1612, v1613);
                    // Rule at src/isa/riscv64/lower.isle line 1856.
                    return Some(v1614);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v12,
            constant_handle: v13,
        } => {
            if let &Opcode::Vconst = v12 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v10 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v11) = v10 {
                        let v14 = C::const_to_vconst(ctx, v13);
                        let v15 = constructor_gen_constant(ctx, v11, v14);
                        let v16 = constructor_output_vreg(ctx, v15);
                        // Rule at src/isa/riscv64/lower.isle line 14.
                        return Some(v16);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1910,
            global_value: v1911,
        } => {
            match v1910 {
                &Opcode::SymbolValue => {
                    let v1912 = C::symbol_value_data(ctx, v1911);
                    if let Some(v1913) = v1912 {
                        let v1917 = C::load_ext_name(ctx, v1913.0, v1913.2);
                        let v1918 = constructor_output_reg(ctx, v1917);
                        // Rule at src/isa/riscv64/lower.isle line 2394.
                        return Some(v1918);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1912 = C::symbol_value_data(ctx, v1911);
                        if let Some(v1913) = v1912 {
                            let v3 = C::value_type(ctx, v2);
                            let v1919 = &C::tls_model(ctx, v3);
                            if let &TlsModel::ElfGd = v1919 {
                                let v1920 = constructor_elf_tls_get_addr(ctx, v1913.0);
                                let v1921 = constructor_output_reg(ctx, v1920);
                                // Rule at src/isa/riscv64/lower.isle line 2399.
                                return Some(v1921);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F32const = v17 {
                let v19 = C::u32_from_ieee32(ctx, v18);
                let v21 = C::u32_as_u64(ctx, v19);
                let v22 = constructor_imm(ctx, F32, v21);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = constructor_imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/riscv64/lower.isle line 24.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 61.
            return Some(AluOPRRR::Sh1add);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 62.
            return Some(AluOPRRR::Sh2add);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 63.
            return Some(AluOPRRR::Sh3add);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            // Rule at src/isa/riscv64/lower.isle line 83.
            return Some(AluOPRRR::Sh1adduw);
        }
        0x2 => {
            // Rule at src/isa/riscv64/lower.isle line 84.
            return Some(AluOPRRR::Sh2adduw);
        }
        0x3 => {
            // Rule at src/isa/riscv64/lower.isle line 85.
            return Some(AluOPRRR::Sh3adduw);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term nonzero_divisor.
pub fn constructor_nonzero_divisor<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(
        ctx,
        &IntCC::Equal,
        arg0,
        v2,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/lower.isle line 550.
    return arg0;
}

// Generated as internal constructor for term safe_sdiv_divisor.
pub fn constructor_safe_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_nonzero_divisor(ctx, arg2);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_as_u64(ctx, v6);
    let v9 = C::u64_sub(ctx, v7, 0x1);
    let v10 = C::u64_shl(ctx, 0xFFFFFFFFFFFFFFFF, v9);
    let v11 = constructor_imm(ctx, I64, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = constructor_rv_xor(ctx, arg1, v12);
    let v14 = constructor_rv_not(ctx, v3);
    let v15 = constructor_rv_or(ctx, v13, v14);
    let v17 = C::zero_reg(ctx);
    let v19 = constructor_gen_trapif(ctx, &IntCC::Equal, v15, v17, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/lower.isle line 590.
    return v3;
}

// Generated as internal constructor for term gen_bitrev.
pub fn constructor_gen_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    match arg0 {
        I8 => {
            let v15 = C::xreg_to_reg(ctx, arg1);
            let v17 = constructor_gen_brev8(ctx, v15, I8);
            let v18 = C::xreg_new(ctx, v17);
            // Rule at src/isa/riscv64/lower.isle line 980.
            return v18;
        }
        I64 => {
            let v19 = constructor_gen_bswap(ctx, I64, arg1);
            let v20 = C::xreg_to_reg(ctx, v19);
            let v21 = constructor_gen_brev8(ctx, v20, I64);
            let v22 = C::xreg_new(ctx, v21);
            // Rule at src/isa/riscv64/lower.isle line 983.
            return v22;
        }
        _ => {}
    }
    let v1 = C::ty_16_or_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::ty_bits(ctx, v4);
            let v8 = C::u8_as_u64(ctx, v7);
            let v9 = C::u64_sub(ctx, 0x40, v8);
            let v10 = constructor_u64_to_imm12(ctx, v9);
            if let Some(v11) = v10 {
                let v13 = constructor_gen_bitrev(ctx, I64, arg1);
                let v14 = constructor_rv_srli(ctx, v13, v11);
                // Rule at src/isa/riscv64/lower.isle line 976.
                return v14;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bitrev", "src/isa/riscv64/lower.isle line 974"
    )
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v24 = C::has_zbb(ctx);
    if v24 == true {
        if arg0 == I64 {
            let v30 = constructor_rv_rev8(ctx, arg1);
            // Rule at src/isa/riscv64/lower.isle line 1027.
            return v30;
        }
        let v20 = C::ty_16_or_32(ctx, arg0);
        if let Some(v21) = v20 {
            let v22 = C::ty_int(ctx, v21);
            if let Some(v23) = v22 {
                let v25 = C::ty_bits(ctx, v23);
                let v26 = C::u8_as_u64(ctx, v25);
                let v27 = C::u64_sub(ctx, 0x40, v26);
                let v28 = constructor_u64_to_imm12(ctx, v27);
                if let Some(v29) = v28 {
                    let v30 = constructor_rv_rev8(ctx, arg1);
                    let v31 = constructor_rv_srli(ctx, v30, v29);
                    // Rule at src/isa/riscv64/lower.isle line 1022.
                    return v31;
                }
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = C::u64_sub(ctx, 0x40, v7);
                let v16 = C::imm_from_bits(ctx, v15);
                let v17 = constructor_rv_slli(ctx, v13, v16);
                let v18 = constructor_rv_srli(ctx, v17, v16);
                let v19 = constructor_rv_or(ctx, v11, v18);
                // Rule at src/isa/riscv64/lower.isle line 1003.
                return v19;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src/isa/riscv64/lower.isle line 1002.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src/isa/riscv64/lower.isle line 999"
    )
}

// Generated as internal constructor for term gen_clz.
pub fn constructor_gen_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v4 = C::has_zbb(ctx);
    if v4 == true {
        let v5 = constructor_rv_clz(ctx, arg0);
        // Rule at src/isa/riscv64/lower.isle line 1078.
        return v5;
    }
    let v3 = constructor_gen_cltz(ctx, true, arg0, I64);
    // Rule at src/isa/riscv64/lower.isle line 1076.
    return v3;
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src/isa/riscv64/lower.isle line 1591.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src/isa/riscv64/lower.isle line 1619.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    // Rule at src/isa/riscv64/lower.isle line 1622.
    return v8;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src/isa/riscv64/lower.isle line 1626.
        return v6;
    }
    // Rule at src/isa/riscv64/lower.isle line 1629.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: AMode,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v13 = constructor_rv_vzext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 2022.
            return v13;
        }
        &ExtendOp::Signed => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v12 = constructor_rv_vsext_vf2(ctx, v10, v8, v11);
            // Rule at src/isa/riscv64/lower.isle line 2016.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src/isa/riscv64/lower.isle line 2014"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> XReg {
    match arg0 {
        &IntCC::Equal => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v20 = constructor_rv_seqz(ctx, v19);
                        // Rule at src/isa/riscv64/lower.isle line 2096.
                        return v20;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v12 = constructor_rv_seqz(ctx, v11);
                        // Rule at src/isa/riscv64/lower.isle line 2093.
                        return v12;
                    }
                }
            }
        }
        &IntCC::NotEqual => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v22 = constructor_rv_snez(ctx, v19);
                        // Rule at src/isa/riscv64/lower.isle line 2104.
                        return v22;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v21 = constructor_rv_snez(ctx, v11);
                        // Rule at src/isa/riscv64/lower.isle line 2101.
                        return v21;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThan => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v24 = constructor_rv_slti(ctx, v18, v17);
                        // Rule at src/isa/riscv64/lower.isle line 2112.
                        return v24;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v47 = &C::intcc_complement(ctx, arg0);
                        let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                        let v50 = C::imm12_const(ctx, 0x1);
                        let v51 = constructor_rv_xori(ctx, v48, v50);
                        // Rule at src/isa/riscv64/lower.isle line 2123.
                        return v51;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v23 = constructor_rv_slti(ctx, v10, v9);
                        // Rule at src/isa/riscv64/lower.isle line 2109.
                        return v23;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v36 = C::def_inst(ctx, arg1);
            if let Some(v37) = v36 {
                let v38 = &C::inst_data(ctx, v37);
                if let &InstructionData::UnaryImm {
                    opcode: ref v39,
                    imm: v40,
                } = v38
                {
                    if let &Opcode::Iconst = v39 {
                        let v41 = C::u64_from_imm64(ctx, v40);
                        let v42 = C::u64_is_zero(ctx, v41);
                        if v42 == false {
                            let v43 = C::imm12_from_u64(ctx, v41);
                            if let Some(v44) = v43 {
                                let v45 = constructor_zext(ctx, arg2);
                                let v46 = constructor_rv_sltiu(ctx, v45, v44);
                                // Rule at src/isa/riscv64/lower.isle line 2118.
                                return v46;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v47 = &C::intcc_complement(ctx, arg0);
                                let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                                let v50 = C::imm12_const(ctx, 0x1);
                                let v51 = constructor_rv_xori(ctx, v48, v50);
                                // Rule at src/isa/riscv64/lower.isle line 2126.
                                return v51;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v34 = constructor_zext(ctx, arg1);
                                let v35 = constructor_rv_sltiu(ctx, v34, v33);
                                // Rule at src/isa/riscv64/lower.isle line 2115.
                                return v35;
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let v3 = constructor_icmp_to_int_compare(ctx, arg0, arg1, arg2);
    let v4 = constructor_lower_int_compare(ctx, v3);
    // Rule at src/isa/riscv64/lower.isle line 2089.
    return v4;
}

// Generated as internal constructor for term lower_int_compare.
pub fn constructor_lower_int_compare<C: Context>(ctx: &mut C, arg0: IntegerCompare) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    match &v1.0 {
        &IntCC::Equal => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v12 = constructor_rv_seqz(ctx, v1.2);
                // Rule at src/isa/riscv64/lower.isle line 2139.
                return v12;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v9 = constructor_rv_seqz(ctx, v1.1);
                // Rule at src/isa/riscv64/lower.isle line 2137.
                return v9;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v6 = constructor_rv_seqz(ctx, v5);
            // Rule at src/isa/riscv64/lower.isle line 2135.
            return v6;
        }
        &IntCC::NotEqual => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v15 = constructor_rv_snez(ctx, v1.2);
                // Rule at src/isa/riscv64/lower.isle line 2146.
                return v15;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v14 = constructor_rv_snez(ctx, v1.1);
                // Rule at src/isa/riscv64/lower.isle line 2144.
                return v14;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v13 = constructor_rv_snez(ctx, v5);
            // Rule at src/isa/riscv64/lower.isle line 2142.
            return v13;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            // Rule at src/isa/riscv64/lower.isle line 2154.
            return v18;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v16, v21);
            // Rule at src/isa/riscv64/lower.isle line 2164.
            return v24;
        }
        &IntCC::SignedLessThan => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            // Rule at src/isa/riscv64/lower.isle line 2149.
            return v16;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 0x1);
            let v22 = constructor_rv_xori(ctx, v18, v21);
            // Rule at src/isa/riscv64/lower.isle line 2159.
            return v22;
        }
        &IntCC::UnsignedGreaterThan => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            // Rule at src/isa/riscv64/lower.isle line 2156.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 0x1);
            let v25 = constructor_rv_xori(ctx, v17, v21);
            // Rule at src/isa/riscv64/lower.isle line 2166.
            return v25;
        }
        &IntCC::UnsignedLessThan => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            // Rule at src/isa/riscv64/lower.isle line 2151.
            return v17;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 0x1);
            let v23 = constructor_rv_xori(ctx, v19, v21);
            // Rule at src/isa/riscv64/lower.isle line 2161.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_int_compare", "src/isa/riscv64/lower.isle line 2132"
    )
}

// Generated as internal constructor for term lower_icmp_i128.
pub fn constructor_lower_icmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> XReg {
    let v25 = &C::intcc_unsigned(ctx, arg0);
    if let &IntCC::UnsignedLessThan = v25 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v26 = C::value_regs_get(ctx, arg1, 0x1);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v27 = C::value_regs_get(ctx, arg2, 0x1);
        let v28 = C::xreg_new(ctx, v26);
        let v29 = C::xreg_new(ctx, v27);
        let v30 = C::int_compare(ctx, arg0, v28, v29);
        let v31 = constructor_lower_int_compare(ctx, v30);
        let v32 = C::xreg_new(ctx, v4);
        let v33 = C::xreg_new(ctx, v6);
        let v34 = constructor_rv_sltu(ctx, v32, v33);
        let v35 = C::xreg_new(ctx, v26);
        let v36 = C::xreg_new(ctx, v27);
        let v37 = constructor_rv_xor(ctx, v35, v36);
        let v38 = constructor_cmp_eqz(ctx, v37);
        let v39 = constructor_gen_select_xreg(ctx, v38, v34, v31);
        // Rule at src/isa/riscv64/lower.isle line 2207.
        return v39;
    }
    match arg0 {
        &IntCC::Equal => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v16 = constructor_rv_seqz(ctx, v15);
            // Rule at src/isa/riscv64/lower.isle line 2178.
            return v16;
        }
        &IntCC::NotEqual => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v17 = constructor_rv_snez(ctx, v15);
            // Rule at src/isa/riscv64/lower.isle line 2182.
            return v17;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src/isa/riscv64/lower.isle line 2188.
            return v19;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2196.
            return v24;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2194.
            return v24;
        }
        &IntCC::UnsignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src/isa/riscv64/lower.isle line 2190.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2200.
            return v24;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src/isa/riscv64/lower.isle line 2198.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_i128", "src/isa/riscv64/lower.isle line 2177"
    )
}

// Generated as internal constructor for term lower_float_compare.
pub fn constructor_lower_float_compare<C: Context>(ctx: &mut C, arg0: &FloatCompare) -> XReg {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            // Rule at src/isa/riscv64/lower.isle line 2227.
            return v1;
        }
        &FloatCompare::Zero { r: v2 } => {
            let v3 = constructor_rv_seqz(ctx, v2);
            // Rule at src/isa/riscv64/lower.isle line 2228.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_float_compare", "src/isa/riscv64/lower.isle line 2226"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_uint.
pub fn constructor_lower_inbounds_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtlu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2258.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtwu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2256.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_uint", "src/isa/riscv64/lower.isle line 2255"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_sint.
pub fn constructor_lower_inbounds_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtl(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2275.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtw(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src/isa/riscv64/lower.isle line 2273.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_sint", "src/isa/riscv64/lower.isle line 2272"
    )
}

// Generated as internal constructor for term lower_fcvt_to_sint_sat.
pub fn constructor_lower_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v16 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2291.
            return v16;
        }
        I64 => {
            let v17 = constructor_rv_fcvtl(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2292.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::fcvt_smax_bound(ctx, arg0, v3, true);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::fcvt_smin_bound(ctx, arg0, v3, true);
        let v10 = constructor_imm(ctx, arg0, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_fmax(ctx, arg0, v11, arg2);
        let v13 = constructor_rv_fmin(ctx, arg0, v8, v12);
        let v15 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, v13);
        // Rule at src/isa/riscv64/lower.isle line 2286.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_sint_sat", "src/isa/riscv64/lower.isle line 2285"
    )
}

// Generated as internal constructor for term handle_fcvt_to_int_nan.
pub fn constructor_handle_fcvt_to_int_nan<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    let v4 = constructor_rv_neg(ctx, v3);
    let v5 = constructor_rv_and(ctx, arg2, v4);
    // Rule at src/isa/riscv64/lower.isle line 2310.
    return v5;
}

// Generated as internal constructor for term lower_fcvt_to_uint_sat.
pub fn constructor_lower_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v15 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2334.
            return v15;
        }
        I64 => {
            let v16 = constructor_rv_fcvtlu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src/isa/riscv64/lower.isle line 2335.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::fcvt_umax_bound(ctx, arg0, v3, true);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_rv_fmvdx(ctx, v9);
        let v11 = constructor_rv_fmax(ctx, arg0, v10, arg2);
        let v12 = constructor_rv_fmin(ctx, arg0, v8, v11);
        let v14 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, v12);
        // Rule at src/isa/riscv64/lower.isle line 2329.
        return v14;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_uint_sat", "src/isa/riscv64/lower.isle line 2328"
    )
}
