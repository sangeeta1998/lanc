// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_opt.isle
// - src/opts/arithmetic.isle
// - src/opts/bitops.isle
// - src/opts/cprop.isle
// - src/opts/extends.isle
// - src/opts/icmp.isle
// - src/opts/remat.isle
// - src/opts/selects.isle
// - src/opts/shifts.isle
// - src/opts/vector.isle
// - /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_etor_iter: ContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_etor(&mut self, arg0: Value) -> Self::inst_data_etor_iter;
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 328.
    return v5;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src/prelude_opt.isle line 20.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 21.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 22.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 23.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 24.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 25.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 26.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 27.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 28.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 29.
    return v4;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> impl ContextIter<Context = C, Output = Value> {
    let mut returns = ConstructorVec::new();
    let v1 = C::inst_data_etor(ctx, arg0);
    let mut v1 = v1;
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v831 =
                                                            constructor_smin(ctx, v763, v37, v39);
                                                        let v832 =
                                                            constructor_splat(ctx, v2.0, v831);
                                                        // Rule at src/opts/vector.isle line 54.
                                                        returns.push(v832);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v833 =
                                                            constructor_umin(ctx, v763, v37, v39);
                                                        let v834 =
                                                            constructor_splat(ctx, v2.0, v833);
                                                        // Rule at src/opts/vector.isle line 57.
                                                        returns.push(v834);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v835 =
                                                            constructor_smax(ctx, v763, v37, v39);
                                                        let v836 =
                                                            constructor_splat(ctx, v2.0, v835);
                                                        // Rule at src/opts/vector.isle line 60.
                                                        returns.push(v836);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v837 =
                                                            constructor_umax(ctx, v763, v37, v39);
                                                        let v838 =
                                                            constructor_splat(ctx, v2.0, v837);
                                                        // Rule at src/opts/vector.isle line 63.
                                                        returns.push(v838);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    match v123 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            if v2.0 == v136.0 {
                                                                                let v535 = constructor_iadd(ctx, v2.0, v125.1, v7.1);
                                                                                let v536 = constructor_iadd(ctx, v2.0, v125.0, v535);
                                                                                // Rule at src/opts/cprop.isle line 125.
                                                                                returns.push(v536);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            if v2.0 == v136.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                let v548 = C::u64_sub(ctx, v16, v141);
                                                                                let v549 = C::imm64_masked(ctx, v2.0, v548);
                                                                                let v550 = constructor_iconst(ctx, v2.0, v549);
                                                                                let v552 = constructor_iadd(ctx, v2.0, v125.0, v550);
                                                                                // Rule at src/opts/cprop.isle line 147.
                                                                                returns.push(v552);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let v153 =
                                                                    C::inst_data_etor(ctx, v125.0);
                                                                let mut v153 = v153;
                                                                while let Some(v154) =
                                                                    v153.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v541,
                                                                        imm: v542,
                                                                    } = &v154.1 {
                                                                        if let &Opcode::Iconst = v541 {
                                                                            if v2.0 == v154.0 {
                                                                                let v543 = C::u64_from_imm64(ctx, v542);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v553 = C::u64_add(ctx, v543, v16);
                                                                                let v554 = C::imm64_masked(ctx, v2.0, v553);
                                                                                let v555 = constructor_iconst(ctx, v2.0, v554);
                                                                                let v556 = constructor_isub(ctx, v2.0, v555, v125.1);
                                                                                // Rule at src/opts/cprop.isle line 151.
                                                                                returns.push(v556);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    match v36 {
                                        &Opcode::Splat => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v38,
                                                        arg: v39,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Splat = v38 {
                                                            if v2.0 == v11.0 {
                                                                let v763 = C::lane_type(ctx, v2.0);
                                                                let v815 = constructor_iadd(
                                                                    ctx, v763, v37, v39,
                                                                );
                                                                let v816 = constructor_splat(
                                                                    ctx, v2.0, v815,
                                                                );
                                                                // Rule at src/opts/vector.isle line 30.
                                                                returns.push(v816);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                if v2.0 == v11.0 {
                                                                    let v55 = constructor_ineg(
                                                                        ctx, v2.0, v37,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 71.
                                                                    returns.push(v55);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            match v24 {
                                                0x0 => {
                                                    let v25 = C::subsume(ctx, v7.1);
                                                    // Rule at src/opts/arithmetic.isle line 9.
                                                    returns.push(v25);
                                                }
                                                0x1 => {
                                                    let v10 = C::inst_data_etor(ctx, v7.1);
                                                    let mut v10 = v10;
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v38,
                                                            arg: v39,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Bnot = v38 {
                                                                if v2.0 == v11.0 {
                                                                    let v56 = constructor_ineg(
                                                                        ctx, v2.0, v39,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 73.
                                                                    returns.push(v56);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v526 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 94.
                                            returns.push(v526);
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v453 =
                                                                    C::u64_add(ctx, v24, v16);
                                                                let v454 =
                                                                    C::imm64_masked(ctx, v45, v453);
                                                                let v455 = constructor_iconst(
                                                                    ctx, v45, v454,
                                                                );
                                                                let v456 = C::subsume(ctx, v455);
                                                                // Rule at src/opts/cprop.isle line 3.
                                                                returns.push(v456);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 4.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x0 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 5.
                                            returns.push(v17);
                                        }
                                    }
                                    let v685 = C::remat(ctx, arg0);
                                    // Rule at src/opts/remat.isle line 6.
                                    returns.push(v685);
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    match v123 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            if v2.0 == v136.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                let v548 = C::u64_sub(ctx, v16, v141);
                                                                                let v549 = C::imm64_masked(ctx, v2.0, v548);
                                                                                let v550 = constructor_iconst(ctx, v2.0, v549);
                                                                                let v551 = constructor_isub(ctx, v2.0, v125.0, v550);
                                                                                // Rule at src/opts/cprop.isle line 143.
                                                                                returns.push(v551);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            if v2.0 == v136.0 {
                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v537 = C::u64_add(ctx, v141, v16);
                                                                                let v538 = C::imm64_masked(ctx, v2.0, v537);
                                                                                let v539 = constructor_iconst(ctx, v2.0, v538);
                                                                                let v540 = constructor_isub(ctx, v2.0, v125.0, v539);
                                                                                // Rule at src/opts/cprop.isle line 135.
                                                                                returns.push(v540);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let v153 =
                                                                    C::inst_data_etor(ctx, v125.0);
                                                                let mut v153 = v153;
                                                                while let Some(v154) =
                                                                    v153.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v541,
                                                                        imm: v542,
                                                                    } = &v154.1 {
                                                                        if let &Opcode::Iconst = v541 {
                                                                            if v2.0 == v154.0 {
                                                                                let v543 = C::u64_from_imm64(ctx, v542);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v544 = C::u64_sub(ctx, v543, v16);
                                                                                let v545 = C::imm64_masked(ctx, v2.0, v544);
                                                                                let v546 = constructor_iconst(ctx, v2.0, v545);
                                                                                let v547 = constructor_isub(ctx, v2.0, v546, v125.1);
                                                                                // Rule at src/opts/cprop.isle line 139.
                                                                                returns.push(v547);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    match v36 {
                                        &Opcode::Splat => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v38,
                                                        arg: v39,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Splat = v38 {
                                                            if v2.0 == v11.0 {
                                                                let v763 = C::lane_type(ctx, v2.0);
                                                                let v817 = constructor_isub(
                                                                    ctx, v763, v37, v39,
                                                                );
                                                                let v818 = constructor_splat(
                                                                    ctx, v2.0, v817,
                                                                );
                                                                // Rule at src/opts/vector.isle line 33.
                                                                returns.push(v818);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            let v52 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v15,
                                                            );
                                                            if v52 == -0x1 {
                                                                if v2.0 == v11.0 {
                                                                    let v55 = constructor_ineg(
                                                                        ctx, v2.0, v37,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 75.
                                                                    returns.push(v55);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v26 = constructor_ineg(ctx, v2.0, v7.1);
                                                // Rule at src/opts/arithmetic.isle line 19.
                                                returns.push(v26);
                                            }
                                            let v527 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                            let v528 = constructor_ineg(ctx, v2.0, v527);
                                            // Rule at src/opts/cprop.isle line 99.
                                            returns.push(v528);
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v457 =
                                                                    C::u64_sub(ctx, v24, v16);
                                                                let v458 =
                                                                    C::imm64_masked(ctx, v45, v457);
                                                                let v459 = constructor_iconst(
                                                                    ctx, v45, v458,
                                                                );
                                                                let v460 = C::subsume(ctx, v459);
                                                                // Rule at src/opts/cprop.isle line 9.
                                                                returns.push(v460);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 8.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x0 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 14.
                                            returns.push(v17);
                                        }
                                    }
                                    let v685 = C::remat(ctx, arg0);
                                    // Rule at src/opts/remat.isle line 10.
                                    returns.push(v685);
                                }
                            }
                        }
                        if v7.0 == v7.1 {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v49 = C::imm64(ctx, 0x0);
                                    let v50 = constructor_iconst(ctx, v47, v49);
                                    let v51 = C::subsume(ctx, v50);
                                    // Rule at src/opts/arithmetic.isle line 40.
                                    returns.push(v51);
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    if let &Opcode::Imul = v123 {
                                        if v2.0 == v19.0 {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        if v2.0 == v11.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v135 =
                                                                C::inst_data_etor(ctx, v125.1);
                                                            let mut v135 = v135;
                                                            while let Some(v136) = v135.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v139,
                                                                    imm: v140,
                                                                } = &v136.1 {
                                                                    if let &Opcode::Iconst = v139 {
                                                                        if v2.0 == v136.0 {
                                                                            let v557 = constructor_imul(ctx, v2.0, v125.1, v7.1);
                                                                            let v558 = constructor_imul(ctx, v2.0, v125.0, v557);
                                                                            // Rule at src/opts/cprop.isle line 156.
                                                                            returns.push(v558);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    match v36 {
                                        &Opcode::Splat => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v38,
                                                        arg: v39,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Splat = v38 {
                                                            if v2.0 == v11.0 {
                                                                let v763 = C::lane_type(ctx, v2.0);
                                                                let v819 = constructor_imul(
                                                                    ctx, v763, v37, v39,
                                                                );
                                                                let v820 = constructor_splat(
                                                                    ctx, v2.0, v819,
                                                                );
                                                                // Rule at src/opts/vector.isle line 36.
                                                                returns.push(v820);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v38,
                                                        arg: v39,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Ineg = v38 {
                                                            if v2.0 == v11.0 {
                                                                let v40 = constructor_imul(
                                                                    ctx, v2.0, v37, v39,
                                                                );
                                                                let v41 = C::subsume(ctx, v40);
                                                                // Rule at src/opts/arithmetic.isle line 28.
                                                                returns.push(v41);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            match v24 {
                                                0x0 => {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src/opts/arithmetic.isle line 57.
                                                    returns.push(v17);
                                                }
                                                0x1 => {
                                                    let v25 = C::subsume(ctx, v7.1);
                                                    // Rule at src/opts/arithmetic.isle line 47.
                                                    returns.push(v25);
                                                }
                                                _ => {}
                                            }
                                            let v54 = C::i64_sextend_imm64(ctx, v2.0, v23);
                                            if v54 == -0x1 {
                                                let v26 = constructor_ineg(ctx, v2.0, v7.1);
                                                // Rule at src/opts/arithmetic.isle line 66.
                                                returns.push(v26);
                                            }
                                            let v529 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 102.
                                            returns.push(v529);
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v461 =
                                                                    C::u64_mul(ctx, v24, v16);
                                                                let v462 =
                                                                    C::imm64_masked(ctx, v45, v461);
                                                                let v463 = constructor_iconst(
                                                                    ctx, v45, v462,
                                                                );
                                                                let v464 = C::subsume(ctx, v463);
                                                                // Rule at src/opts/cprop.isle line 15.
                                                                returns.push(v464);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v82 = C::simm32(ctx, v23);
                                        if let Some(v83) = v82 {
                                            if v83 == 0x2 {
                                                let v84 = constructor_iadd(ctx, v2.0, v7.1, v7.1);
                                                // Rule at src/opts/arithmetic.isle line 105.
                                                returns.push(v84);
                                            }
                                        }
                                        let v90 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v91) = v90 {
                                            let v92 = C::imm64(ctx, v91);
                                            let v93 = constructor_iconst(ctx, v2.0, v92);
                                            let v94 = constructor_ishl(ctx, v2.0, v7.1, v93);
                                            // Rule at src/opts/arithmetic.isle line 114.
                                            returns.push(v94);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    if v2.0 == v11.0 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        match v16 {
                                            0x0 => {
                                                let v25 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/arithmetic.isle line 53.
                                                returns.push(v25);
                                            }
                                            0x1 => {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 43.
                                                returns.push(v17);
                                            }
                                            _ => {}
                                        }
                                        let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                        if v52 == -0x1 {
                                            let v53 = constructor_ineg(ctx, v2.0, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 63.
                                            returns.push(v53);
                                        }
                                    }
                                    let v79 = C::simm32(ctx, v15);
                                    if let Some(v80) = v79 {
                                        if v80 == 0x2 {
                                            let v81 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 103.
                                            returns.push(v81);
                                        }
                                    }
                                    let v85 = C::imm64_power_of_two(ctx, v15);
                                    if let Some(v86) = v85 {
                                        let v87 = C::imm64(ctx, v86);
                                        let v88 = constructor_iconst(ctx, v2.0, v87);
                                        let v89 = constructor_ishl(ctx, v2.0, v7.0, v88);
                                        // Rule at src/opts/arithmetic.isle line 112.
                                        returns.push(v89);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v823 =
                                                            constructor_umulhi(ctx, v763, v37, v39);
                                                        let v824 =
                                                            constructor_splat(ctx, v2.0, v823);
                                                        // Rule at src/opts/vector.isle line 42.
                                                        returns.push(v824);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v763 = C::lane_type(ctx, v2.0);
                                                        let v821 =
                                                            constructor_smulhi(ctx, v763, v37, v39);
                                                        let v822 =
                                                            constructor_splat(ctx, v2.0, v821);
                                                        // Rule at src/opts/vector.isle line 39.
                                                        returns.push(v822);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 94.
                                            returns.push(v17);
                                        }
                                    }
                                    let v44 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v45) = v44 {
                                        if v11.0 == v45 {
                                            let v18 = C::inst_data_etor(ctx, v7.0);
                                            let mut v18 = v18;
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v470 = C::u64_udiv(ctx, v24, v16);
                                                        if let Some(v471) = v470 {
                                                            if v11.0 == v19.0 {
                                                                let v472 =
                                                                    C::imm64_masked(ctx, v45, v471);
                                                                let v473 = constructor_iconst(
                                                                    ctx, v45, v472,
                                                                );
                                                                let v474 = C::subsume(ctx, v473);
                                                                // Rule at src/opts/cprop.isle line 28.
                                                                returns.push(v474);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 90.
                                            returns.push(v17);
                                        }
                                    }
                                    let v44 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v45) = v44 {
                                        if v11.0 == v45 {
                                            let v18 = C::inst_data_etor(ctx, v7.0);
                                            let mut v18 = v18;
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v465 = C::u64_sdiv(ctx, v24, v16);
                                                        if let Some(v466) = v465 {
                                                            if v11.0 == v19.0 {
                                                                let v467 =
                                                                    C::imm64_masked(ctx, v45, v466);
                                                                let v468 = constructor_iconst(
                                                                    ctx, v45, v467,
                                                                );
                                                                let v469 = C::subsume(ctx, v468);
                                                                // Rule at src/opts/cprop.isle line 21.
                                                                returns.push(v469);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    if let &Opcode::Band = v123 {
                                        if v2.0 == v19.0 {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        if v2.0 == v11.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v135 =
                                                                C::inst_data_etor(ctx, v125.1);
                                                            let mut v135 = v135;
                                                            while let Some(v136) = v135.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v139,
                                                                    imm: v140,
                                                                } = &v136.1 {
                                                                    if let &Opcode::Iconst = v139 {
                                                                        if v2.0 == v136.0 {
                                                                            let v561 = constructor_band(ctx, v2.0, v125.1, v7.1);
                                                                            let v562 = constructor_band(ctx, v2.0, v125.0, v561);
                                                                            // Rule at src/opts/cprop.isle line 162.
                                                                            returns.push(v562);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v646,
                                    args: ref v647,
                                    cond: ref v648,
                                } => {
                                    if let &Opcode::Icmp = v646 {
                                        let v10 = C::inst_data_etor(ctx, v7.1);
                                        let mut v10 = v10;
                                        while let Some(v11) = v10.next(ctx) {
                                            match &v11.1 {
                                                &InstructionData::IntCompare {
                                                    opcode: ref v671,
                                                    args: ref v672,
                                                    cond: ref v673,
                                                } => {
                                                    if let &Opcode::Icmp = v671 {
                                                        let v44 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v45) = v44 {
                                                            let v677 = constructor_intcc_comparable(
                                                                ctx, v648, v673,
                                                            );
                                                            if let Some(v678) = v677 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v45 {
                                                                        let v649 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v647,
                                                                            );
                                                                        let v674 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v672,
                                                                            );
                                                                        if v649.0 == v674.0 {
                                                                            if v649.1 == v674.1 {
                                                                                let v679 = constructor_decompose_intcc(ctx, v648);
                                                                                let v680 = constructor_decompose_intcc(ctx, v673);
                                                                                let v681 =
                                                                                    C::u64_and(
                                                                                        ctx, v679,
                                                                                        v680,
                                                                                    );
                                                                                let v682 = constructor_compose_icmp(ctx, v45, v681, v678, v649.0, v649.1);
                                                                                // Rule at src/opts/icmp.isle line 128.
                                                                                returns.push(v682);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } => {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v644 = C::ty_int(ctx, v2.0);
                                                            if let Some(v645) = v644 {
                                                                // Rule at src/opts/icmp.isle line 39.
                                                                returns.push(v7.0);
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    match v36 {
                                        &Opcode::Splat => {
                                            let v805 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v806) = v805 {
                                                if v2.0 == v19.0 {
                                                    let v10 = C::inst_data_etor(ctx, v7.1);
                                                    let mut v10 = v10;
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v38,
                                                            arg: v39,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Splat = v38 {
                                                                if v2.0 == v11.0 {
                                                                    let v763 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v807 = constructor_band(
                                                                        ctx, v763, v37, v39,
                                                                    );
                                                                    let v808 = constructor_splat(
                                                                        ctx, v2.0, v807,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 14.
                                                                    returns.push(v808);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v7.1 == v37 {
                                                        if v19.0 == v47 {
                                                            let v49 = C::imm64(ctx, 0x0);
                                                            let v50 =
                                                                constructor_iconst(ctx, v47, v49);
                                                            let v51 = C::subsume(ctx, v50);
                                                            // Rule at src/opts/bitops.isle line 50.
                                                            returns.push(v51);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v644 = C::ty_int(ctx, v2.0);
                                                            if let Some(v645) = v644 {
                                                                let v652 =
                                                                    C::inst_data_etor(ctx, v37);
                                                                let mut v652 = v652;
                                                                while let Some(v653) =
                                                                    v652.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v656,
                                                                        args: ref v657,
                                                                        cond: ref v658,
                                                                    } = &v653.1 {
                                                                        if let &Opcode::Icmp = v656 {
                                                                            // Rule at src/opts/icmp.isle line 44.
                                                                            returns.push(v7.0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        let v604 = C::value_type(ctx, v37);
                                                        let v605 = C::ty_mask(ctx, v604);
                                                        let v606 = C::u64_and(ctx, v16, v605);
                                                        let v607 = C::u64_eq(ctx, v605, v606);
                                                        if v607 == true {
                                                            // Rule at src/opts/extends.isle line 9.
                                                            returns.push(v7.0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        let v604 = C::value_type(ctx, v37);
                                                        let v605 = C::ty_mask(ctx, v604);
                                                        let v608 = C::u64_eq(ctx, v16, v605);
                                                        if v608 == true {
                                                            let v609 =
                                                                constructor_uextend(ctx, v2.0, v37);
                                                            // Rule at src/opts/extends.isle line 15.
                                                            returns.push(v609);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 48.
                                                returns.push(v17);
                                            }
                                            let v54 = C::i64_sextend_imm64(ctx, v2.0, v23);
                                            if v54 == -0x1 {
                                                let v25 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 42.
                                                returns.push(v25);
                                            }
                                            let v531 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 109.
                                            returns.push(v531);
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v479 =
                                                                    C::u64_and(ctx, v24, v16);
                                                                let v480 =
                                                                    C::imm64_masked(ctx, v45, v479);
                                                                let v481 = constructor_iconst(
                                                                    ctx, v45, v480,
                                                                );
                                                                let v482 = C::subsume(ctx, v481);
                                                                // Rule at src/opts/cprop.isle line 41.
                                                                returns.push(v482);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 12.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    if let &Opcode::Bnot = v38 {
                                        if v7.0 == v39 {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v11.0 == v47 {
                                                        let v49 = C::imm64(ctx, 0x0);
                                                        let v50 = constructor_iconst(ctx, v47, v49);
                                                        let v51 = C::subsume(ctx, v50);
                                                        // Rule at src/opts/bitops.isle line 49.
                                                        returns.push(v51);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v25 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 47.
                                                returns.push(v25);
                                            }
                                            let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                            if v52 == -0x1 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 39.
                                                returns.push(v17);
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 14.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 38.
                            returns.push(v17);
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    match v123 {
                                        &Opcode::Band => {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                match &v11.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v129,
                                                        args: ref v130,
                                                    } => {
                                                        if let &Opcode::Band = v129 {
                                                            let v706 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v707) = v706 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v707 {
                                                                        let v125 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v124,
                                                                            );
                                                                        let v135 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.1,
                                                                            );
                                                                        let mut v135 = v135;
                                                                        while let Some(v136) =
                                                                            v135.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v148,
                                                                                arg: v149,
                                                                            } = &v136.1 {
                                                                                if let &Opcode::Bnot = v148 {
                                                                                    if v11.0 == v136.0 {
                                                                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                        if v131.0 == v149 {
                                                                                            let v718 = constructor_bitselect(ctx, v707, v149, v131.1, v125.0);
                                                                                            // Rule at src/opts/selects.isle line 58.
                                                                                            returns.push(v718);
                                                                                        }
                                                                                        if v131.1 == v149 {
                                                                                            let v719 = constructor_bitselect(ctx, v707, v149, v131.0, v125.0);
                                                                                            // Rule at src/opts/selects.isle line 59.
                                                                                            returns.push(v719);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v153 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.0,
                                                                            );
                                                                        let mut v153 = v153;
                                                                        while let Some(v154) =
                                                                            v153.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v157,
                                                                                arg: v158,
                                                                            } = &v154.1 {
                                                                                if let &Opcode::Bnot = v157 {
                                                                                    if v11.0 == v154.0 {
                                                                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                        if v131.0 == v158 {
                                                                                            let v716 = constructor_bitselect(ctx, v707, v158, v131.1, v125.1);
                                                                                            // Rule at src/opts/selects.isle line 56.
                                                                                            returns.push(v716);
                                                                                        }
                                                                                        if v131.1 == v158 {
                                                                                            let v717 = constructor_bitselect(ctx, v707, v158, v131.0, v125.1);
                                                                                            // Rule at src/opts/selects.isle line 57.
                                                                                            returns.push(v717);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v131 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v130,
                                                                            );
                                                                        let v227 =
                                                                            C::inst_data_etor(
                                                                                ctx, v131.0,
                                                                            );
                                                                        let mut v227 = v227;
                                                                        while let Some(v228) =
                                                                            v227.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v708,
                                                                                arg: v709,
                                                                            } = &v228.1 {
                                                                                if let &Opcode::Bnot = v708 {
                                                                                    if v11.0 == v228.0 {
                                                                                        if v125.0 == v709 {
                                                                                            let v710 = constructor_bitselect(ctx, v707, v125.0, v125.1, v131.1);
                                                                                            // Rule at src/opts/selects.isle line 52.
                                                                                            returns.push(v710);
                                                                                        }
                                                                                        if v125.1 == v709 {
                                                                                            let v714 = constructor_bitselect(ctx, v707, v125.1, v125.0, v131.1);
                                                                                            // Rule at src/opts/selects.isle line 54.
                                                                                            returns.push(v714);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v259 =
                                                                            C::inst_data_etor(
                                                                                ctx, v131.1,
                                                                            );
                                                                        let mut v259 = v259;
                                                                        while let Some(v260) =
                                                                            v259.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v711,
                                                                                arg: v712,
                                                                            } = &v260.1 {
                                                                                if let &Opcode::Bnot = v711 {
                                                                                    if v11.0 == v260.0 {
                                                                                        if v125.0 == v712 {
                                                                                            let v713 = constructor_bitselect(ctx, v707, v125.0, v125.1, v131.0);
                                                                                            // Rule at src/opts/selects.isle line 53.
                                                                                            returns.push(v713);
                                                                                        }
                                                                                        if v125.1 == v712 {
                                                                                            let v715 = constructor_bitselect(ctx, v707, v125.1, v125.0, v131.0);
                                                                                            // Rule at src/opts/selects.isle line 55.
                                                                                            returns.push(v715);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v38,
                                                        arg: v39,
                                                    } => {
                                                        if let &Opcode::Bnot = v38 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    if v39 == v125.1 {
                                                                        let v128 = constructor_bor(
                                                                            ctx, v2.0, v125.0, v7.1,
                                                                        );
                                                                        // Rule at src/opts/bitops.isle line 64.
                                                                        returns.push(v128);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } => {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v135 = C::inst_data_etor(
                                                                        ctx, v125.1,
                                                                    );
                                                                    let mut v135 = v135;
                                                                    while let Some(v136) =
                                                                        v135.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v139,
                                                                            imm: v140,
                                                                        } = &v136.1 {
                                                                            if let &Opcode::Iconst = v139 {
                                                                                let v142 = C::ty_mask(ctx, v2.0);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v143 = C::u64_and(ctx, v142, v16);
                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                let v144 = C::u64_not(ctx, v141);
                                                                                let v145 = C::u64_and(ctx, v142, v144);
                                                                                let v146 = C::u64_eq(ctx, v143, v145);
                                                                                if v146 == true {
                                                                                    if v2.0 == v136.0 {
                                                                                        let v128 = constructor_bor(ctx, v2.0, v125.0, v7.1);
                                                                                        // Rule at src/opts/bitops.isle line 84.
                                                                                        returns.push(v128);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v10 = C::inst_data_etor(ctx, v7.1);
                                            let mut v10 = v10;
                                            while let Some(v11) = v10.next(ctx) {
                                                match &v11.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v129,
                                                        args: ref v130,
                                                    } => {
                                                        if let &Opcode::Bor = v129 {
                                                            match v2.0 {
                                                                I32 => {
                                                                    if v11.0 == I32 {
                                                                        if v19.0 == I32 {
                                                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                                                            let v135 =
                                                                                C::inst_data_etor(
                                                                                    ctx, v125.1,
                                                                                );
                                                                            let mut v135 = v135;
                                                                            while let Some(v136) =
                                                                                v135.next(ctx)
                                                                            {
                                                                                if v136.0 == I32 {
                                                                                    if let &InstructionData::Binary {
                                                                                        opcode: ref v199,
                                                                                        args: ref v200,
                                                                                    } = &v136.1 {
                                                                                        if let &Opcode::Ishl = v199 {
                                                                                            let v153 = C::inst_data_etor(ctx, v125.0);
                                                                                            let mut v153 = v153;
                                                                                            while let Some(v154) = v153.next(ctx) {
                                                                                                if v154.0 == I32 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v187,
                                                                                                        args: ref v188,
                                                                                                    } = &v154.1 {
                                                                                                        if let &Opcode::Ishl = v187 {
                                                                                                            let v189 = C::unpack_value_array_2(ctx, v188);
                                                                                                            let v192 = C::inst_data_etor(ctx, v189.1);
                                                                                                            let mut v192 = v192;
                                                                                                            while let Some(v193) = v192.next(ctx) {
                                                                                                                if v193.0 == I32 {
                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                        opcode: ref v196,
                                                                                                                        imm: v197,
                                                                                                                    } = &v193.1 {
                                                                                                                        if let &Opcode::Iconst = v196 {
                                                                                                                            let v198 = C::u64_from_imm64(ctx, v197);
                                                                                                                            if v198 == 0x18 {
                                                                                                                                let v201 = C::unpack_value_array_2(ctx, v200);
                                                                                                                                let v204 = C::inst_data_etor(ctx, v201.0);
                                                                                                                                let mut v204 = v204;
                                                                                                                                while let Some(v205) = v204.next(ctx) {
                                                                                                                                    if v205.0 == I32 {
                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                            opcode: ref v208,
                                                                                                                                            args: ref v209,
                                                                                                                                        } = &v205.1 {
                                                                                                                                            if let &Opcode::Band = v208 {
                                                                                                                                                let v210 = C::unpack_value_array_2(ctx, v209);
                                                                                                                                                if v189.0 == v210.0 {
                                                                                                                                                    let v213 = C::inst_data_etor(ctx, v210.1);
                                                                                                                                                    let mut v213 = v213;
                                                                                                                                                    while let Some(v214) = v213.next(ctx) {
                                                                                                                                                        if v214.0 == I32 {
                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                opcode: ref v217,
                                                                                                                                                                imm: v218,
                                                                                                                                                            } = &v214.1 {
                                                                                                                                                                if let &Opcode::Iconst = v217 {
                                                                                                                                                                    let v219 = C::u64_from_imm64(ctx, v218);
                                                                                                                                                                    if v219 == 0xFF00 {
                                                                                                                                                                        let v220 = C::inst_data_etor(ctx, v201.1);
                                                                                                                                                                        let mut v220 = v220;
                                                                                                                                                                        while let Some(v221) = v220.next(ctx) {
                                                                                                                                                                            if v221.0 == I32 {
                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                    opcode: ref v224,
                                                                                                                                                                                    imm: v225,
                                                                                                                                                                                } = &v221.1 {
                                                                                                                                                                                    if let &Opcode::Iconst = v224 {
                                                                                                                                                                                        let v226 = C::u64_from_imm64(ctx, v225);
                                                                                                                                                                                        if v226 == 0x8 {
                                                                                                                                                                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                                                                                                                            let v227 = C::inst_data_etor(ctx, v131.0);
                                                                                                                                                                                            let mut v227 = v227;
                                                                                                                                                                                            while let Some(v228) = v227.next(ctx) {
                                                                                                                                                                                                if v228.0 == I32 {
                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                        opcode: ref v231,
                                                                                                                                                                                                        args: ref v232,
                                                                                                                                                                                                    } = &v228.1 {
                                                                                                                                                                                                        if let &Opcode::Band = v231 {
                                                                                                                                                                                                            let v233 = C::unpack_value_array_2(ctx, v232);
                                                                                                                                                                                                            let v236 = C::inst_data_etor(ctx, v233.0);
                                                                                                                                                                                                            let mut v236 = v236;
                                                                                                                                                                                                            while let Some(v237) = v236.next(ctx) {
                                                                                                                                                                                                                if v237.0 == I32 {
                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                        opcode: ref v240,
                                                                                                                                                                                                                        args: ref v241,
                                                                                                                                                                                                                    } = &v237.1 {
                                                                                                                                                                                                                        if let &Opcode::Ushr = v240 {
                                                                                                                                                                                                                            let v242 = C::unpack_value_array_2(ctx, v241);
                                                                                                                                                                                                                            if v189.0 == v242.0 {
                                                                                                                                                                                                                                let v245 = C::inst_data_etor(ctx, v242.1);
                                                                                                                                                                                                                                let mut v245 = v245;
                                                                                                                                                                                                                                while let Some(v246) = v245.next(ctx) {
                                                                                                                                                                                                                                    if v246.0 == I32 {
                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                            opcode: ref v249,
                                                                                                                                                                                                                                            imm: v250,
                                                                                                                                                                                                                                        } = &v246.1 {
                                                                                                                                                                                                                                            if let &Opcode::Iconst = v249 {
                                                                                                                                                                                                                                                let v251 = C::u64_from_imm64(ctx, v250);
                                                                                                                                                                                                                                                if v251 == 0x8 {
                                                                                                                                                                                                                                                    let v252 = C::inst_data_etor(ctx, v233.1);
                                                                                                                                                                                                                                                    let mut v252 = v252;
                                                                                                                                                                                                                                                    while let Some(v253) = v252.next(ctx) {
                                                                                                                                                                                                                                                        if v253.0 == I32 {
                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                opcode: ref v256,
                                                                                                                                                                                                                                                                imm: v257,
                                                                                                                                                                                                                                                            } = &v253.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v256 {
                                                                                                                                                                                                                                                                    let v258 = C::u64_from_imm64(ctx, v257);
                                                                                                                                                                                                                                                                    if v258 == 0xFF00 {
                                                                                                                                                                                                                                                                        let v259 = C::inst_data_etor(ctx, v131.1);
                                                                                                                                                                                                                                                                        let mut v259 = v259;
                                                                                                                                                                                                                                                                        while let Some(v260) = v259.next(ctx) {
                                                                                                                                                                                                                                                                            if v260.0 == I32 {
                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                    opcode: ref v263,
                                                                                                                                                                                                                                                                                    args: ref v264,
                                                                                                                                                                                                                                                                                } = &v260.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Ushr = v263 {
                                                                                                                                                                                                                                                                                        let v265 = C::unpack_value_array_2(ctx, v264);
                                                                                                                                                                                                                                                                                        if v189.0 == v265.0 {
                                                                                                                                                                                                                                                                                            let v268 = C::inst_data_etor(ctx, v265.1);
                                                                                                                                                                                                                                                                                            let mut v268 = v268;
                                                                                                                                                                                                                                                                                            while let Some(v269) = v268.next(ctx) {
                                                                                                                                                                                                                                                                                                if v269.0 == I32 {
                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                        opcode: ref v272,
                                                                                                                                                                                                                                                                                                        imm: v273,
                                                                                                                                                                                                                                                                                                    } = &v269.1 {
                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v272 {
                                                                                                                                                                                                                                                                                                            let v274 = C::u64_from_imm64(ctx, v273);
                                                                                                                                                                                                                                                                                                            if v274 == 0x18 {
                                                                                                                                                                                                                                                                                                                let v275 = constructor_bswap(ctx, v2.0, v189.0);
                                                                                                                                                                                                                                                                                                                // Rule at src/opts/bitops.isle line 158.
                                                                                                                                                                                                                                                                                                                returns.push(v275);
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                I64 => {
                                                                    if v11.0 == I64 {
                                                                        if v19.0 == I64 {
                                                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                                                            let v135 =
                                                                                C::inst_data_etor(
                                                                                    ctx, v125.1,
                                                                                );
                                                                            let mut v135 = v135;
                                                                            while let Some(v136) =
                                                                                v135.next(ctx)
                                                                            {
                                                                                if v136.0 == I64 {
                                                                                    if let &InstructionData::Binary {
                                                                                        opcode: ref v199,
                                                                                        args: ref v200,
                                                                                    } = &v136.1 {
                                                                                        if let &Opcode::Bor = v199 {
                                                                                            let v153 = C::inst_data_etor(ctx, v125.0);
                                                                                            let mut v153 = v153;
                                                                                            while let Some(v154) = v153.next(ctx) {
                                                                                                if v154.0 == I64 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v187,
                                                                                                        args: ref v188,
                                                                                                    } = &v154.1 {
                                                                                                        if let &Opcode::Bor = v187 {
                                                                                                            let v189 = C::unpack_value_array_2(ctx, v188);
                                                                                                            let v192 = C::inst_data_etor(ctx, v189.1);
                                                                                                            let mut v192 = v192;
                                                                                                            while let Some(v193) = v192.next(ctx) {
                                                                                                                if v193.0 == I64 {
                                                                                                                    if let &InstructionData::Binary {
                                                                                                                        opcode: ref v292,
                                                                                                                        args: ref v293,
                                                                                                                    } = &v193.1 {
                                                                                                                        if let &Opcode::Ishl = v292 {
                                                                                                                            let v201 = C::unpack_value_array_2(ctx, v200);
                                                                                                                            let v204 = C::inst_data_etor(ctx, v201.0);
                                                                                                                            let mut v204 = v204;
                                                                                                                            while let Some(v205) = v204.next(ctx) {
                                                                                                                                if v205.0 == I64 {
                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                        opcode: ref v208,
                                                                                                                                        args: ref v209,
                                                                                                                                    } = &v205.1 {
                                                                                                                                        if let &Opcode::Ishl = v208 {
                                                                                                                                            let v210 = C::unpack_value_array_2(ctx, v209);
                                                                                                                                            let v213 = C::inst_data_etor(ctx, v210.1);
                                                                                                                                            let mut v213 = v213;
                                                                                                                                            while let Some(v214) = v213.next(ctx) {
                                                                                                                                                if v214.0 == I64 {
                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                        opcode: ref v217,
                                                                                                                                                        imm: v218,
                                                                                                                                                    } = &v214.1 {
                                                                                                                                                        if let &Opcode::Iconst = v217 {
                                                                                                                                                            let v219 = C::u64_from_imm64(ctx, v218);
                                                                                                                                                            if v219 == 0x18 {
                                                                                                                                                                let v220 = C::inst_data_etor(ctx, v201.1);
                                                                                                                                                                let mut v220 = v220;
                                                                                                                                                                while let Some(v221) = v220.next(ctx) {
                                                                                                                                                                    if v221.0 == I64 {
                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                            opcode: ref v336,
                                                                                                                                                                            args: ref v337,
                                                                                                                                                                        } = &v221.1 {
                                                                                                                                                                            if let &Opcode::Ishl = v336 {
                                                                                                                                                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                                                                                                                let v227 = C::inst_data_etor(ctx, v131.0);
                                                                                                                                                                                let mut v227 = v227;
                                                                                                                                                                                while let Some(v228) = v227.next(ctx) {
                                                                                                                                                                                    if v228.0 == I64 {
                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                            opcode: ref v231,
                                                                                                                                                                                            args: ref v232,
                                                                                                                                                                                        } = &v228.1 {
                                                                                                                                                                                            if let &Opcode::Bor = v231 {
                                                                                                                                                                                                let v233 = C::unpack_value_array_2(ctx, v232);
                                                                                                                                                                                                let v236 = C::inst_data_etor(ctx, v233.0);
                                                                                                                                                                                                let mut v236 = v236;
                                                                                                                                                                                                while let Some(v237) = v236.next(ctx) {
                                                                                                                                                                                                    if v237.0 == I64 {
                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                            opcode: ref v240,
                                                                                                                                                                                                            args: ref v241,
                                                                                                                                                                                                        } = &v237.1 {
                                                                                                                                                                                                            if let &Opcode::Band = v240 {
                                                                                                                                                                                                                let v242 = C::unpack_value_array_2(ctx, v241);
                                                                                                                                                                                                                let v245 = C::inst_data_etor(ctx, v242.1);
                                                                                                                                                                                                                let mut v245 = v245;
                                                                                                                                                                                                                while let Some(v246) = v245.next(ctx) {
                                                                                                                                                                                                                    if v246.0 == I64 {
                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                            opcode: ref v249,
                                                                                                                                                                                                                            imm: v250,
                                                                                                                                                                                                                        } = &v246.1 {
                                                                                                                                                                                                                            if let &Opcode::Iconst = v249 {
                                                                                                                                                                                                                                let v251 = C::u64_from_imm64(ctx, v250);
                                                                                                                                                                                                                                if v251 == 0xFF000000 {
                                                                                                                                                                                                                                    let v252 = C::inst_data_etor(ctx, v233.1);
                                                                                                                                                                                                                                    let mut v252 = v252;
                                                                                                                                                                                                                                    while let Some(v253) = v252.next(ctx) {
                                                                                                                                                                                                                                        if v253.0 == I64 {
                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                opcode: ref v380,
                                                                                                                                                                                                                                                args: ref v381,
                                                                                                                                                                                                                                            } = &v253.1 {
                                                                                                                                                                                                                                                if let &Opcode::Band = v380 {
                                                                                                                                                                                                                                                    let v259 = C::inst_data_etor(ctx, v131.1);
                                                                                                                                                                                                                                                    let mut v259 = v259;
                                                                                                                                                                                                                                                    while let Some(v260) = v259.next(ctx) {
                                                                                                                                                                                                                                                        if v260.0 == I64 {
                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                opcode: ref v263,
                                                                                                                                                                                                                                                                args: ref v264,
                                                                                                                                                                                                                                                            } = &v260.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Bor = v263 {
                                                                                                                                                                                                                                                                    let v265 = C::unpack_value_array_2(ctx, v264);
                                                                                                                                                                                                                                                                    let v268 = C::inst_data_etor(ctx, v265.1);
                                                                                                                                                                                                                                                                    let mut v268 = v268;
                                                                                                                                                                                                                                                                    while let Some(v269) = v268.next(ctx) {
                                                                                                                                                                                                                                                                        if v269.0 == I64 {
                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                opcode: ref v440,
                                                                                                                                                                                                                                                                                args: ref v441,
                                                                                                                                                                                                                                                                            } = &v269.1 {
                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v440 {
                                                                                                                                                                                                                                                                                    let v276 = C::inst_data_etor(ctx, v189.0);
                                                                                                                                                                                                                                                                                    let mut v276 = v276;
                                                                                                                                                                                                                                                                                    while let Some(v277) = v276.next(ctx) {
                                                                                                                                                                                                                                                                                        if v277.0 == I64 {
                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                opcode: ref v280,
                                                                                                                                                                                                                                                                                                args: ref v281,
                                                                                                                                                                                                                                                                                            } = &v277.1 {
                                                                                                                                                                                                                                                                                                if let &Opcode::Ishl = v280 {
                                                                                                                                                                                                                                                                                                    let v282 = C::unpack_value_array_2(ctx, v281);
                                                                                                                                                                                                                                                                                                    let v442 = C::unpack_value_array_2(ctx, v441);
                                                                                                                                                                                                                                                                                                    if v282.0 == v442.0 {
                                                                                                                                                                                                                                                                                                        let v285 = C::inst_data_etor(ctx, v282.1);
                                                                                                                                                                                                                                                                                                        let mut v285 = v285;
                                                                                                                                                                                                                                                                                                        while let Some(v286) = v285.next(ctx) {
                                                                                                                                                                                                                                                                                                            if v286.0 == I64 {
                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                    opcode: ref v289,
                                                                                                                                                                                                                                                                                                                    imm: v290,
                                                                                                                                                                                                                                                                                                                } = &v286.1 {
                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v289 {
                                                                                                                                                                                                                                                                                                                        let v291 = C::u64_from_imm64(ctx, v290);
                                                                                                                                                                                                                                                                                                                        if v291 == 0x38 {
                                                                                                                                                                                                                                                                                                                            let v294 = C::unpack_value_array_2(ctx, v293);
                                                                                                                                                                                                                                                                                                                            let v297 = C::inst_data_etor(ctx, v294.0);
                                                                                                                                                                                                                                                                                                                            let mut v297 = v297;
                                                                                                                                                                                                                                                                                                                            while let Some(v298) = v297.next(ctx) {
                                                                                                                                                                                                                                                                                                                                if v298.0 == I64 {
                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                        opcode: ref v301,
                                                                                                                                                                                                                                                                                                                                        args: ref v302,
                                                                                                                                                                                                                                                                                                                                    } = &v298.1 {
                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v301 {
                                                                                                                                                                                                                                                                                                                                            let v303 = C::unpack_value_array_2(ctx, v302);
                                                                                                                                                                                                                                                                                                                                            if v282.0 == v303.0 {
                                                                                                                                                                                                                                                                                                                                                let v306 = C::inst_data_etor(ctx, v303.1);
                                                                                                                                                                                                                                                                                                                                                let mut v306 = v306;
                                                                                                                                                                                                                                                                                                                                                while let Some(v307) = v306.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                    if v307.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                            opcode: ref v310,
                                                                                                                                                                                                                                                                                                                                                            imm: v311,
                                                                                                                                                                                                                                                                                                                                                        } = &v307.1 {
                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v310 {
                                                                                                                                                                                                                                                                                                                                                                let v312 = C::u64_from_imm64(ctx, v311);
                                                                                                                                                                                                                                                                                                                                                                if v312 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                    let v313 = C::inst_data_etor(ctx, v294.1);
                                                                                                                                                                                                                                                                                                                                                                    let mut v313 = v313;
                                                                                                                                                                                                                                                                                                                                                                    while let Some(v314) = v313.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                        if v314.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v317,
                                                                                                                                                                                                                                                                                                                                                                                imm: v318,
                                                                                                                                                                                                                                                                                                                                                                            } = &v314.1 {
                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v317 {
                                                                                                                                                                                                                                                                                                                                                                                    let v319 = C::u64_from_imm64(ctx, v318);
                                                                                                                                                                                                                                                                                                                                                                                    if v319 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                        let v320 = C::inst_data_etor(ctx, v210.0);
                                                                                                                                                                                                                                                                                                                                                                                        let mut v320 = v320;
                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v321) = v320.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                            if v321.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v324,
                                                                                                                                                                                                                                                                                                                                                                                                    args: ref v325,
                                                                                                                                                                                                                                                                                                                                                                                                } = &v321.1 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Band = v324 {
                                                                                                                                                                                                                                                                                                                                                                                                        let v326 = C::unpack_value_array_2(ctx, v325);
                                                                                                                                                                                                                                                                                                                                                                                                        if v282.0 == v326.0 {
                                                                                                                                                                                                                                                                                                                                                                                                            let v329 = C::inst_data_etor(ctx, v326.1);
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v329 = v329;
                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v330) = v329.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                if v330.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v333,
                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v334,
                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v330.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v333 {
                                                                                                                                                                                                                                                                                                                                                                                                                            let v335 = C::u64_from_imm64(ctx, v334);
                                                                                                                                                                                                                                                                                                                                                                                                                            if v335 == 0xFF0000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v338 = C::unpack_value_array_2(ctx, v337);
                                                                                                                                                                                                                                                                                                                                                                                                                                let v341 = C::inst_data_etor(ctx, v338.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v341 = v341;
                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v342) = v341.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if v342.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v345,
                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v346,
                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v342.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v345 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let v347 = C::unpack_value_array_2(ctx, v346);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if v282.0 == v347.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v350 = C::inst_data_etor(ctx, v347.1);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v350 = v350;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v351) = v350.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v351.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v354,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v355,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v351.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v354 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v356 = C::u64_from_imm64(ctx, v355);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v356 == 0xFF000000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v357 = C::inst_data_etor(ctx, v338.1);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v357 = v357;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v358) = v357.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v358.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v361,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v362,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v358.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v361 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v363 = C::u64_from_imm64(ctx, v362);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v363 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v364 = C::inst_data_etor(ctx, v242.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v364 = v364;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v365) = v364.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v365.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v368,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v369,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v365.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Ushr = v368 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v370 = C::unpack_value_array_2(ctx, v369);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v282.0 == v370.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v373 = C::inst_data_etor(ctx, v370.1);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v373 = v373;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v374) = v373.next(ctx) {
if v374.0 == I64 {
if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v377,
imm: v378,
} = &v374.1 {
if let &Opcode::Iconst = v377 {
let v379 = C::u64_from_imm64(ctx, v378);
if v379 == 0x8 {
let v382 = C::unpack_value_array_2(ctx, v381);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v385 = C::inst_data_etor(ctx, v382.0);
let mut v385 = v385;
while let Some(v386) = v385.next(ctx) {
if v386.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v389,
args: ref v390,
} = &v386.1 {
if let &Opcode::Ushr = v389 {
let v391 = C::unpack_value_array_2(ctx, v390);
if v282.0 == v391.0 {
let v394 = C::inst_data_etor(ctx, v391.1);
let mut v394 = v394;
while let Some(v395) = v394.next(ctx) {
if v395.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v398,
imm: v399,
} = &v395.1 {
if let &Opcode::Iconst = v398 {
let v400 = C::u64_from_imm64(ctx, v399);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v400 == 0x18 {
let v401 = C::inst_data_etor(ctx, v382.1);
let mut v401 = v401;
while let Some(v402) = v401.next(ctx) {
if v402.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v405,
imm: v406,
} = &v402.1 {
if let &Opcode::Iconst = v405 {
let v407 = C::u64_from_imm64(ctx, v406);
if v407 == 0xFF0000 {
let v408 = C::inst_data_etor(ctx, v265.0);
let mut v408 = v408;
while let Some(v409) = v408.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v409.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v412,
args: ref v413,
} = &v409.1 {
if let &Opcode::Band = v412 {
let v414 = C::unpack_value_array_2(ctx, v413);
let v417 = C::inst_data_etor(ctx, v414.0);
let mut v417 = v417;
while let Some(v418) = v417.next(ctx) {
if v418.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v421,
args: ref v422,
} = &v418.1 {
if let &Opcode::Ushr = v421 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v423 = C::unpack_value_array_2(ctx, v422);
if v282.0 == v423.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v426 = C::inst_data_etor(ctx, v423.1);
let mut v426 = v426;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v427) = v426.next(ctx) {
if v427.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v430,
imm: v431,
} = &v427.1 {
if let &Opcode::Iconst = v430 {
let v432 = C::u64_from_imm64(ctx, v431);
if v432 == 0x28 {
let v433 = C::inst_data_etor(ctx, v414.1);
let mut v433 = v433;
while let Some(v434) = v433.next(ctx) {
if v434.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v437,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v438,
} = &v434.1 {
if let &Opcode::Iconst = v437 {
let v439 = C::u64_from_imm64(ctx, v438);
if v439 == 0xFF00 {
let v445 = C::inst_data_etor(ctx, v442.1);
let mut v445 = v445;
while let Some(v446) = v445.next(ctx) {
if v446.0 == I64 {
if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v449,
imm: v450,
} = &v446.1 {
if let &Opcode::Iconst = v449 {
let v451 = C::u64_from_imm64(ctx, v450);
if v451 == 0x38 {
let v452 = constructor_bswap(ctx, v2.0, v282.0);
ule at src/opts/bitops.isle line 171.
returns.push(v452);
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } => {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v135 = C::inst_data_etor(
                                                                        ctx, v125.1,
                                                                    );
                                                                    let mut v135 = v135;
                                                                    while let Some(v136) =
                                                                        v135.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v139,
                                                                            imm: v140,
                                                                        } = &v136.1 {
                                                                            if let &Opcode::Iconst = v139 {
                                                                                if v2.0 == v136.0 {
                                                                                    let v559 = constructor_bor(ctx, v2.0, v125.1, v7.1);
                                                                                    let v560 = constructor_bor(ctx, v2.0, v125.0, v559);
                                                                                    // Rule at src/opts/cprop.isle line 159.
                                                                                    returns.push(v560);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v644 = C::ty_int(ctx, v2.0);
                                            if let Some(v645) = v644 {
                                                if v19.0 == v645 {
                                                    let v10 = C::inst_data_etor(ctx, v7.1);
                                                    let mut v10 = v10;
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v129,
                                                            args: ref v130,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Ushr = v129 {
                                                                if v11.0 == v19.0 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    if v125.0 == v131.0 {
                                                                        let v135 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.1,
                                                                            );
                                                                        let mut v135 = v135;
                                                                        while let Some(v136) =
                                                                            v135.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v139,
                                                                                imm: v140,
                                                                            } = &v136.1 {
                                                                                if let &Opcode::Iconst = v139 {
                                                                                    let v259 = C::inst_data_etor(ctx, v131.1);
                                                                                    let mut v259 = v259;
                                                                                    while let Some(v260) = v259.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v782,
                                                                                            imm: v783,
                                                                                        } = &v260.1 {
                                                                                            if let &Opcode::Iconst = v782 {
                                                                                                let v784 = C::u64_from_imm64(ctx, v783);
                                                                                                let v785 = C::lane_type(ctx, v645);
                                                                                                let v786 = C::ty_bits_u64(ctx, v785);
                                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                                let v787 = C::u64_sub(ctx, v786, v141);
                                                                                                let v788 = C::u64_eq(ctx, v784, v787);
                                                                                                if v788 == true {
                                                                                                    let v789 = constructor_rotl(ctx, v645, v125.0, v125.1);
                                                                                                    // Rule at src/opts/shifts.isle line 279.
                                                                                                    returns.push(v789);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v644 = C::ty_int(ctx, v2.0);
                                            if let Some(v645) = v644 {
                                                if v19.0 == v645 {
                                                    let v10 = C::inst_data_etor(ctx, v7.1);
                                                    let mut v10 = v10;
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v129,
                                                            args: ref v130,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Ishl = v129 {
                                                                if v11.0 == v19.0 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    if v125.0 == v131.0 {
                                                                        let v135 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.1,
                                                                            );
                                                                        let mut v135 = v135;
                                                                        while let Some(v136) =
                                                                            v135.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v139,
                                                                                imm: v140,
                                                                            } = &v136.1 {
                                                                                if let &Opcode::Iconst = v139 {
                                                                                    let v259 = C::inst_data_etor(ctx, v131.1);
                                                                                    let mut v259 = v259;
                                                                                    while let Some(v260) = v259.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v782,
                                                                                            imm: v783,
                                                                                        } = &v260.1 {
                                                                                            if let &Opcode::Iconst = v782 {
                                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                                let v785 = C::lane_type(ctx, v645);
                                                                                                let v786 = C::ty_bits_u64(ctx, v785);
                                                                                                let v784 = C::u64_from_imm64(ctx, v783);
                                                                                                let v790 = C::u64_sub(ctx, v786, v784);
                                                                                                let v791 = C::u64_eq(ctx, v141, v790);
                                                                                                if v791 == true {
                                                                                                    let v792 = constructor_rotl(ctx, v645, v125.0, v131.1);
                                                                                                    // Rule at src/opts/shifts.isle line 284.
                                                                                                    returns.push(v792);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v646,
                                    args: ref v647,
                                    cond: ref v648,
                                } => {
                                    if let &Opcode::Icmp = v646 {
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v671,
                                                        args: ref v672,
                                                        cond: ref v673,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Icmp = v671 {
                                                            let v677 = constructor_intcc_comparable(
                                                                ctx, v648, v673,
                                                            );
                                                            if let Some(v678) = v677 {
                                                                if v11.0 == v19.0 {
                                                                    let v649 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v647,
                                                                        );
                                                                    let v674 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v672,
                                                                        );
                                                                    if v649.0 == v674.0 {
                                                                        if v649.1 == v674.1 {
                                                                            let v679 = constructor_decompose_intcc(ctx, v648);
                                                                            let v680 = constructor_decompose_intcc(ctx, v673);
                                                                            let v683 = C::u64_or(
                                                                                ctx, v679, v680,
                                                                            );
                                                                            let v684 = constructor_compose_icmp(ctx, v45, v683, v678, v649.0, v649.1);
                                                                            // Rule at src/opts/icmp.isle line 132.
                                                                            returns.push(v684);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    match v36 {
                                        &Opcode::Splat => {
                                            let v805 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v806) = v805 {
                                                if v2.0 == v19.0 {
                                                    let v10 = C::inst_data_etor(ctx, v7.1);
                                                    let mut v10 = v10;
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v38,
                                                            arg: v39,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Splat = v38 {
                                                                if v2.0 == v11.0 {
                                                                    let v763 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v809 = constructor_bor(
                                                                        ctx, v763, v37, v39,
                                                                    );
                                                                    let v810 = constructor_splat(
                                                                        ctx, v2.0, v809,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 18.
                                                                    returns.push(v810);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v7.1 == v37 {
                                                        if v19.0 == v47 {
                                                            let v115 = C::ty_mask(ctx, v47);
                                                            let v116 = C::imm64(ctx, v115);
                                                            let v117 =
                                                                constructor_iconst(ctx, v47, v116);
                                                            let v118 = C::subsume(ctx, v117);
                                                            // Rule at src/opts/bitops.isle line 35.
                                                            returns.push(v118);
                                                        }
                                                    }
                                                }
                                            }
                                            if v2.0 == v19.0 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v129,
                                                        args: ref v130,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Band = v129 {
                                                            if v2.0 == v11.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                if v37 == v131.1 {
                                                                    let v134 = constructor_bor(
                                                                        ctx, v2.0, v131.0, v7.0,
                                                                    );
                                                                    // Rule at src/opts/bitops.isle line 73.
                                                                    returns.push(v134);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v25 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 8.
                                                returns.push(v25);
                                            }
                                            let v530 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 106.
                                            returns.push(v530);
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v19.0 == v45 {
                                                let v10 = C::inst_data_etor(ctx, v7.1);
                                                let mut v10 = v10;
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v475 = C::u64_or(ctx, v24, v16);
                                                                let v476 =
                                                                    C::imm64_masked(ctx, v45, v475);
                                                                let v477 = constructor_iconst(
                                                                    ctx, v45, v476,
                                                                );
                                                                let v478 = C::subsume(ctx, v477);
                                                                // Rule at src/opts/cprop.isle line 35.
                                                                returns.push(v478);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 16.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    if let &Opcode::Bnot = v38 {
                                        if v7.0 == v39 {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v11.0 == v47 {
                                                        let v115 = C::ty_mask(ctx, v47);
                                                        let v116 = C::imm64(ctx, v115);
                                                        let v117 =
                                                            constructor_iconst(ctx, v47, v116);
                                                        let v118 = C::subsume(ctx, v117);
                                                        // Rule at src/opts/bitops.isle line 34.
                                                        returns.push(v118);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 4.
                                                returns.push(v17);
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 18.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 12.
                            returns.push(v17);
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Splat => {
                                            let v805 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v806) = v805 {
                                                if v2.0 == v11.0 {
                                                    let v18 = C::inst_data_etor(ctx, v7.0);
                                                    let mut v18 = v18;
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v36,
                                                            arg: v37,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v36 {
                                                                if v2.0 == v19.0 {
                                                                    let v763 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v811 = constructor_bxor(
                                                                        ctx, v763, v37, v39,
                                                                    );
                                                                    let v812 = constructor_splat(
                                                                        ctx, v2.0, v811,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 22.
                                                                    returns.push(v812);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v7.0 == v39 {
                                                        if v11.0 == v47 {
                                                            let v115 = C::ty_mask(ctx, v47);
                                                            let v116 = C::imm64(ctx, v115);
                                                            let v117 =
                                                                constructor_iconst(ctx, v47, v116);
                                                            let v118 = C::subsume(ctx, v117);
                                                            // Rule at src/opts/bitops.isle line 32.
                                                            returns.push(v118);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 16.
                                                returns.push(v17);
                                            }
                                            let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                            if v52 == -0x1 {
                                                let v147 = constructor_bnot(ctx, v2.0, v7.0);
                                                // Rule at src/opts/bitops.isle line 92.
                                                returns.push(v147);
                                            }
                                            let v18 = C::inst_data_etor(ctx, v7.0);
                                            let mut v18 = v18;
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v123,
                                                    args: ref v124,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bxor = v123 {
                                                        if v2.0 == v19.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v135 =
                                                                C::inst_data_etor(ctx, v125.1);
                                                            let mut v135 = v135;
                                                            while let Some(v136) = v135.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v139,
                                                                    imm: v140,
                                                                } = &v136.1 {
                                                                    if let &Opcode::Iconst = v139 {
                                                                        if v2.0 == v136.0 {
                                                                            let v563 = constructor_bxor(ctx, v2.0, v125.1, v7.1);
                                                                            let v564 = constructor_bxor(ctx, v2.0, v125.0, v563);
                                                                            // Rule at src/opts/cprop.isle line 165.
                                                                            returns.push(v564);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v11.0 == v45 {
                                                let v18 = C::inst_data_etor(ctx, v7.0);
                                                let mut v18 = v18;
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v483 =
                                                                    C::u64_xor(ctx, v24, v16);
                                                                let v484 =
                                                                    C::imm64_masked(ctx, v45, v483);
                                                                let v485 = constructor_iconst(
                                                                    ctx, v45, v484,
                                                                );
                                                                let v486 = C::subsume(ctx, v485);
                                                                // Rule at src/opts/cprop.isle line 47.
                                                                returns.push(v486);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 22.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    if let &Opcode::Bnot = v36 {
                                        if v7.1 == v37 {
                                            let v44 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v45) = v44 {
                                                let v46 = C::ty_int(ctx, v45);
                                                if let Some(v47) = v46 {
                                                    if v19.0 == v47 {
                                                        let v115 = C::ty_mask(ctx, v47);
                                                        let v116 = C::imm64(ctx, v115);
                                                        let v117 =
                                                            constructor_iconst(ctx, v47, v116);
                                                        let v118 = C::subsume(ctx, v117);
                                                        // Rule at src/opts/bitops.isle line 33.
                                                        returns.push(v118);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v25 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 20.
                                                returns.push(v25);
                                            }
                                            let v532 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 112.
                                            returns.push(v532);
                                        }
                                        let v685 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 20.
                                        returns.push(v685);
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v49 = C::imm64(ctx, 0x0);
                                    let v50 = constructor_iconst(ctx, v47, v49);
                                    let v51 = C::subsume(ctx, v50);
                                    // Rule at src/opts/bitops.isle line 26.
                                    returns.push(v51);
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iconcat = v129 {
                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                        let v759 = constructor_rotl(ctx, v2.0, v7.0, v131.0);
                                        // Rule at src/opts/shifts.isle line 146.
                                        returns.push(v759);
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Ireduce => {
                                            let v747 = C::value_type(ctx, v39);
                                            let v748 = C::fits_in_64(ctx, v747);
                                            if let Some(v749) = v748 {
                                                let v754 = constructor_rotl(ctx, v2.0, v7.0, v39);
                                                // Rule at src/opts/shifts.isle line 130.
                                                returns.push(v754);
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v754 = constructor_rotl(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 131.
                                            returns.push(v754);
                                        }
                                        &Opcode::Sextend => {
                                            let v754 = constructor_rotl(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 132.
                                            returns.push(v754);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v123,
                                                args: ref v124,
                                            } = &v19.1
                                            {
                                                match v123 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v774 = constructor_iadd_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v775 = constructor_rotl(
                                                                ctx, v2.0, v125.0, v774,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 243.
                                                            returns.push(v775);
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v777 = constructor_isub_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v779 = constructor_rotr(
                                                                ctx, v2.0, v125.0, v777,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 250.
                                                            returns.push(v779);
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 20.
                                                returns.push(v17);
                                            }
                                        }
                                        let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v761 = C::u64_and(ctx, v16, v150);
                                        let v793 = C::u64_eq(ctx, v16, v761);
                                        if v793 == false {
                                            let v794 = C::imm64(ctx, v761);
                                            let v795 = constructor_iconst(ctx, v11.0, v794);
                                            let v800 = constructor_rotl(ctx, v2.0, v7.0, v795);
                                            // Rule at src/opts/shifts.isle line 308.
                                            returns.push(v800);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    match v123 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v125 = C::unpack_value_array_2(ctx, v124);
                                                let v780 = C::value_type(ctx, v125.1);
                                                let v781 = C::value_type(ctx, v7.1);
                                                if v780 == v781 {
                                                    let v774 =
                                                        constructor_iadd_uextend(ctx, v125.1, v7.1);
                                                    let v775 =
                                                        constructor_rotl(ctx, v2.0, v125.0, v774);
                                                    // Rule at src/opts/shifts.isle line 264.
                                                    returns.push(v775);
                                                }
                                                let v135 = C::inst_data_etor(ctx, v125.1);
                                                let mut v135 = v135;
                                                while let Some(v136) = v135.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v139,
                                                        imm: v140,
                                                    } = &v136.1
                                                    {
                                                        if let &Opcode::Iconst = v139 {
                                                            let v774 = constructor_iadd_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v775 = constructor_rotl(
                                                                ctx, v2.0, v125.0, v774,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 242.
                                                            returns.push(v775);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v125 = C::unpack_value_array_2(ctx, v124);
                                                if v7.1 == v125.1 {
                                                    let v773 = C::subsume(ctx, v125.0);
                                                    // Rule at src/opts/shifts.isle line 207.
                                                    returns.push(v773);
                                                }
                                                let v780 = C::value_type(ctx, v125.1);
                                                let v781 = C::value_type(ctx, v7.1);
                                                if v780 == v781 {
                                                    let v777 =
                                                        constructor_isub_uextend(ctx, v125.1, v7.1);
                                                    let v779 =
                                                        constructor_rotr(ctx, v2.0, v125.0, v777);
                                                    // Rule at src/opts/shifts.isle line 269.
                                                    returns.push(v779);
                                                }
                                                let v135 = C::inst_data_etor(ctx, v125.1);
                                                let mut v135 = v135;
                                                while let Some(v136) = v135.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v139,
                                                        imm: v140,
                                                    } = &v136.1
                                                    {
                                                        if let &Opcode::Iconst = v139 {
                                                            let v777 = constructor_isub_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v779 = constructor_rotr(
                                                                ctx, v2.0, v125.0, v777,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 249.
                                                            returns.push(v779);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    if let &Opcode::Splat = v36 {
                                        if v2.0 == v19.0 {
                                            let v763 = C::lane_type(ctx, v2.0);
                                            let v839 = constructor_rotl(ctx, v763, v37, v7.1);
                                            let v840 = constructor_splat(ctx, v2.0, v839);
                                            // Rule at src/opts/vector.isle line 68.
                                            returns.push(v840);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iconcat = v129 {
                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                        let v758 = constructor_rotr(ctx, v2.0, v7.0, v131.0);
                                        // Rule at src/opts/shifts.isle line 145.
                                        returns.push(v758);
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Ireduce => {
                                            let v747 = C::value_type(ctx, v39);
                                            let v748 = C::fits_in_64(ctx, v747);
                                            if let Some(v749) = v748 {
                                                let v753 = constructor_rotr(ctx, v2.0, v7.0, v39);
                                                // Rule at src/opts/shifts.isle line 127.
                                                returns.push(v753);
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v753 = constructor_rotr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 128.
                                            returns.push(v753);
                                        }
                                        &Opcode::Sextend => {
                                            let v753 = constructor_rotr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 129.
                                            returns.push(v753);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v123,
                                                args: ref v124,
                                            } = &v19.1
                                            {
                                                match v123 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v777 = constructor_isub_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v778 = constructor_rotl(
                                                                ctx, v2.0, v125.0, v777,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 248.
                                                            returns.push(v778);
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v774 = constructor_iadd_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v776 = constructor_rotr(
                                                                ctx, v2.0, v125.0, v774,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 245.
                                                            returns.push(v776);
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 16.
                                                returns.push(v17);
                                            }
                                        }
                                        let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v761 = C::u64_and(ctx, v16, v150);
                                        let v793 = C::u64_eq(ctx, v16, v761);
                                        if v793 == false {
                                            let v794 = C::imm64(ctx, v761);
                                            let v795 = constructor_iconst(ctx, v11.0, v794);
                                            let v799 = constructor_rotr(ctx, v2.0, v7.0, v795);
                                            // Rule at src/opts/shifts.isle line 305.
                                            returns.push(v799);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v123,
                                    args: ref v124,
                                } => {
                                    match v123 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v125 = C::unpack_value_array_2(ctx, v124);
                                                if v7.1 == v125.1 {
                                                    let v773 = C::subsume(ctx, v125.0);
                                                    // Rule at src/opts/shifts.isle line 208.
                                                    returns.push(v773);
                                                }
                                                let v780 = C::value_type(ctx, v125.1);
                                                let v781 = C::value_type(ctx, v7.1);
                                                if v780 == v781 {
                                                    let v777 =
                                                        constructor_isub_uextend(ctx, v125.1, v7.1);
                                                    let v778 =
                                                        constructor_rotl(ctx, v2.0, v125.0, v777);
                                                    // Rule at src/opts/shifts.isle line 267.
                                                    returns.push(v778);
                                                }
                                                let v135 = C::inst_data_etor(ctx, v125.1);
                                                let mut v135 = v135;
                                                while let Some(v136) = v135.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v139,
                                                        imm: v140,
                                                    } = &v136.1
                                                    {
                                                        if let &Opcode::Iconst = v139 {
                                                            let v777 = constructor_isub_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v778 = constructor_rotl(
                                                                ctx, v2.0, v125.0, v777,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 247.
                                                            returns.push(v778);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v125 = C::unpack_value_array_2(ctx, v124);
                                                let v780 = C::value_type(ctx, v125.1);
                                                let v781 = C::value_type(ctx, v7.1);
                                                if v780 == v781 {
                                                    let v774 =
                                                        constructor_iadd_uextend(ctx, v125.1, v7.1);
                                                    let v776 =
                                                        constructor_rotr(ctx, v2.0, v125.0, v774);
                                                    // Rule at src/opts/shifts.isle line 262.
                                                    returns.push(v776);
                                                }
                                                let v135 = C::inst_data_etor(ctx, v125.1);
                                                let mut v135 = v135;
                                                while let Some(v136) = v135.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v139,
                                                        imm: v140,
                                                    } = &v136.1
                                                    {
                                                        if let &Opcode::Iconst = v139 {
                                                            let v774 = constructor_iadd_uextend(
                                                                ctx, v125.1, v7.1,
                                                            );
                                                            let v776 = constructor_rotr(
                                                                ctx, v2.0, v125.0, v774,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 244.
                                                            returns.push(v776);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v36,
                                    arg: v37,
                                } => {
                                    if let &Opcode::Splat = v36 {
                                        if v2.0 == v19.0 {
                                            let v763 = C::lane_type(ctx, v2.0);
                                            let v841 = constructor_rotr(ctx, v763, v37, v7.1);
                                            let v842 = constructor_splat(ctx, v2.0, v841);
                                            // Rule at src/opts/vector.isle line 71.
                                            returns.push(v842);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iconcat = v129 {
                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                        let v755 = constructor_ishl(ctx, v2.0, v7.0, v131.0);
                                        // Rule at src/opts/shifts.isle line 142.
                                        returns.push(v755);
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Ireduce => {
                                            let v747 = C::value_type(ctx, v39);
                                            let v748 = C::fits_in_64(ctx, v747);
                                            if let Some(v749) = v748 {
                                                let v750 = constructor_ishl(ctx, v2.0, v7.0, v39);
                                                // Rule at src/opts/shifts.isle line 118.
                                                returns.push(v750);
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v750 = constructor_ishl(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 119.
                                            returns.push(v750);
                                        }
                                        &Opcode::Sextend => {
                                            let v750 = constructor_ishl(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 120.
                                            returns.push(v750);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v123,
                                                    args: ref v124,
                                                } => {
                                                    match v123 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            let v141 = C::u64_from_imm64(ctx, v140);
                                                                            let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v760 = C::u64_and(ctx, v141, v150);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v761 = C::u64_and(ctx, v16, v150);
                                                                            let v762 = C::u64_add(ctx, v760, v761);
                                                                            let v763 = C::lane_type(ctx, v2.0);
                                                                            let v764 = C::ty_bits_u64(ctx, v763);
                                                                            let v765 = C::u64_lt(ctx, v762, v764);
                                                                            if v765 == true {
                                                                                let v766 = constructor_iconst_u64(ctx, v136.0, v762);
                                                                                let v767 = constructor_ishl(ctx, v2.0, v125.0, v766);
                                                                                // Rule at src/opts/shifts.isle line 155.
                                                                                returns.push(v767);
                                                                            }
                                                                            let v729 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v770 = C::u64_le(ctx, v729, v762);
                                                                            if v770 == true {
                                                                                let v771 = constructor_iconst_u64(ctx, v2.0, 0x0);
                                                                                let v772 = C::subsume(ctx, v771);
                                                                                // Rule at src/opts/shifts.isle line 187.
                                                                                returns.push(v772);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let v153 =
                                                                    C::inst_data_etor(ctx, v125.0);
                                                                let mut v153 = v153;
                                                                while let Some(v154) =
                                                                    v153.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v541,
                                                                        imm: v542,
                                                                    } = &v154.1 {
                                                                        if let &Opcode::Iconst = v541 {
                                                                            let v596 = constructor_ishl(ctx, v2.0, v125.0, v7.1);
                                                                            let v597 = constructor_ishl(ctx, v2.0, v596, v125.1);
                                                                            // Rule at src/opts/cprop.isle line 205.
                                                                            returns.push(v597);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v44 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v45) = v44 {
                                                                if v19.0 == v45 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v135 = C::inst_data_etor(
                                                                        ctx, v125.1,
                                                                    );
                                                                    let mut v135 = v135;
                                                                    while let Some(v136) =
                                                                        v135.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v139,
                                                                            imm: v140,
                                                                        } = &v136.1 {
                                                                            if let &Opcode::Iconst = v139 {
                                                                                if v15 == v140 {
                                                                                    let v721 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v722 = C::imm64_shl(ctx, v45, v721, v140);
                                                                                    let v723 = constructor_iconst(ctx, v45, v722);
                                                                                    let v724 = constructor_band(ctx, v45, v125.0, v723);
                                                                                    // Rule at src/opts/shifts.isle line 27.
                                                                                    returns.push(v724);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v44 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v45) = v44 {
                                                                if v19.0 == v45 {
                                                                    let v125 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v124,
                                                                        );
                                                                    let v135 = C::inst_data_etor(
                                                                        ctx, v125.1,
                                                                    );
                                                                    let mut v135 = v135;
                                                                    while let Some(v136) =
                                                                        v135.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v139,
                                                                            imm: v140,
                                                                        } = &v136.1 {
                                                                            if let &Opcode::Iconst = v139 {
                                                                                if v15 == v140 {
                                                                                    let v721 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v722 = C::imm64_shl(ctx, v45, v721, v140);
                                                                                    let v723 = constructor_iconst(ctx, v45, v722);
                                                                                    let v724 = constructor_band(ctx, v45, v125.0, v723);
                                                                                    // Rule at src/opts/shifts.isle line 32.
                                                                                    returns.push(v724);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v44 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v45) = v44 {
                                                            if v19.0 == v45 {
                                                                let v494 = C::imm64_shl(
                                                                    ctx, v45, v23, v15,
                                                                );
                                                                let v495 = constructor_iconst(
                                                                    ctx, v45, v494,
                                                                );
                                                                let v496 = C::subsume(ctx, v495);
                                                                // Rule at src/opts/cprop.isle line 58.
                                                                returns.push(v496);
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 4.
                                                returns.push(v17);
                                            }
                                        }
                                        let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v761 = C::u64_and(ctx, v16, v150);
                                        let v793 = C::u64_eq(ctx, v16, v761);
                                        if v793 == false {
                                            let v794 = C::imm64(ctx, v761);
                                            let v795 = constructor_iconst(ctx, v11.0, v794);
                                            let v796 = constructor_ishl(ctx, v2.0, v7.0, v795);
                                            // Rule at src/opts/shifts.isle line 296.
                                            returns.push(v796);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v36,
                                arg: v37,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v36 {
                                    if v2.0 == v19.0 {
                                        let v763 = C::lane_type(ctx, v2.0);
                                        let v843 = constructor_ishl(ctx, v763, v37, v7.1);
                                        let v844 = constructor_splat(ctx, v2.0, v843);
                                        // Rule at src/opts/vector.isle line 74.
                                        returns.push(v844);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iconcat = v129 {
                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                        let v756 = constructor_ushr(ctx, v2.0, v7.0, v131.0);
                                        // Rule at src/opts/shifts.isle line 143.
                                        returns.push(v756);
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Ireduce => {
                                            let v747 = C::value_type(ctx, v39);
                                            let v748 = C::fits_in_64(ctx, v747);
                                            if let Some(v749) = v748 {
                                                let v751 = constructor_ushr(ctx, v2.0, v7.0, v39);
                                                // Rule at src/opts/shifts.isle line 121.
                                                returns.push(v751);
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v751 = constructor_ushr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 122.
                                            returns.push(v751);
                                        }
                                        &Opcode::Sextend => {
                                            let v751 = constructor_ushr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 123.
                                            returns.push(v751);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v123,
                                                    args: ref v124,
                                                } => {
                                                    match v123 {
                                                        &Opcode::Ishl => {
                                                            let v125 =
                                                                C::unpack_value_array_2(ctx, v124);
                                                            let v135 =
                                                                C::inst_data_etor(ctx, v125.1);
                                                            let mut v135 = v135;
                                                            while let Some(v136) = v135.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v139,
                                                                    imm: v140,
                                                                } = &v136.1 {
                                                                    if let &Opcode::Iconst = v139 {
                                                                        if v15 == v140 {
                                                                            let v44 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v45) = v44 {
                                                                                let v46 = C::ty_int(ctx, v45);
                                                                                if let Some(v47) = v46 {
                                                                                    if v19.0 == v47 {
                                                                                        let v115 = C::ty_mask(ctx, v47);
                                                                                        let v116 = C::imm64(ctx, v115);
                                                                                        let v725 = C::imm64_ushr(ctx, v47, v116, v140);
                                                                                        let v726 = constructor_iconst(ctx, v47, v725);
                                                                                        let v727 = constructor_band(ctx, v47, v125.0, v726);
                                                                                        // Rule at src/opts/shifts.isle line 41.
                                                                                        returns.push(v727);
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v141 = C::u64_from_imm64(ctx, v140);
                                                                            let v736 = C::u64_is_zero(ctx, v141);
                                                                            if v736 == false {
                                                                                let v737 = C::ty_bits(ctx, v2.0);
                                                                                let v738 = C::u8_as_u64(ctx, v737);
                                                                                let v739 = C::u64_sub(ctx, v738, v141);
                                                                                let v740 = constructor_shift_amt_to_type(ctx, v739);
                                                                                if let Some(v741) = v740 {
                                                                                    if v2.0 == v19.0 {
                                                                                        let v742 = constructor_ireduce(ctx, v741, v125.0);
                                                                                        let v744 = constructor_uextend(ctx, v2.0, v742);
                                                                                        // Rule at src/opts/shifts.isle line 91.
                                                                                        returns.push(v744);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            let v141 = C::u64_from_imm64(ctx, v140);
                                                                            let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v760 = C::u64_and(ctx, v141, v150);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v761 = C::u64_and(ctx, v16, v150);
                                                                            let v762 = C::u64_add(ctx, v760, v761);
                                                                            let v763 = C::lane_type(ctx, v2.0);
                                                                            let v764 = C::ty_bits_u64(ctx, v763);
                                                                            let v765 = C::u64_lt(ctx, v762, v764);
                                                                            if v765 == true {
                                                                                let v766 = constructor_iconst_u64(ctx, v136.0, v762);
                                                                                let v768 = constructor_ushr(ctx, v2.0, v125.0, v766);
                                                                                // Rule at src/opts/shifts.isle line 164.
                                                                                returns.push(v768);
                                                                            }
                                                                            let v729 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v770 = C::u64_le(ctx, v729, v762);
                                                                            if v770 == true {
                                                                                let v771 = constructor_iconst_u64(ctx, v2.0, 0x0);
                                                                                let v772 = C::subsume(ctx, v771);
                                                                                // Rule at src/opts/shifts.isle line 196.
                                                                                returns.push(v772);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let v153 =
                                                                    C::inst_data_etor(ctx, v125.0);
                                                                let mut v153 = v153;
                                                                while let Some(v154) =
                                                                    v153.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v541,
                                                                        imm: v542,
                                                                    } = &v154.1 {
                                                                        if let &Opcode::Iconst = v541 {
                                                                            let v598 = constructor_ushr(ctx, v2.0, v125.0, v7.1);
                                                                            let v599 = constructor_ushr(ctx, v2.0, v598, v125.1);
                                                                            // Rule at src/opts/cprop.isle line 207.
                                                                            returns.push(v599);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v44 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v45) = v44 {
                                                            if v19.0 == v45 {
                                                                let v497 = C::imm64_ushr(
                                                                    ctx, v45, v23, v15,
                                                                );
                                                                let v498 = constructor_iconst(
                                                                    ctx, v45, v497,
                                                                );
                                                                let v499 = C::subsume(ctx, v498);
                                                                // Rule at src/opts/cprop.isle line 63.
                                                                returns.push(v499);
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 8.
                                                returns.push(v17);
                                            }
                                        }
                                        let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v761 = C::u64_and(ctx, v16, v150);
                                        let v793 = C::u64_eq(ctx, v16, v761);
                                        if v793 == false {
                                            let v794 = C::imm64(ctx, v761);
                                            let v795 = constructor_iconst(ctx, v11.0, v794);
                                            let v797 = constructor_ushr(ctx, v2.0, v7.0, v795);
                                            // Rule at src/opts/shifts.isle line 299.
                                            returns.push(v797);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v36,
                                arg: v37,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v36 {
                                    if v2.0 == v19.0 {
                                        let v763 = C::lane_type(ctx, v2.0);
                                        let v845 = constructor_ushr(ctx, v763, v37, v7.1);
                                        let v846 = constructor_splat(ctx, v2.0, v845);
                                        // Rule at src/opts/vector.isle line 77.
                                        returns.push(v846);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iconcat = v129 {
                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                        let v757 = constructor_sshr(ctx, v2.0, v7.0, v131.0);
                                        // Rule at src/opts/shifts.isle line 144.
                                        returns.push(v757);
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v38,
                                    arg: v39,
                                } => {
                                    match v38 {
                                        &Opcode::Ireduce => {
                                            let v747 = C::value_type(ctx, v39);
                                            let v748 = C::fits_in_64(ctx, v747);
                                            if let Some(v749) = v748 {
                                                let v752 = constructor_sshr(ctx, v2.0, v7.0, v39);
                                                // Rule at src/opts/shifts.isle line 124.
                                                returns.push(v752);
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v752 = constructor_sshr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 125.
                                            returns.push(v752);
                                        }
                                        &Opcode::Sextend => {
                                            let v752 = constructor_sshr(ctx, v2.0, v7.0, v39);
                                            // Rule at src/opts/shifts.isle line 126.
                                            returns.push(v752);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v123,
                                                    args: ref v124,
                                                } => {
                                                    match v123 {
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v150 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v151 = C::u64_eq(ctx, v16, v150);
                                                            if v151 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v125 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v124,
                                                                            );
                                                                        let v135 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.1,
                                                                            );
                                                                        let mut v135 = v135;
                                                                        while let Some(v136) =
                                                                            v135.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v148,
                                                                                arg: v149,
                                                                            } = &v136.1 {
                                                                                if let &Opcode::Ineg = v148 {
                                                                                    if v2.0 == v136.0 {
                                                                                        if v125.0 == v149 {
                                                                                            let v152 = constructor_bmask(ctx, v2.0, v125.0);
                                                                                            // Rule at src/opts/bitops.isle line 100.
                                                                                            returns.push(v152);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v153 =
                                                                            C::inst_data_etor(
                                                                                ctx, v125.0,
                                                                            );
                                                                        let mut v153 = v153;
                                                                        while let Some(v154) =
                                                                            v153.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v157,
                                                                                arg: v158,
                                                                            } = &v154.1 {
                                                                                if let &Opcode::Ineg = v157 {
                                                                                    if v125.1 == v158 {
                                                                                        if v2.0 == v154.0 {
                                                                                            let v159 = constructor_bmask(ctx, v2.0, v158);
                                                                                            // Rule at src/opts/bitops.isle line 104.
                                                                                            returns.push(v159);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            if v15 == v140 {
                                                                                let v153 = C::inst_data_etor(ctx, v125.0);
                                                                                let mut v153 = v153;
                                                                                while let Some(v154) = v153.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v157,
                                                                                        arg: v158,
                                                                                    } = &v154.1 {
                                                                                        match v157 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v154.0 {
                                                                                                    let v141 = C::u64_from_imm64(ctx, v140);
                                                                                                    let v729 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v728 = C::value_type(ctx, v158);
                                                                                                    let v730 = C::ty_bits_u64(ctx, v728);
                                                                                                    let v731 = C::u64_sub(ctx, v729, v730);
                                                                                                    let v732 = C::u64_eq(ctx, v141, v731);
                                                                                                    if v732 == true {
                                                                                                        let v733 = constructor_sextend(ctx, v2.0, v158);
                                                                                                        // Rule at src/opts/shifts.isle line 50.
                                                                                                        returns.push(v733);
                                                                                                    }
                                                                                                    let v734 = C::u64_lt(ctx, v141, v731);
                                                                                                    if v734 == true {
                                                                                                        // Rule at src/opts/shifts.isle line 62.
                                                                                                        returns.push(v125.0);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                                let v729 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v728 = C::value_type(ctx, v158);
                                                                                                let v730 = C::ty_bits_u64(ctx, v728);
                                                                                                let v731 = C::u64_sub(ctx, v729, v730);
                                                                                                let v735 = C::u64_le(ctx, v141, v731);
                                                                                                if v735 == true {
                                                                                                    if v2.0 == v154.0 {
                                                                                                        // Rule at src/opts/shifts.isle line 73.
                                                                                                        returns.push(v125.0);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                                let v141 = C::u64_from_imm64(ctx, v140);
                                                                                let v736 = C::u64_is_zero(ctx, v141);
                                                                                if v736 == false {
                                                                                    let v737 = C::ty_bits(ctx, v2.0);
                                                                                    let v738 = C::u8_as_u64(ctx, v737);
                                                                                    let v739 = C::u64_sub(ctx, v738, v141);
                                                                                    let v740 = constructor_shift_amt_to_type(ctx, v739);
                                                                                    if let Some(v741) = v740 {
                                                                                        let v742 = constructor_ireduce(ctx, v741, v125.0);
                                                                                        let v743 = constructor_sextend(ctx, v2.0, v742);
                                                                                        // Rule at src/opts/shifts.isle line 87.
                                                                                        returns.push(v743);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v125 = C::unpack_value_array_2(
                                                                    ctx, v124,
                                                                );
                                                                let v135 =
                                                                    C::inst_data_etor(ctx, v125.1);
                                                                let mut v135 = v135;
                                                                while let Some(v136) =
                                                                    v135.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v139,
                                                                        imm: v140,
                                                                    } = &v136.1 {
                                                                        if let &Opcode::Iconst = v139 {
                                                                            let v141 = C::u64_from_imm64(ctx, v140);
                                                                            let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v760 = C::u64_and(ctx, v141, v150);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v761 = C::u64_and(ctx, v16, v150);
                                                                            let v762 = C::u64_add(ctx, v760, v761);
                                                                            let v763 = C::lane_type(ctx, v2.0);
                                                                            let v764 = C::ty_bits_u64(ctx, v763);
                                                                            let v765 = C::u64_lt(ctx, v762, v764);
                                                                            if v765 == true {
                                                                                let v766 = constructor_iconst_u64(ctx, v136.0, v762);
                                                                                let v769 = constructor_sshr(ctx, v2.0, v125.0, v766);
                                                                                // Rule at src/opts/shifts.isle line 173.
                                                                                returns.push(v769);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let v153 =
                                                                    C::inst_data_etor(ctx, v125.0);
                                                                let mut v153 = v153;
                                                                while let Some(v154) =
                                                                    v153.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v541,
                                                                        imm: v542,
                                                                    } = &v154.1 {
                                                                        if let &Opcode::Iconst = v541 {
                                                                            let v600 = constructor_sshr(ctx, v2.0, v125.0, v7.1);
                                                                            let v601 = constructor_sshr(ctx, v2.0, v600, v125.1);
                                                                            // Rule at src/opts/cprop.isle line 209.
                                                                            returns.push(v601);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v44 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v45) = v44 {
                                                            if v19.0 == v45 {
                                                                let v500 = C::imm64_sshr(
                                                                    ctx, v45, v23, v15,
                                                                );
                                                                let v501 = constructor_iconst(
                                                                    ctx, v45, v500,
                                                                );
                                                                let v502 = C::subsume(ctx, v501);
                                                                // Rule at src/opts/cprop.isle line 68.
                                                                returns.push(v502);
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 12.
                                                returns.push(v17);
                                            }
                                        }
                                        let v150 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v761 = C::u64_and(ctx, v16, v150);
                                        let v793 = C::u64_eq(ctx, v16, v761);
                                        if v793 == false {
                                            let v794 = C::imm64(ctx, v761);
                                            let v795 = constructor_iconst(ctx, v11.0, v794);
                                            let v798 = constructor_sshr(ctx, v2.0, v7.0, v795);
                                            // Rule at src/opts/shifts.isle line 302.
                                            returns.push(v798);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v18 = C::inst_data_etor(ctx, v7.0);
                        let mut v18 = v18;
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v36,
                                arg: v37,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v36 {
                                    if v2.0 == v19.0 {
                                        let v763 = C::lane_type(ctx, v2.0);
                                        let v847 = constructor_sshr(ctx, v763, v37, v7.1);
                                        let v848 = constructor_splat(ctx, v2.0, v847);
                                        // Rule at src/opts/vector.isle line 80.
                                        returns.push(v848);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = C::inst_data_etor(ctx, v7.1);
                        let mut v10 = v10;
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = &v11.1
                            {
                                if let &Opcode::Fneg = v38 {
                                    if v2.0 == v11.0 {
                                        let v18 = C::inst_data_etor(ctx, v7.0);
                                        let mut v18 = v18;
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v36,
                                                arg: v37,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Fneg = v36 {
                                                    if v2.0 == v19.0 {
                                                        let v114 =
                                                            constructor_fmul(ctx, v2.0, v37, v39);
                                                        // Rule at src/opts/arithmetic.isle line 127.
                                                        returns.push(v114);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v166,
                args: ref v167,
                cond: ref v168,
            } => {
                if let &Opcode::Icmp = v166 {
                    match v168 {
                        &IntCC::Equal => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    if v169.0 == v169.1 {
                                        let v615 = C::imm64(ctx, 0x1);
                                        let v618 = constructor_iconst(ctx, v47, v615);
                                        // Rule at src/opts/icmp.isle line 5.
                                        returns.push(v618);
                                    }
                                }
                            }
                            let v169 = C::unpack_value_array_2(ctx, v167);
                            let v172 = C::inst_data_etor(ctx, v169.1);
                            let mut v172 = v172;
                            while let Some(v173) = v172.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v176,
                                    imm: v177,
                                } = &v173.1
                                {
                                    if let &Opcode::Iconst = v176 {
                                        let v178 = C::u64_from_imm64(ctx, v177);
                                        if v178 == 0x0 {
                                            let v517 = C::inst_data_etor(ctx, v169.0);
                                            let mut v517 = v517;
                                            while let Some(v518) = v517.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v610,
                                                    arg: v611,
                                                } = &v518.1
                                                {
                                                    if let &Opcode::Uextend = v610 {
                                                        let v619 = C::inst_data_etor(ctx, v611);
                                                        let mut v619 = v619;
                                                        while let Some(v620) = v619.next(ctx) {
                                                            if let &InstructionData::IntCompare {
                                                                opcode: ref v623,
                                                                args: ref v624,
                                                                cond: ref v625,
                                                            } = &v620.1
                                                            {
                                                                if let &Opcode::Icmp = v623 {
                                                                    if v2.0 == v620.0 {
                                                                        let v630 =
                                                                            &C::intcc_complement(
                                                                                ctx, v625,
                                                                            );
                                                                        let v626 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v624,
                                                                            );
                                                                        let v631 = constructor_icmp(
                                                                            ctx, v2.0, v630,
                                                                            v626.0, v626.1,
                                                                        );
                                                                        let v632 =
                                                                            C::subsume(ctx, v631);
                                                                        // Rule at src/opts/icmp.isle line 22.
                                                                        returns.push(v632);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v169 = C::unpack_value_array_2(ctx, v167);
                            let v172 = C::inst_data_etor(ctx, v169.1);
                            let mut v172 = v172;
                            while let Some(v173) = v172.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v176,
                                    imm: v177,
                                } = &v173.1
                                {
                                    if let &Opcode::Iconst = v176 {
                                        let v178 = C::u64_from_imm64(ctx, v177);
                                        if v178 == 0x0 {
                                            let v179 = constructor_truthy(ctx, v169.0);
                                            let mut v179 = v179;
                                            while let Some(v180) = v179.next(ctx) {
                                                let v181 = C::value_type(ctx, v180);
                                                let v182 =
                                                    C::ty_int_ref_scalar_64_extract(ctx, v181);
                                                if let Some(v183) = v182 {
                                                    let v49 = C::imm64(ctx, 0x0);
                                                    let v184 = constructor_iconst(ctx, v183, v49);
                                                    let v185 =
                                                        constructor_ne(ctx, v2.0, v180, v184);
                                                    // Rule at src/opts/bitops.isle line 130.
                                                    returns.push(v185);
                                                }
                                            }
                                            let v517 = C::inst_data_etor(ctx, v169.0);
                                            let mut v517 = v517;
                                            while let Some(v518) = v517.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v610,
                                                    arg: v611,
                                                } = &v518.1
                                                {
                                                    if let &Opcode::Uextend = v610 {
                                                        let v619 = C::inst_data_etor(ctx, v611);
                                                        let mut v619 = v619;
                                                        while let Some(v620) = v619.next(ctx) {
                                                            if let &InstructionData::IntCompare {
                                                                opcode: ref v623,
                                                                args: ref v624,
                                                                cond: ref v625,
                                                            } = &v620.1
                                                            {
                                                                if let &Opcode::Icmp = v623 {
                                                                    if v2.0 == v620.0 {
                                                                        let v629 =
                                                                            C::subsume(ctx, v611);
                                                                        // Rule at src/opts/icmp.isle line 17.
                                                                        returns.push(v629);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    if v169.0 == v169.1 {
                                        let v49 = C::imm64(ctx, 0x0);
                                        let v50 = constructor_iconst(ctx, v47, v49);
                                        // Rule at src/opts/icmp.isle line 6.
                                        returns.push(v50);
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                let v667 = C::ty_smin(ctx, v173.0);
                                                let v668 = C::u64_eq(ctx, v178, v667);
                                                if v668 == true {
                                                    let v663 =
                                                        constructor_ne(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 98.
                                                    returns.push(v663);
                                                }
                                                let v669 = C::ty_smax(ctx, v173.0);
                                                let v670 = C::u64_eq(ctx, v178, v669);
                                                if v670 == true {
                                                    let v49 = C::imm64(ctx, 0x0);
                                                    let v50 = constructor_iconst(ctx, v47, v49);
                                                    let v51 = C::subsume(ctx, v50);
                                                    // Rule at src/opts/icmp.isle line 118.
                                                    returns.push(v51);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v49 = C::imm64(ctx, 0x0);
                                        let v50 = constructor_iconst(ctx, v47, v49);
                                        // Rule at src/opts/icmp.isle line 9.
                                        returns.push(v50);
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                let v667 = C::ty_smin(ctx, v173.0);
                                                let v668 = C::u64_eq(ctx, v178, v667);
                                                if v668 == true {
                                                    let v615 = C::imm64(ctx, 0x1);
                                                    let v618 = constructor_iconst(ctx, v47, v615);
                                                    let v664 = C::subsume(ctx, v618);
                                                    // Rule at src/opts/icmp.isle line 103.
                                                    returns.push(v664);
                                                }
                                                let v669 = C::ty_smax(ctx, v173.0);
                                                let v670 = C::u64_eq(ctx, v178, v669);
                                                if v670 == true {
                                                    let v662 =
                                                        constructor_eq(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 123.
                                                    returns.push(v662);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v615 = C::imm64(ctx, 0x1);
                                        let v618 = constructor_iconst(ctx, v47, v615);
                                        // Rule at src/opts/icmp.isle line 10.
                                        returns.push(v618);
                                    }
                                }
                            }
                            let v169 = C::unpack_value_array_2(ctx, v167);
                            let v172 = C::inst_data_etor(ctx, v169.1);
                            let mut v172 = v172;
                            while let Some(v173) = v172.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v176,
                                    imm: v177,
                                } = &v173.1
                                {
                                    if let &Opcode::Iconst = v176 {
                                        let v178 = C::u64_from_imm64(ctx, v177);
                                        if v178 == 0x0 {
                                            let v517 = C::inst_data_etor(ctx, v169.0);
                                            let mut v517 = v517;
                                            while let Some(v518) = v517.next(ctx) {
                                                if v518.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v610,
                                                        arg: v611,
                                                    } = &v518.1
                                                    {
                                                        if let &Opcode::Uextend = v610 {
                                                            let v612 = C::value_type(ctx, v611);
                                                            if v612 == I32 {
                                                                let v615 = C::imm64(ctx, 0x1);
                                                                let v616 = constructor_iconst(
                                                                    ctx, v2.0, v615,
                                                                );
                                                                // Rule at src/opts/extends.isle line 25.
                                                                returns.push(v616);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                let v667 = C::ty_smin(ctx, v173.0);
                                                let v668 = C::u64_eq(ctx, v178, v667);
                                                if v668 == true {
                                                    let v49 = C::imm64(ctx, 0x0);
                                                    let v50 = constructor_iconst(ctx, v47, v49);
                                                    let v51 = C::subsume(ctx, v50);
                                                    // Rule at src/opts/icmp.isle line 88.
                                                    returns.push(v51);
                                                }
                                                let v669 = C::ty_smax(ctx, v173.0);
                                                let v670 = C::u64_eq(ctx, v178, v669);
                                                if v670 == true {
                                                    let v663 =
                                                        constructor_ne(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 108.
                                                    returns.push(v663);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v49 = C::imm64(ctx, 0x0);
                                        let v50 = constructor_iconst(ctx, v47, v49);
                                        // Rule at src/opts/icmp.isle line 13.
                                        returns.push(v50);
                                    }
                                }
                            }
                            let v169 = C::unpack_value_array_2(ctx, v167);
                            let v172 = C::inst_data_etor(ctx, v169.1);
                            let mut v172 = v172;
                            while let Some(v173) = v172.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v176,
                                    imm: v177,
                                } = &v173.1
                                {
                                    if let &Opcode::Iconst = v176 {
                                        let v178 = C::u64_from_imm64(ctx, v177);
                                        if v178 == 0x0 {
                                            let v517 = C::inst_data_etor(ctx, v169.0);
                                            let mut v517 = v517;
                                            while let Some(v518) = v517.next(ctx) {
                                                if v518.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v610,
                                                        arg: v611,
                                                    } = &v518.1
                                                    {
                                                        if let &Opcode::Uextend = v610 {
                                                            let v612 = C::value_type(ctx, v611);
                                                            if v612 == I32 {
                                                                let v49 = C::imm64(ctx, 0x0);
                                                                let v613 = constructor_iconst(
                                                                    ctx, v2.0, v49,
                                                                );
                                                                // Rule at src/opts/extends.isle line 20.
                                                                returns.push(v613);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                let v667 = C::ty_smin(ctx, v173.0);
                                                let v668 = C::u64_eq(ctx, v178, v667);
                                                if v668 == true {
                                                    let v662 =
                                                        constructor_eq(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 93.
                                                    returns.push(v662);
                                                }
                                                let v669 = C::ty_smax(ctx, v173.0);
                                                let v670 = C::u64_eq(ctx, v178, v669);
                                                if v670 == true {
                                                    let v615 = C::imm64(ctx, 0x1);
                                                    let v618 = constructor_iconst(ctx, v47, v615);
                                                    let v664 = C::subsume(ctx, v618);
                                                    // Rule at src/opts/icmp.isle line 113.
                                                    returns.push(v664);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v615 = C::imm64(ctx, 0x1);
                                        let v618 = constructor_iconst(ctx, v47, v615);
                                        // Rule at src/opts/icmp.isle line 14.
                                        returns.push(v618);
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                if v178 == 0x0 {
                                                    let v663 =
                                                        constructor_ne(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 60.
                                                    returns.push(v663);
                                                }
                                                let v665 = C::ty_umax(ctx, v173.0);
                                                let v666 = C::u64_eq(ctx, v178, v665);
                                                if v666 == true {
                                                    let v49 = C::imm64(ctx, 0x0);
                                                    let v50 = constructor_iconst(ctx, v47, v49);
                                                    let v51 = C::subsume(ctx, v50);
                                                    // Rule at src/opts/icmp.isle line 78.
                                                    returns.push(v51);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v49 = C::imm64(ctx, 0x0);
                                        let v50 = constructor_iconst(ctx, v47, v49);
                                        // Rule at src/opts/icmp.isle line 7.
                                        returns.push(v50);
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                if v178 == 0x0 {
                                                    let v615 = C::imm64(ctx, 0x1);
                                                    let v618 = constructor_iconst(ctx, v47, v615);
                                                    let v664 = C::subsume(ctx, v618);
                                                    // Rule at src/opts/icmp.isle line 64.
                                                    returns.push(v664);
                                                }
                                                let v665 = C::ty_umax(ctx, v173.0);
                                                let v666 = C::u64_eq(ctx, v178, v665);
                                                if v666 == true {
                                                    let v662 =
                                                        constructor_eq(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 83.
                                                    returns.push(v662);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v615 = C::imm64(ctx, 0x1);
                                        let v618 = constructor_iconst(ctx, v47, v615);
                                        // Rule at src/opts/icmp.isle line 8.
                                        returns.push(v618);
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                if v178 == 0x0 {
                                                    let v49 = C::imm64(ctx, 0x0);
                                                    let v50 = constructor_iconst(ctx, v47, v49);
                                                    let v51 = C::subsume(ctx, v50);
                                                    // Rule at src/opts/icmp.isle line 52.
                                                    returns.push(v51);
                                                }
                                                let v665 = C::ty_umax(ctx, v173.0);
                                                let v666 = C::u64_eq(ctx, v178, v665);
                                                if v666 == true {
                                                    let v663 =
                                                        constructor_ne(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 68.
                                                    returns.push(v663);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v49 = C::imm64(ctx, 0x0);
                                        let v50 = constructor_iconst(ctx, v47, v49);
                                        // Rule at src/opts/icmp.isle line 11.
                                        returns.push(v50);
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v44 = C::fits_in_64(ctx, v2.0);
                            if let Some(v45) = v44 {
                                let v46 = C::ty_int(ctx, v45);
                                if let Some(v47) = v46 {
                                    let v169 = C::unpack_value_array_2(ctx, v167);
                                    let v172 = C::inst_data_etor(ctx, v169.1);
                                    let mut v172 = v172;
                                    while let Some(v173) = v172.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v176,
                                            imm: v177,
                                        } = &v173.1
                                        {
                                            if let &Opcode::Iconst = v176 {
                                                let v178 = C::u64_from_imm64(ctx, v177);
                                                if v178 == 0x0 {
                                                    let v662 =
                                                        constructor_eq(ctx, v47, v169.0, v169.1);
                                                    // Rule at src/opts/icmp.isle line 56.
                                                    returns.push(v662);
                                                }
                                                let v665 = C::ty_umax(ctx, v173.0);
                                                let v666 = C::u64_eq(ctx, v178, v665);
                                                if v666 == true {
                                                    let v615 = C::imm64(ctx, 0x1);
                                                    let v618 = constructor_iconst(ctx, v47, v615);
                                                    let v664 = C::subsume(ctx, v618);
                                                    // Rule at src/opts/icmp.isle line 73.
                                                    returns.push(v664);
                                                }
                                            }
                                        }
                                    }
                                    if v169.0 == v169.1 {
                                        let v615 = C::imm64(ctx, 0x1);
                                        let v618 = constructor_iconst(ctx, v47, v615);
                                        // Rule at src/opts/icmp.isle line 12.
                                        returns.push(v618);
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v169 = C::unpack_value_array_2(ctx, v167);
                    let v517 = C::inst_data_etor(ctx, v169.0);
                    let mut v517 = v517;
                    while let Some(v518) = v517.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v521,
                            imm: v522,
                        } = &v518.1
                        {
                            if let &Opcode::Iconst = v521 {
                                let v172 = C::inst_data_etor(ctx, v169.1);
                                let mut v172 = v172;
                                while let Some(v173) = v172.next(ctx) {
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v176,
                                        imm: v177,
                                    } = &v173.1
                                    {
                                        if let &Opcode::Iconst = v176 {
                                            if v173.0 == v518.0 {
                                                let v523 =
                                                    C::imm64_icmp(ctx, v518.0, v168, v522, v177);
                                                let v524 = constructor_iconst(ctx, v2.0, v523);
                                                let v525 = C::subsume(ctx, v524);
                                                // Rule at src/opts/cprop.isle line 82.
                                                returns.push(v525);
                                            }
                                        }
                                    }
                                }
                                let v533 = &C::intcc_swap_args(ctx, v168);
                                let v534 = constructor_icmp(ctx, v2.0, v533, v169.1, v169.0);
                                // Rule at src/opts/cprop.isle line 116.
                                returns.push(v534);
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v95,
                args: ref v96,
            } => {
                match v95 {
                    &Opcode::Select => {
                        let v97 = C::unpack_value_array_3(ctx, v96);
                        let v101 = C::inst_data_etor(ctx, v97.0);
                        let mut v101 = v101;
                        while let Some(v102) = v101.next(ctx) {
                            match &v102.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v692,
                                    args: ref v693,
                                    cond: ref v694,
                                } => {
                                    if let &Opcode::Icmp = v692 {
                                        match v694 {
                                            &IntCC::SignedGreaterThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 8.
                                                        returns.push(v698);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 22.
                                                        returns.push(v700);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 9.
                                                        returns.push(v698);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 23.
                                                        returns.push(v700);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 12.
                                                        returns.push(v700);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 18.
                                                        returns.push(v698);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 13.
                                                        returns.push(v700);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 19.
                                                        returns.push(v698);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 10.
                                                        returns.push(v699);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 24.
                                                        returns.push(v701);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 11.
                                                        returns.push(v699);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 25.
                                                        returns.push(v701);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 14.
                                                        returns.push(v701);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 20.
                                                        returns.push(v699);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 15.
                                                        returns.push(v701);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 21.
                                                        returns.push(v699);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v105,
                                    arg: v106,
                                } => {
                                    if let &Opcode::Uextend = v105 {
                                        let v633 = C::inst_data_etor(ctx, v106);
                                        let mut v633 = v633;
                                        while let Some(v634) = v633.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v637,
                                                args: ref v638,
                                                cond: ref v639,
                                            } = &v634.1
                                            {
                                                if let &Opcode::Icmp = v637 {
                                                    let v643 = constructor_select(
                                                        ctx, v2.0, v106, v97.1, v97.2,
                                                    );
                                                    // Rule at src/opts/icmp.isle line 29.
                                                    returns.push(v643);
                                                    // Rule at src/opts/icmp.isle line 32.
                                                    returns.push(v643);
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v565,
                                    imm: v566,
                                } => {
                                    if let &Opcode::Iconst = v565 {
                                        let v567 = C::u64_from_imm64(ctx, v566);
                                        if v567 == 0x0 {
                                            // Rule at src/opts/cprop.isle line 172.
                                            returns.push(v97.2);
                                        }
                                        let v568 = C::u64_is_zero(ctx, v567);
                                        if v568 == false {
                                            // Rule at src/opts/cprop.isle line 169.
                                            returns.push(v97.1);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v97.1 == v97.2 {
                            // Rule at src/opts/selects.isle line 4.
                            returns.push(v97.1);
                        }
                        let v163 = constructor_truthy(ctx, v97.0);
                        let mut v163 = v163;
                        while let Some(v164) = v163.next(ctx) {
                            let v165 = constructor_select(ctx, v2.0, v164, v97.1, v97.2);
                            // Rule at src/opts/bitops.isle line 128.
                            returns.push(v165);
                        }
                    }
                    &Opcode::Bitselect => {
                        let v702 = C::multi_lane(ctx, v2.0);
                        if let Some(v703) = v702 {
                            let v97 = C::unpack_value_array_3(ctx, v96);
                            let v101 = C::inst_data_etor(ctx, v97.0);
                            let mut v101 = v101;
                            while let Some(v102) = v101.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v692,
                                    args: ref v693,
                                    cond: ref v694,
                                } = &v102.1
                                {
                                    if let &Opcode::Icmp = v692 {
                                        match v694 {
                                            &IntCC::SignedGreaterThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 28.
                                                        returns.push(v698);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 42.
                                                        returns.push(v700);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 29.
                                                        returns.push(v698);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 43.
                                                        returns.push(v700);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 32.
                                                        returns.push(v700);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 38.
                                                        returns.push(v698);
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v700 = constructor_smin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 33.
                                                        returns.push(v700);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v698 = constructor_smax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 39.
                                                        returns.push(v698);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 30.
                                                        returns.push(v699);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 44.
                                                        returns.push(v701);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 31.
                                                        returns.push(v699);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 45.
                                                        returns.push(v701);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 34.
                                                        returns.push(v701);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 40.
                                                        returns.push(v699);
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v695 = C::unpack_value_array_2(ctx, v693);
                                                if v97.1 == v695.0 {
                                                    if v97.2 == v695.1 {
                                                        let v701 = constructor_umin(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 35.
                                                        returns.push(v701);
                                                    }
                                                }
                                                if v97.1 == v695.1 {
                                                    if v97.2 == v695.0 {
                                                        let v699 = constructor_umax(
                                                            ctx, v2.0, v695.0, v695.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 41.
                                                        returns.push(v699);
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v97 = C::unpack_value_array_3(ctx, v96);
                        if v97.1 == v97.2 {
                            // Rule at src/opts/selects.isle line 5.
                            returns.push(v97.1);
                        }
                    }
                    &Opcode::Fma => {
                        let v97 = C::unpack_value_array_3(ctx, v96);
                        let v101 = C::inst_data_etor(ctx, v97.0);
                        let mut v101 = v101;
                        while let Some(v102) = v101.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v105,
                                arg: v106,
                            } = &v102.1
                            {
                                if let &Opcode::Fneg = v105 {
                                    if v2.0 == v102.0 {
                                        let v107 = C::inst_data_etor(ctx, v97.1);
                                        let mut v107 = v107;
                                        while let Some(v108) = v107.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v111,
                                                arg: v112,
                                            } = &v108.1
                                            {
                                                if let &Opcode::Fneg = v111 {
                                                    if v2.0 == v108.0 {
                                                        let v113 = constructor_fma(
                                                            ctx, v2.0, v106, v112, v97.2,
                                                        );
                                                        // Rule at src/opts/arithmetic.isle line 122.
                                                        returns.push(v113);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v27,
                arg: v28,
            } => {
                match v27 {
                    &Opcode::Splat => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v585,
                                    imm: v586,
                                } => {
                                    if let &Opcode::F32const = v585 {
                                        let v587 = C::u32_from_ieee32(ctx, v586);
                                        let v588 = C::u32_as_u64(ctx, v587);
                                        let v589 = constructor_splat32(ctx, v588);
                                        let v590 = constructor_vconst(ctx, v2.0, v589);
                                        // Rule at src/opts/cprop.isle line 188.
                                        returns.push(v590);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v591,
                                    imm: v592,
                                } => {
                                    if let &Opcode::F64const = v591 {
                                        let v593 = C::u64_from_ieee64(ctx, v592);
                                        let v594 = C::splat64(ctx, v593);
                                        let v595 = constructor_vconst(ctx, v2.0, v594);
                                        // Rule at src/opts/cprop.isle line 190.
                                        returns.push(v595);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v487,
                                    imm: v488,
                                } => {
                                    if let &Opcode::Iconst = v487 {
                                        match v30.0 {
                                            I8 => {
                                                let v570 = C::u64_uextend_imm64(ctx, I8, v488);
                                                let v571 = constructor_splat8(ctx, v570);
                                                let v572 = constructor_vconst(ctx, v2.0, v571);
                                                // Rule at src/opts/cprop.isle line 180.
                                                returns.push(v572);
                                            }
                                            I16 => {
                                                let v574 = C::u64_uextend_imm64(ctx, I16, v488);
                                                let v575 = constructor_splat16(ctx, v574);
                                                let v576 = constructor_vconst(ctx, v2.0, v575);
                                                // Rule at src/opts/cprop.isle line 182.
                                                returns.push(v576);
                                            }
                                            I32 => {
                                                let v578 = C::u64_uextend_imm64(ctx, I32, v488);
                                                let v579 = constructor_splat32(ctx, v578);
                                                let v580 = constructor_vconst(ctx, v2.0, v579);
                                                // Rule at src/opts/cprop.isle line 184.
                                                returns.push(v580);
                                            }
                                            I64 => {
                                                let v582 = C::u64_uextend_imm64(ctx, I64, v488);
                                                let v583 = C::splat64(ctx, v582);
                                                let v584 = constructor_vconst(ctx, v2.0, v583);
                                                // Rule at src/opts/cprop.isle line 186.
                                                returns.push(v584);
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::Binary {
                                    opcode: ref v57,
                                    args: ref v58,
                                } => {
                                    if let &Opcode::Ushr = v57 {
                                        if v2.0 == v30.0 {
                                            let v59 = C::unpack_value_array_2(ctx, v58);
                                            let v62 = C::inst_data_etor(ctx, v59.1);
                                            let mut v62 = v62;
                                            while let Some(v63) = v62.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v66,
                                                    imm: v67,
                                                } = &v63.1
                                                {
                                                    if let &Opcode::Iconst = v66 {
                                                        let v68 = C::u64_from_imm64(ctx, v67);
                                                        let v150 =
                                                            constructor_ty_shift_mask(ctx, v2.0);
                                                        let v745 = C::u64_eq(ctx, v68, v150);
                                                        if v745 == true {
                                                            if v2.0 == v63.0 {
                                                                let v746 = constructor_sshr(
                                                                    ctx, v2.0, v59.0, v59.1,
                                                                );
                                                                // Rule at src/opts/shifts.isle line 102.
                                                                returns.push(v746);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v33,
                                    arg: v34,
                                } => {
                                    match v33 {
                                        &Opcode::Splat => {
                                            if v2.0 == v30.0 {
                                                let v763 = C::lane_type(ctx, v2.0);
                                                let v825 = constructor_ineg(ctx, v763, v34);
                                                let v826 = constructor_splat(ctx, v2.0, v825);
                                                // Rule at src/opts/vector.isle line 45.
                                                returns.push(v826);
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v30.0 {
                                                let v35 = C::subsume(ctx, v34);
                                                // Rule at src/opts/arithmetic.isle line 25.
                                                returns.push(v35);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                match v33 {
                                    &Opcode::Splat => {
                                        if v2.0 == v30.0 {
                                            let v763 = C::lane_type(ctx, v2.0);
                                            let v827 = constructor_iabs(ctx, v763, v34);
                                            let v828 = constructor_splat(ctx, v2.0, v827);
                                            // Rule at src/opts/vector.isle line 48.
                                            returns.push(v828);
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v30.0 {
                                            let v42 = constructor_iabs(ctx, v2.0, v34);
                                            // Rule at src/opts/arithmetic.isle line 32.
                                            returns.push(v42);
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v30.0 {
                                            let v43 = C::subsume(ctx, v28);
                                            // Rule at src/opts/arithmetic.isle line 36.
                                            returns.push(v43);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::Binary {
                                    opcode: ref v57,
                                    args: ref v58,
                                } => {
                                    match v57 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v30.0 {
                                                let v59 = C::unpack_value_array_2(ctx, v58);
                                                let v62 = C::inst_data_etor(ctx, v59.1);
                                                let mut v62 = v62;
                                                while let Some(v63) = v62.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v66,
                                                        imm: v67,
                                                    } = &v63.1
                                                    {
                                                        if let &Opcode::Iconst = v66 {
                                                            let v70 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v67,
                                                            );
                                                            if v70 == -0x1 {
                                                                if v2.0 == v63.0 {
                                                                    let v69 = constructor_ineg(
                                                                        ctx, v2.0, v59.0,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 82.
                                                                    returns.push(v69);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v71 = C::inst_data_etor(ctx, v59.0);
                                                let mut v71 = v71;
                                                while let Some(v72) = v71.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v75,
                                                        imm: v76,
                                                    } = &v72.1
                                                    {
                                                        if let &Opcode::Iconst = v75 {
                                                            let v77 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v76,
                                                            );
                                                            if v77 == -0x1 {
                                                                if v2.0 == v72.0 {
                                                                    let v78 = constructor_ineg(
                                                                        ctx, v2.0, v59.1,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 85.
                                                                    returns.push(v78);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v30.0 {
                                                let v59 = C::unpack_value_array_2(ctx, v58);
                                                let v62 = C::inst_data_etor(ctx, v59.1);
                                                let mut v62 = v62;
                                                while let Some(v63) = v62.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v66,
                                                        imm: v67,
                                                    } = &v63.1
                                                    {
                                                        if let &Opcode::Iconst = v66 {
                                                            let v68 = C::u64_from_imm64(ctx, v67);
                                                            if v68 == 0x1 {
                                                                if v2.0 == v63.0 {
                                                                    let v69 = constructor_ineg(
                                                                        ctx, v2.0, v59.0,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 80.
                                                                    returns.push(v69);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v59 = C::unpack_value_array_2(ctx, v58);
                                            let v119 = constructor_bnot(ctx, v2.0, v59.0);
                                            let v120 = constructor_bnot(ctx, v2.0, v59.1);
                                            let v122 = constructor_bor(ctx, v2.0, v119, v120);
                                            // Rule at src/opts/bitops.isle line 60.
                                            returns.push(v122);
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v30.0 {
                                                let v59 = C::unpack_value_array_2(ctx, v58);
                                                let v119 = constructor_bnot(ctx, v2.0, v59.0);
                                                let v120 = constructor_bnot(ctx, v2.0, v59.1);
                                                let v121 = constructor_band(ctx, v2.0, v119, v120);
                                                // Rule at src/opts/bitops.isle line 57.
                                                returns.push(v121);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v33,
                                    arg: v34,
                                } => {
                                    match v33 {
                                        &Opcode::Splat => {
                                            let v805 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v806) = v805 {
                                                if v2.0 == v30.0 {
                                                    let v763 = C::lane_type(ctx, v2.0);
                                                    let v813 = constructor_bnot(ctx, v763, v34);
                                                    let v814 = constructor_splat(ctx, v2.0, v813);
                                                    // Rule at src/opts/vector.isle line 26.
                                                    returns.push(v814);
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v30.0 {
                                                let v35 = C::subsume(ctx, v34);
                                                // Rule at src/opts/bitops.isle line 53.
                                                returns.push(v35);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v487,
                                    imm: v488,
                                } => {
                                    if let &Opcode::Iconst = v487 {
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            if v30.0 == v45 {
                                                let v489 = C::u64_from_imm64(ctx, v488);
                                                let v490 = C::u64_not(ctx, v489);
                                                let v491 = C::imm64_masked(ctx, v45, v490);
                                                let v492 = constructor_iconst(ctx, v45, v491);
                                                let v493 = C::subsume(ctx, v492);
                                                // Rule at src/opts/cprop.isle line 53.
                                                returns.push(v493);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v685 = C::remat(ctx, arg0);
                        // Rule at src/opts/remat.isle line 24.
                        returns.push(v685);
                    }
                    &Opcode::Bitrev => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Bitrev = v33 {
                                    if v2.0 == v30.0 {
                                        let v35 = C::subsume(ctx, v34);
                                        // Rule at src/opts/bitops.isle line 147.
                                        returns.push(v35);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Bswap = v33 {
                                    if v2.0 == v30.0 {
                                        let v35 = C::subsume(ctx, v34);
                                        // Rule at src/opts/bitops.isle line 144.
                                        returns.push(v35);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    if v2.0 == v30.0 {
                                        let v763 = C::lane_type(ctx, v2.0);
                                        let v829 = constructor_popcnt(ctx, v763, v34);
                                        let v830 = constructor_splat(ctx, v2.0, v829);
                                        // Rule at src/opts/vector.isle line 51.
                                        returns.push(v830);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fneg => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Fneg = v33 {
                                    if v2.0 == v30.0 {
                                        let v35 = C::subsume(ctx, v34);
                                        // Rule at src/opts/arithmetic.isle line 118.
                                        returns.push(v35);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bmask => {
                        let v160 = constructor_truthy(ctx, v28);
                        let mut v160 = v160;
                        while let Some(v161) = v160.next(ctx) {
                            let v162 = constructor_bmask(ctx, v2.0, v161);
                            // Rule at src/opts/bitops.isle line 127.
                            returns.push(v162);
                        }
                    }
                    &Opcode::Ireduce => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::Unary {
                                    opcode: ref v33,
                                    arg: v34,
                                } => {
                                    match v33 {
                                        &Opcode::Bmask => {
                                            let v186 = constructor_bmask(ctx, v2.0, v34);
                                            // Rule at src/opts/bitops.isle line 141.
                                            returns.push(v186);
                                        }
                                        &Opcode::Uextend => {
                                            let v617 = C::value_type(ctx, v34);
                                            if v2.0 == v617 {
                                                // Rule at src/opts/extends.isle line 34.
                                                returns.push(v34);
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v617 = C::value_type(ctx, v34);
                                            if v2.0 == v617 {
                                                // Rule at src/opts/extends.isle line 33.
                                                returns.push(v34);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v487,
                                    imm: v488,
                                } => {
                                    if let &Opcode::Iconst = v487 {
                                        let v503 = C::fits_in_64(ctx, v30.0);
                                        if let Some(v504) = v503 {
                                            let v489 = C::u64_from_imm64(ctx, v488);
                                            let v505 = C::imm64_masked(ctx, v2.0, v489);
                                            let v506 = constructor_iconst(ctx, v2.0, v505);
                                            let v507 = C::subsume(ctx, v506);
                                            // Rule at src/opts/cprop.isle line 73.
                                            returns.push(v507);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v849 = constructor_sextend(ctx, v763, v34);
                                    let v850 = constructor_splat(ctx, v2.0, v849);
                                    // Rule at src/opts/vector.isle line 85.
                                    returns.push(v850);
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v849 = constructor_sextend(ctx, v763, v34);
                                    let v850 = constructor_splat(ctx, v2.0, v849);
                                    // Rule at src/opts/vector.isle line 84.
                                    returns.push(v850);
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v851 = constructor_uextend(ctx, v763, v34);
                                    let v852 = constructor_splat(ctx, v2.0, v851);
                                    // Rule at src/opts/vector.isle line 88.
                                    returns.push(v852);
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v851 = constructor_uextend(ctx, v763, v34);
                                    let v852 = constructor_splat(ctx, v2.0, v851);
                                    // Rule at src/opts/vector.isle line 87.
                                    returns.push(v852);
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::Unary {
                                    opcode: ref v33,
                                    arg: v34,
                                } => {
                                    if let &Opcode::Uextend = v33 {
                                        let v602 = constructor_uextend(ctx, v2.0, v34);
                                        // Rule at src/opts/extends.isle line 2.
                                        returns.push(v602);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v487,
                                    imm: v488,
                                } => {
                                    if let &Opcode::Iconst = v487 {
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            let v508 = C::u64_uextend_imm64(ctx, v30.0, v488);
                                            let v509 = C::imm64(ctx, v508);
                                            let v510 = constructor_iconst(ctx, v45, v509);
                                            let v511 = C::subsume(ctx, v510);
                                            // Rule at src/opts/cprop.isle line 76.
                                            returns.push(v511);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            match &v30.1 {
                                &InstructionData::Unary {
                                    opcode: ref v33,
                                    arg: v34,
                                } => {
                                    match v33 {
                                        &Opcode::Bmask => {
                                            let v186 = constructor_bmask(ctx, v2.0, v34);
                                            // Rule at src/opts/bitops.isle line 140.
                                            returns.push(v186);
                                        }
                                        &Opcode::Sextend => {
                                            let v603 = constructor_sextend(ctx, v2.0, v34);
                                            // Rule at src/opts/extends.isle line 4.
                                            returns.push(v603);
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v487,
                                    imm: v488,
                                } => {
                                    if let &Opcode::Iconst = v487 {
                                        let v44 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v45) = v44 {
                                            let v512 = C::i64_sextend_imm64(ctx, v30.0, v488);
                                            let v513 = C::i64_as_u64(ctx, v512);
                                            let v514 = C::imm64_masked(ctx, v45, v513);
                                            let v515 = constructor_iconst(ctx, v45, v514);
                                            let v516 = C::subsume(ctx, v515);
                                            // Rule at src/opts/cprop.isle line 79.
                                            returns.push(v516);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v801 = constructor_fcvt_from_uint(ctx, v763, v34);
                                    let v802 = constructor_splat(ctx, v2.0, v801);
                                    // Rule at src/opts/vector.isle line 6.
                                    returns.push(v802);
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let v29 = C::inst_data_etor(ctx, v28);
                        let mut v29 = v29;
                        while let Some(v30) = v29.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v33,
                                arg: v34,
                            } = &v30.1
                            {
                                if let &Opcode::Splat = v33 {
                                    let v763 = C::lane_type(ctx, v2.0);
                                    let v803 = constructor_fcvt_from_sint(ctx, v763, v34);
                                    let v804 = constructor_splat(ctx, v2.0, v803);
                                    // Rule at src/opts/vector.isle line 8.
                                    returns.push(v804);
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v688,
                imm: v689,
            } => {
                if let &Opcode::F32const = v688 {
                    let v685 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 28.
                    returns.push(v685);
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v690,
                imm: v691,
            } => {
                if let &Opcode::F64const = v690 {
                    let v685 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 30.
                    returns.push(v685);
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v686,
                imm: v687,
            } => {
                if let &Opcode::Iconst = v686 {
                    let v685 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 26.
                    returns.push(v685);
                }
            }
            _ => {}
        }
    }
    return ContextIterWrapper::from(returns.into_iter());
}

// Generated as internal constructor for term iconst_u64.
pub fn constructor_iconst_u64<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Value {
    if arg0 == I128 {
        let v10 = C::imm64_masked(ctx, I64, arg1);
        let v11 = constructor_iconst(ctx, I64, v10);
        let v12 = constructor_uextend(ctx, I128, v11);
        // Rule at src/prelude_opt.isle line 57.
        return v12;
    }
    let v1 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_umax(ctx, v2);
        let v5 = C::u64_le(ctx, arg1, v4);
        if v5 == true {
            let v6 = C::imm64_masked(ctx, v2, arg1);
            let v7 = constructor_iconst(ctx, v2, v6);
            // Rule at src/prelude_opt.isle line 52.
            return v7;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_u64", "src/prelude_opt.isle line 49"
    )
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> impl ContextIter<Context = C, Output = Value> {
    let mut returns = ConstructorVec::new();
    let v1 = C::inst_data_etor(ctx, arg0);
    let mut v1 = v1;
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 119.
                        returns.push(v9.0);
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 120.
                        returns.push(v9.0);
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let v39 = C::inst_data_etor(ctx, v36.1);
                        let mut v39 = v39;
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1
                            {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0 {
                                        // Rule at src/opts/bitops.isle line 123.
                                        returns.push(v36.0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let v18 = C::inst_data_etor(ctx, v14.1);
                    let mut v18 = v18;
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1
                        {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let v26 = C::inst_data_etor(ctx, v14.2);
                                    let mut v26 = v26;
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1
                                        {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0 {
                                                    // Rule at src/opts/bitops.isle line 121.
                                                    returns.push(v14.0);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src/opts/bitops.isle line 115.
                        returns.push(v6);
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/opts/bitops.isle line 117.
                        returns.push(v6);
                    }
                    &Opcode::Bswap => {
                        // Rule at src/opts/bitops.isle line 116.
                        returns.push(v6);
                    }
                    &Opcode::Popcnt => {
                        // Rule at src/opts/bitops.isle line 118.
                        returns.push(v6);
                    }
                    &Opcode::Bmask => {
                        // Rule at src/opts/bitops.isle line 114.
                        returns.push(v6);
                    }
                    &Opcode::Uextend => {
                        // Rule at src/opts/bitops.isle line 113.
                        returns.push(v6);
                    }
                    &Opcode::Sextend => {
                        // Rule at src/opts/bitops.isle line 112.
                        returns.push(v6);
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    return ContextIterWrapper::from(returns.into_iter());
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src/opts/cprop.isle line 194.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src/opts/cprop.isle line 196.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src/opts/cprop.isle line 198.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2, v4);
        // Rule at src/opts/icmp.isle line 137.
        return Some(v7);
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 142.
            return 0x1;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 151.
            return 0x6;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 148.
            return 0x4;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 150.
            return 0x5;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 144.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 146.
            return 0x3;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 147.
            return 0x4;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 149.
            return 0x5;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 143.
            return 0x2;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 145.
            return 0x3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "decompose_intcc", "src/opts/icmp.isle line 141"
    )
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0 => {
            let v6 = C::imm64(ctx, 0x0);
            let v7 = constructor_iconst(ctx, arg0, v6);
            let v8 = C::subsume(ctx, v7);
            // Rule at src/opts/icmp.isle line 154.
            return v8;
        }
        0x1 => {
            let v10 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src/opts/icmp.isle line 155.
            return v10;
        }
        0x2 => {
            match arg2 {
                true => {
                    let v14 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 157.
                    return v14;
                }
                false => {
                    let v12 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 156.
                    return v12;
                }
                _ => {}
            }
        }
        0x3 => {
            match arg2 {
                true => {
                    let v18 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 159.
                    return v18;
                }
                false => {
                    let v16 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 158.
                    return v16;
                }
                _ => {}
            }
        }
        0x4 => {
            match arg2 {
                true => {
                    let v22 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 161.
                    return v22;
                }
                false => {
                    let v20 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 160.
                    return v20;
                }
                _ => {}
            }
        }
        0x5 => {
            match arg2 {
                true => {
                    let v26 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 163.
                    return v26;
                }
                false => {
                    let v24 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 162.
                    return v24;
                }
                _ => {}
            }
        }
        0x6 => {
            let v28 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src/opts/icmp.isle line 164.
            return v28;
        }
        0x7 => {
            let v30 = C::imm64(ctx, 0x1);
            let v31 = constructor_iconst(ctx, arg0, v30);
            let v32 = C::subsume(ctx, v31);
            // Rule at src/opts/icmp.isle line 165.
            return v32;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "compose_icmp", "src/opts/icmp.isle line 153"
    )
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 176.
            return 0x3;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 177.
            return 0x3;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 174.
            return 0x2;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 175.
            return 0x2;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 172.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 173.
            return 0x2;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 170.
            return 0x1;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 171.
            return 0x1;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 168.
            return 0x1;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 169.
            return 0x1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "intcc_class", "src/opts/icmp.isle line 167"
    )
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(ctx: &mut C, arg0: u64) -> Option<Type> {
    match arg0 {
        0x8 => {
            // Rule at src/opts/shifts.isle line 97.
            return Some(I8);
        }
        0x10 => {
            // Rule at src/opts/shifts.isle line 98.
            return Some(I16);
        }
        0x20 => {
            // Rule at src/opts/shifts.isle line 99.
            return Some(I32);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 218.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 215.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 213.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iadd_uextend", "src/opts/shifts.isle line 212"
    )
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 230.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 227.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 225.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "isub_uextend", "src/opts/shifts.isle line 224"
    )
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: FuncRef) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 362.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 371.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 380.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 389.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 398.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 407.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 416.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 425.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 434.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 443.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 452.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 461.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 470.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 479.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 488.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 497.
    return v6;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 506.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 515.
    return v6;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 524.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 533.
    return v6;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 542.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 551.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 560.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 569.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 578.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 587.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 596.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 605.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 614.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 623.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 632.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 641.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 650.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 659.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 668.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 677.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 686.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 695.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 704.
    return v3;
}

// Generated as internal constructor for term table_addr.
pub fn constructor_table_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Table,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::TableAddr {
        opcode: Opcode::TableAddr,
        arg: arg2,
        table: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 713.
    return v6;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Imm64) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 722.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee32) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 731.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee64) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 740.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Constant) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 749.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 758.
    return v7;
}

// Generated as internal constructor for term null.
pub fn constructor_null<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::Null,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 767.
    return v3;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 776.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 785.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 794.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 803.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 812.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 821.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 830.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 839.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 848.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 857.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 866.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 875.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 884.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 893.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 902.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 911.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 920.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 929.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 938.
    return v6;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 947.
    return v6;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 956.
    return v6;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 965.
    return v6;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 974.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 983.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 992.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1001.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1010.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1019.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1028.
    return v5;
}

// Generated as internal constructor for term iadd_cin.
pub fn constructor_iadd_cin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IaddCin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1037.
    return v7;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &TrapCode,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v5.clone(),
        code: arg3.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1046.
    return v7;
}

// Generated as internal constructor for term isub_bin.
pub fn constructor_isub_bin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IsubBin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1055.
    return v7;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1064.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1073.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1082.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1091.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1100.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1109.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1118.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1127.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Imm64) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1136.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1145.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1163.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1172.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1181.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1190.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1199.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1208.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1217.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1226.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1235.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1244.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1253.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1262.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1271.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1280.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1289.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1298.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1307.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1316.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1325.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1334.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1343.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1352.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1361.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1370.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1379.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1388.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1397.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1406.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1415.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1424.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1433.
    return v4;
}

// Generated as internal constructor for term is_null.
pub fn constructor_is_null<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsNull,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1442.
    return v4;
}

// Generated as internal constructor for term is_invalid.
pub fn constructor_is_invalid<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsInvalid,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1451.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1460.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1469.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1478.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1487.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1496.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1505.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1514.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1523.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1532.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1541.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1550.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1559.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1568.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1577.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1586.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1595.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1604.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1613.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1622.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1631.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1640.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1649.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1658.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1667.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1676.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1685.
    return v4;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1694.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: &AtomicRmwOp,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_2_ctor(ctx, arg3, arg4);
    let v7 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v6.clone(),
        flags: arg1,
        op: arg2.clone(),
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1703.
    return v8;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_3_ctor(ctx, arg2, arg3, arg4);
    let v7 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v6.clone(),
        flags: arg1,
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1712.
    return v8;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1721.
    return v5;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/ubuntu/lanc/cyber-trust-experiment/target/release/build/cranelift-codegen-87447c4db3339953/out/clif_opt.isle line 1730.
    return v5;
}
